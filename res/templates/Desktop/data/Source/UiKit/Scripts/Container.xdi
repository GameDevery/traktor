<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

-- Container

Container = Container or inherit(Widget)
Container_meta = Container_meta or { name = "Container", __index = Container }

function Container.new(parent, layout)
	local o = {}
	setmetatable(o, Container_meta)

	local depth = parent._inner_mc:getNextHighestDepth()
	local mc = parent._inner_mc:createEmptyMovieClip("mc", depth)
	assert (mc ~= nil)

	o:_initialize(parent, mc, mc, layout)
	return o
end

function Container:remove()
	while #self._children > 0 do
		self._children[1]:remove()
	end
	Widget.remove(self)
end

function Container:getPreferredSize()
	if self._layout ~= nil then
		local w, h = self._layout:estimate(self)
		return { width = w, height = h }
	else
		local w, h = 0, 0
		for _, child in ipairs(self._children) do
			local ps = child:getPreferredSize()
			w = math.max(w, ps.width)
			h = math.max(h, ps.height)
		end
		return { width = w, height = h }
	end
end

function Container:place(x, y, width, height)
	Widget.place(self, x, y, width, height)
	if self._layout ~= nil then
		self._layout:update(self, width, height)
	end
end

function Container:layout()
	if self._layout ~= nil then
		local p = self:getPlacement()
		self._layout:update(self, p.width, p.height)
	end
end

function Container:debug(indent)
	Widget.debug(self, indent)
	if indent == nil then indent = "" end
	for i = 1, #self._children do
		print(indent .. "child[" .. i .. "]")
		self._children[i]:debug(indent .. "\\t")
	end
end

-- Private

function Container:_initialize(parent, mc, inner_mc, layout)
	self._inner_mc = inner_mc
	self._layout = layout
	self._children = {}
	Widget._initialize(self, parent, mc)
end

function Container:_addChild(child)
	table.insert(self._children, child)
end

function Container:_removeChild(child)
	for i, k in ipairs(self._children) do
		if k == child then
			table.remove(self._children, i)
			return
		end
	end
	error("Not a child of this container")
end

function Container:_getChildren()
	return self._children
end

	]]>
	</text>
</object>
