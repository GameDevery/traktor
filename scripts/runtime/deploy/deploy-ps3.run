import(traktor)
import(traktor.run)


-- Load common script.
if not run:loadScript("$(RUN_SCRIPT_PATH)/common/common.run") then
	stderr:printLn("Unable to load \"common.run\"; installation broken?")
	return 1
end


function build(args)
	return commonBuild(args)
end


function deploy(args)
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Get library paths.
	local libraryPaths = ""
	local paths = ""
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end
	for _, p in pairs(paths) do
		libraryPaths = libraryPaths .. " --library-path=" .. Path(p).pathName
	end

	-- Collect libraries to link.
	local libraries = {}
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for _, f in ipairs(files) do
		table.insert(libraries, f)
	end

	-- Create a linker "keep" symbol file.
	local f = fileSystem:open(Path("keep.sym"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	local modules = os:getEnvironment("DEPLOY_MODULES"):split("\n")
	for _, m in ipairs(modules) do
		s:printLn("__module__" .. m:gsub("%.", "_"))
	end
	f:close()
	
	-- Build link command line.
	local ld = "$(SCE_PS3_ROOT)/host-win32/sn/bin/ps3ppuld " .. libraryPaths
	for _, m in ipairs(libraries) do
		ld = ld .. " " .. m
	end
	ld = ld .. " --keep=keep.sym"
	if not debug then ld = ld .. " -s --s-lib --strip-unused-data --strip-duplicates" end
	ld = ld .. " -o " .. executable .. ".elf"

	-- Link executable product.
	local result = run:execute(ld)
	if result ~= 0 then
		stderr:printLn("Failed to link PS3 executable.")
		stderr:printLn(ld)
		return 1
	end

	-- Sign executable product.
	local result = run:execute("$(SCE_PS3_ROOT)/host-win32/bin/make_fself " .. executable .. ".elf " .. executable .. ".self")
	if result ~= 0 then
		stderr:printLn("Failed to sign PS3 executable.")
		return 1
	end

	run:rm(executable .. ".elf")
	run:rm("keep.sym")
	return 0
end


function launch(args)
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")

	stdout:printLn("Launching PS3...")
	local result = run:execute("\"$(SN_PS3_PATH)/bin/ps3run.exe\" -k -r2 -f . " .. executable .. ".self") --, "(null)")
	if result ~= 0 then
		stderr:printLn("Failed to launch PS3 executable (" .. result .. ").")
		return 1
	end

	return 0
end


function migrate(args)
	stdout:printLn("Migrating PS3...")

	run:execute(tools.migrate .. " -p -s=Migrate")
	if run:exitCode() ~= 0 then return run:exitCode() end

	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Get library paths.
	local libraryPaths = ""
	local paths = ""
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end
	for _, p in pairs(paths) do
		libraryPaths = libraryPaths .. " --library-path=" .. Path(p).pathName .. "/ppu"
		libraryPaths = libraryPaths .. " --library-path=" .. Path(p).pathName .. "/spu"
	end

	-- Collect libraries to link.
	local libraries = {}
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for _, f in ipairs(files) do
		table.insert(libraries, f)
	end

	-- Create a linker "keep" symbol file.
	local f = fileSystem:open(Path("keep.sym"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	local modules = os:getEnvironment("DEPLOY_MODULES"):split("\n")
	for _, m in ipairs(modules) do
		s:printLn("__module__" .. m:gsub("%.", "_"))
	end
	f:close()
	
	-- Build link command line.
	local ld = "$(SCE_PS3_ROOT)/host-win32/sn/bin/ps3ppuld " .. libraryPaths
	for _, m in ipairs(libraries) do
		ld = ld .. " " .. m
	end
	ld = ld .. " --keep=keep.sym"
	if not debug then ld = ld .. " -s --s-lib --strip-unused-data --strip-duplicates" end
	ld = ld .. " -o " .. executable .. ".elf"

	-- Link executable product.
	local result = run:execute(ld)
	if result ~= 0 then
		stderr:printLn("Failed to link PS3 executable.")
		stderr:printLn(ld)
		return 1
	end

	-- Sign executable product.
	local result = run:execute("$(SCE_PS3_ROOT)/host-win32/bin/make_fself " .. executable .. ".elf " .. executable .. ".self")
	if result ~= 0 then
		stderr:printLn("Failed to sign PS3 executable.")
		return 1
	end

	run:rm(executable .. ".elf")
	run:rm("keep.sym")
	return 0
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	else
		stdout:printLn("Usage: deploy-ps3 [action]")
		stdout:printLn()
		stdout:printLn("  Actions:")
		stdout:printLn("    build")
		stdout:printLn("    deploy")
		stdout:printLn("    launch")
		stdout:printLn("    migrate")
	end
	return 1
end
