--[[
 TRAKTOR
 Copyright (c) 2022 Anders Pistol.

 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at https://mozilla.org/MPL/2.0/.
]]
import(traktor)
import(traktor.drawing)
import(traktor.run)


-- Load common script.
if not run:loadScript("$(RUN_SCRIPT_PATH)/common/common.run") then
	stderr:printLn("Unable to load \"common.run\"; installation broken?")
	return 1
end


function build(args)
	return commonBuild(args)
end


function deploy(args)
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Deploy application configuration to target.
	stdout:printLn("Deploying resources to target host...")
	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" Application.config", nil)
	if run.exitCode ~= 0 then return run.exitCode end

	-- Get shared paths.
	local paths = nil
	if not debug then paths = os:getEnvironment("DEPLOY_SHARED_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_SHARED_PATH_DEBUG"):split("\n") end

	-- Find files to deploy; qualitfy through paths.
	local files = os:getEnvironment("DEPLOY_SHARED"):split("\n")
	for _, p in ipairs(paths) do
		local deployFiles = ""
		for _, f in ipairs(files) do
			local qf = Path(p):concat(Path(f))
			if FileSystem.getInstance():exist(qf) then
				deployFiles = deployFiles .. " " .. f
			end
		end
		if deployFiles ~= "" then
			run:pushd(p)
			run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. deployFiles, nil)
			run:popd()
			if run.exitCode ~= 0 then return run.exitCode end
		end
	end

	-- Create icon resource.
	local icon = createIcon()
	if icon == nil then
		stderr:printLn("Unable to create product icon; failed to generate icon image.")
		return 1
	end
	if not icon:save("Default.png") then
		stderr:printLn("Unable to create product icon; failed to save icon.")
		return 1
	end

	-- Default icon.
	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" Default.png", nil)

	-- Create launcher script.
	local f = fileSystem:open(Path("launch.sh"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("chmod u+x " .. executable .. " *.so")
	s:printLn("./" .. executable .. " -s")
	f:close()

	-- Deploy launcher script.
	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" launch.sh", nil)
	return 0
end


function launch(args)
	stdout:printLn("Launching Linux...")
	return run:execute(tools.remote .. " launch $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" launch.sh", "(null)")
end


function migrate(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")
	stdout:printLn("Migrating Linux...")

	-- Build content database.
	run:execute(tools.migrate .. " -p -s=Migrate")
	if run.exitCode ~= 0 then return run.exitCode end

	-- Create application folders.
	run:mkdir("bin")

	-- Get shared paths.
	local paths = nil
	if not debug then paths = os:getEnvironment("DEPLOY_SHARED_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_SHARED_PATH_DEBUG"):split("\n") end

	-- Find files to deploy; qualitfy through paths.
	local files = os:getEnvironment("DEPLOY_SHARED"):split("\n")
	for _, p in ipairs(paths) do
		for _, f in ipairs(files) do
			local qf = Path(p):concat(Path(f))
			if FileSystem.getInstance():exist(qf) then
				if not run:replace(qf.pathName, "bin/" .. f) then
					stderr:printLn("Unable to copy file \"" .. f .. "\" to binary folder")
					return 1
				end
			end
		end
	end

	-- Create icon resource.
	local icon = createIcon()
	if icon == nil then
		stderr:printLn("Unable to create product icon; failed to generate icon image.")
		return 1
	end
	if not icon:save("Default.png") then
		stderr:printLn("Unable to create product icon; failed to save icon.")
		return 1
	end

	return 0
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	else
		stdout:printLn("Usage: deploy-linux [action]")
		stdout:printLn()
		stdout:printLn("  Actions:")
		stdout:printLn("    build")
		stdout:printLn("    deploy")
		stdout:printLn("    launch")
		stdout:printLn("    migrate")
	end
	return 1
end
