import(traktor)
import(traktor.run)


-- Tools
local tools =
{
	pipeline = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Pipeline.App",
	migrate = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Database.Migrate.App",
	remote = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Remote.Client.App"
}


function string:split(sep)
	local sep, fields = sep or ":", {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end


function string:endswith(send)
	return #self >= #send and self:find(send, #self - #send + 1, true) and true or false
end


local function getSystemPaths()
	if os.getRegistry == nil then
		stderr:printLn("Unfortunately statically link win32 product is currently only available from a Windows host.")
		return nil
	end

	local p = {}
	p.dxLibPath = "$(TRAKTOR_HOME)\\3rdp\\DirectX SDK (June 2010)\\Lib\\x86"

	return p
end


local function generateResponseFile(files)
	local f = fileSystem:open(Path("link.rsp"), 2)
	assert (f ~= nil)

	local s = StreamOutput(f, Utf8Encoding())
	local fna = files:split(" ")
	for _, fn in ipairs(fna) do
		s:printLn(Path(fn):getPathName())
	end

	f:close()
	return "link.rsp"
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = tools.pipeline .. " -p -s=Pipeline"
	for i = 1, args:size() - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function deployStatic(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	local p = getSystemPaths()
	if p == nil then return 1 end

	-- Determine path to module libraries.
	local prepend
	if not debug then
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/releasestatic/"
	else
		stdout:printLn("Using *DEBUG* binaries")
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/debugstatic/"
	end

	local preamble = "cmd.exe /C \"\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" && "
	local postamble = "\""

	-- Append system path to files.
	local wholeLinkFiles = ""
	local externalLinkFiles = ""
	local externalCopyFiles = ""
	local linkerIncludes = ""

	local files = os:getEnvironment("DEPLOY_EXTERN_FILES_STATIC"):split(" ")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			if f:endswith(".lib") then
				externalLinkFiles = externalLinkFiles .. prepend .. f .. " "
			else
				externalCopyFiles = externalCopyFiles .. f .. " "
			end
		end
	end

	local files = os:getEnvironment("DEPLOY_FILES_STATIC"):split(" ")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			linkerIncludes = linkerIncludes .. "/INCLUDE:___module__" .. f:sub(1, string.len(f) - 4):gsub("%.", "_") .. " "
			wholeLinkFiles = wholeLinkFiles .. prepend .. f .. " "
		end
	end

	-- Compile resources.
	local cmd = "rc /fo\"$(DEPLOY_EXECUTABLE).res\" $(TRAKTOR_HOME)/resources/runtime/deploy/win32/Traktor.Amalgam.Game.App.rc"
	local result = run:execute(preamble .. cmd .. postamble, nil)
	if result ~= 0 then
		stderr:printLn("Unable to build product resources.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		stderr:printLn(run:stdErr())
		return 1
	end

	-- Generate link response file.
	local rsp = generateResponseFile(
		externalLinkFiles .. " " .. wholeLinkFiles .. " " ..
		" msvcrt.lib winmm.lib iphlpapi.lib ws2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib" ..
		" comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib" ..
		" comctl32.lib d2d1.lib dwrite.lib gdiplus.lib msimg32.lib d3d11.lib dxgi.lib dinput8.lib dxguid.lib xinput.lib"
	)

	-- Link files into an executable product.
	local cmd = "link @" .. rsp .. " " .. linkerIncludes
	cmd = cmd .. " $(DEPLOY_EXECUTABLE).res"
	cmd = cmd .. " /OUT:$(DEPLOY_EXECUTABLE).exe"
	cmd = cmd .. " /PDB:$(DEPLOY_EXECUTABLE).pdb"
	cmd = cmd .. " /LIBPATH:\"" .. p.dxLibPath .. "\""
	cmd = cmd .. " /MACHINE:X86"
	cmd = cmd .. " /SUBSYSTEM:WINDOWS"
	if not debug then
		cmd = cmd .. " /DEBUG /LTCG /OPT:REF"
	else
		cmd = cmd .. " /DEBUG"
	end
	local result = run:execute(preamble .. cmd .. postamble, nil)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		stderr:printLn(run:stdErr())
		return 1
	end

	-- Embed manifest in executable product.
	local cmd = "mt -manifest $(TRAKTOR_HOME)/resources/runtime/deploy/win32/manifest.xml -outputresource:$(DEPLOY_EXECUTABLE).exe;1"
	local result = run:execute(preamble .. cmd .. postamble, nil)
	if result ~= 0 then
		stderr:printLn("Unable to embed manifest into executable product.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		stderr:printLn(run:stdErr())
		return 1
	end

	-- Deploy executable into remote folder.
	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" $(DEPLOY_EXECUTABLE).exe", nil)
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Deploy external files into remote folder.
	if externalCopyFiles ~= "" then
		if not debug then
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/releasestatic")
		else
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/debugstatic")
		end
		run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. externalCopyFiles, nil)
		run:popd()
		if run:exitCode() ~= 0 then return run:exitCode() end
	end

	-- Clean some unwanted files.
	run:rm("*.exp")
	run:rm("*.lib")
	run:rm("*.res")
	run:rm(rsp)

	return 0
end


function deployShared(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Deploy binaries to target.
	if not debug then
		stdout:printLn("Deploying binaries to target host...")
		run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/releaseshared")
	else
		stdout:printLn("Deploying *DEBUG* binaries to target host...")
		run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/debugshared")
	end

	local files = os:getEnvironment("DEPLOY_FILES_SHARED"):split(" ")
	local deployFiles = ""

	for _, f in ipairs(files) do
		deployFiles = deployFiles .. " " .. f	
	end

	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. deployFiles, nil)
	if run:exitCode() ~= 0 then return run:exitCode() end
	run:popd()

	return 0
end


function deploy(args)
	-- Deploy application configuration to target.
	stdout:printLn("Deploying resources to target host...")
	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" Application.config", nil)
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Continue with either statically linked product or as a bunch of dynamic libraries.
	local staticLink = (os:getEnvironment("DEPLOY_STATIC_LINK") ~= "")
	if staticLink then
		return deployStatic(args)
	else
		return deployShared(args)
	end
end


function launch(args)
	stdout:printLn("Launching Win32...")
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")
	return run:execute(tools.remote .. " launch $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. executable .. " \\-s Application.config", nil)
end


function migrateStatic(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	local p = getSystemPaths()
	if p == nil then return 1 end

	-- Determine path to module libraries.
	local prepend
	if not debug then
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/releasestatic/"
	else
		stdout:printLn("Using *DEBUG* binaries")
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/debugstatic/"
	end

	local preamble = "cmd.exe /C \"\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" && "
	local postamble = "\""

	-- Append system path to files.
	local wholeLinkFiles = ""
	local externalLinkFiles = ""
	local externalCopyFiles = ""
	local linkerIncludes = ""

	local files = os:getEnvironment("DEPLOY_EXTERN_FILES_STATIC"):split(" ")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			if f:endswith(".lib") then
				externalLinkFiles = externalLinkFiles .. prepend .. f .. " "
			else
				externalCopyFiles = externalCopyFiles .. f .. " "
			end
		end
	end

	local files = os:getEnvironment("DEPLOY_FILES_STATIC"):split(" ")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			linkerIncludes = linkerIncludes .. "/INCLUDE:___module__" .. f:sub(1, string.len(f) - 4):gsub("%.", "_") .. " "
			wholeLinkFiles = wholeLinkFiles .. prepend .. f .. " "
		end
	end

	-- Compile resources.
	local cmd = "rc /fo\"$(DEPLOY_EXECUTABLE).res\" $(TRAKTOR_HOME)/resources/runtime/deploy/win32/Traktor.Amalgam.Game.App.rc"
	local result = run:execute(preamble .. cmd .. postamble, nil)
	if result ~= 0 then
		stderr:printLn("Unable to build product resources.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		stderr:printLn(run:stdErr())
		return 1
	end

	-- Generate link response file.
	local rsp = generateResponseFile(
		externalLinkFiles .. " " .. wholeLinkFiles .. " " ..
		" msvcrt.lib winmm.lib iphlpapi.lib ws2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib" ..
		" comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib" ..
		" comctl32.lib d2d1.lib dwrite.lib gdiplus.lib msimg32.lib d3d11.lib dxgi.lib dinput8.lib dxguid.lib xinput.lib"
	)

	-- Link files into an executable product.
	local cmd = "link @" .. rsp .. " " .. linkerIncludes
	cmd = cmd .. " $(DEPLOY_EXECUTABLE).res"
	cmd = cmd .. " /OUT:$(DEPLOY_EXECUTABLE).exe"
	cmd = cmd .. " /PDB:$(DEPLOY_EXECUTABLE).pdb"
	cmd = cmd .. " /LIBPATH:\"" .. p.dxLibPath .. "\""
	cmd = cmd .. " /MACHINE:X86"
	cmd = cmd .. " /SUBSYSTEM:WINDOWS"
	if not debug then
		cmd = cmd .. " /DEBUG /LTCG /OPT:REF"
	else
		cmd = cmd .. " /DEBUG"
	end
	local result = run:execute(preamble .. cmd .. postamble, nil)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		stderr:printLn(run:stdErr())
		return 1
	end

	-- Embed manifest in executable product.
	local cmd = "mt -manifest $(TRAKTOR_HOME)/resources/runtime/deploy/win32/manifest.xml -outputresource:$(DEPLOY_EXECUTABLE).exe;1"
	local result = run:execute(preamble .. cmd .. postamble, nil)
	if result ~= 0 then
		stderr:printLn("Unable to embed manifest into executable product.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		stderr:printLn(run:stdErr())
		return 1
	end

	-- Clean some unwanted files.
	run:rm("*.exp")
	run:rm("*.lib")
	run:rm("*.res")
	run:rm(rsp)

	-- Copy binaries into "bin".
	run:mkdir("bin32")
	run:replace("$(DEPLOY_EXECUTABLE).exe", "bin32/$(DEPLOY_EXECUTABLE).exe")
	run:replace("$(DEPLOY_EXECUTABLE).pdb", "bin32/$(DEPLOY_EXECUTABLE).pdb")

	-- Copy external files into "bin".
	if externalCopyFiles ~= "" then
		for _, f in ipairs(externalCopyFiles:split(" ")) do
			run:replace(prepend .. f, "bin32/" .. f)
		end
	end

	return 0
end


function migrateShared(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Determine source binary path.
	local sourcePath
	if not debug then
		stdout:printLn("Deploying binaries to target host...")
		sourcePath = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/releaseshared/"
	else
		stdout:printLn("Deploying *DEBUG* binaries to target host...")
		sourcePath = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win32/debugshared/"
	end

	-- Copy binaries into "bin".
	run:mkdir("bin32")
	local files = os:getEnvironment("DEPLOY_FILES_SHARED"):split(" ")
	for _, f in ipairs(files) do
		if not run:replace(sourcePath .. f, "bin32/" .. f) then
			stderr:printLn("Unable to copy file \"" .. f .. "\" to binary folder")
			return 1
		end
	end	
end


function migrate(args)
	stdout:printLn("Migrating Win32...")

	-- Build content database.
	run:execute(tools.migrate .. " -p -s=Migrate")
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Continue with either statically linked product or as a bunch of dynamic libraries.
	local staticLink = (os:getEnvironment("DEPLOY_STATIC_LINK") ~= "")
	if staticLink then
		return migrateStatic(args)
	else
		return migrateShared(args)
	end
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	end
	return 1
end
