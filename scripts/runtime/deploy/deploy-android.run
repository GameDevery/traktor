import(traktor)
import(traktor.drawing)

--[[
Load common script.
]]
if not run:loadScript("$(RUN_SCRIPT_PATH)/common/common.run") then
	stderr:printLn("Unable to load \"common.run\"; installation broken?")
	return 1
end

--[[
Check if any device (not emulator) is connected.
]]
local function isDeviceConnected()
	run:execute("$(DEPLOY_ANDROID_HOME)/platform-tools/adb get-state", nil)
	local s = run:stdOut():trim()
	return s == "device"
end

--[[
Link application binary.
]]
local function linkApplication()
	local sdk = os:getEnvironment("DEPLOY_ANDROID_HOME")
	if sdk == "" then
		stderr:printLn("Android SDK installation not valid, no SDK root path; ensure Android SDK is properly installed and try again.")
		return false
	end

	local ndk = os:getEnvironment("DEPLOY_ANDROID_NDK_ROOT")
	if ndk == "" then
		stderr:printLn("Android NDK installation not valid, no NDK root path; ensure Android NDK is properly installed and try again.")
		return false
	end

	local apilevel = os:getEnvironment("DEPLOY_ANDROID_APILEVEL")
	if apilevel == nil or apilevel == "" then apilevel = "29" end

	local architecture = "aarch64" -- "arch-arm"
	local abi = "arm64-v8a"	-- armeabi-v7a

	-- Determine tool suitable for os.
	local host = os:getEnvironment("DEPLOY_HOST_OS")
	if host == "win32" or host == "win64" then
		host = "windows-x86_64"
		if not fileSystem:exist(Path(ndk .. "/toolchains/llvm/prebuilt/" .. host .."/bin")) then
			host = "windows"
		end
	elseif host == "linux" then
		host = "linux-x86_64"
		if not fileSystem:exist(Path(ndk .. "/toolchains/llvm/prebuilt/" .. host .."/bin")) then
			host = "linux"
		end		
	elseif host == "osx" then
		host = "darwin-x86_64"
		if not fileSystem:exist(Path(ndk .. "/toolchains/llvm/prebuilt/" .. host .."/bin")) then
			host = "darwin"
		end		
	else
		stderr:printLn("Unsupported host OS (" .. host .. ").")
		return false
	end

	-- Generate paths to NDK.
	local toolpath = ndk .. "/toolchains/llvm/prebuilt/" .. host .."/bin"
	local cl = toolpath .. "/" .. architecture .. "-linux-android" .. apilevel .. "-clang++"
	if host == "windows-x86_64" then
		cl = cl .. ".cmd"
	end

	-- Check all paths exist.
	local ok = fileSystem:exist(Path(toolpath))
	if not ok then
		stderr:printLn("Android NDK installation not valid; ensure Android NDK is properly installed and try again.")
		stderr:printLn("[toolpath] = \"" .. toolpath .. "\"")
		return false
	end

	stdout:printLn("Android NDK installation ok.")

	-- Get library paths.
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")
	if debug then stdout:printLn("** USING DEBUG BINARIES **") end

	local libraryPaths = ""
	local paths = ""
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end
	for _, p in pairs(paths) do
		libraryPaths = libraryPaths .. " -L \"" .. Path(p).pathName .. "\""
	end

	-- Collect libraries to link.
	local libraries = ""
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for _, f in ipairs(files) do
		if f:endswith(".a") then
			f = f:sub(4)
			f = f:sub(1, #f - 2)
			libraries = libraries .. " -l" .. f
		elseif f:endswith(".o") then
			libraries = libraries .. " " .. f
		else
			stderr:printLn("Unknown deploy file \"" .. f .. "\"")
		end
	end	

	-- Create the module initialization file.
	stdout:printLn("Generating Linkage.cpp...")
	if run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/Linkage.cpp.template\"", "Linkage.cpp") ~= 0 then
		stderr:printLn("Failed to generate Linkage.cpp")
		return false
	end	

	-- Compile linkage file.
	stdout:printLn("Compiling Linkage.cpp...")

	local cmd = cl .. " -c \"$(DEPLOY_OUTPUT_PATH)/Linkage.cpp\" -o \"$(DEPLOY_OUTPUT_PATH)/Linkage.o\""
	local result = run:execute(cmd) --, nil)
	if result ~= 0 then
		stderr:printLn("Unable to compile Linkage.cpp")
		return false
	end	

	-- Link files into an executable product.
	stdout:printLn("Linking...")
	local cmd = "\"" .. cl .. "\""
	if debug then
		cmd = cmd .. " -g"
	end
	cmd = cmd .. " -shared"
	cmd = cmd .. " -Wl,-soname,Application"
	cmd = cmd .. " -Wl,--no-undefined"
	cmd = cmd .. " -lc++"
	cmd = cmd .. " -lc"
	cmd = cmd .. " -lm"
	cmd = cmd .. " -llog"
	cmd = cmd .. " -landroid"
	cmd = cmd .. " -lgcc"
	-- cmd = cmd .. " -lEGL"
	-- cmd = cmd .. " -lGLESv3"
	cmd = cmd .. " -lOpenSLES"
	cmd = cmd .. " \"$(DEPLOY_OUTPUT_PATH)/Linkage.o\""
	cmd = cmd .. libraryPaths
	cmd = cmd .. libraries
	cmd = cmd .. libraries
	cmd = cmd .. " -o libApplication.so"

	local result = run:execute(cmd)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		return false
	end

	-- Cleanup intermediate files.
	run:rm("Linkage.cpp")
	run:rm("Linkage.o")
	return true
end

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

--[[
Build assets in target output database.
]]
function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = tools.pipeline .. " -v -l -p -standalone -s=Pipeline"
	for i = 1, args.size - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end

--[[
Create application and deploy to device.
]]
function deploy(args)
	stdout:printLn("Deploying...")

	-- Create android native binary.
	if not linkApplication() then
		return 1
	end

	local debug = false -- (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	local apilevel = os:getEnvironment("DEPLOY_ANDROID_APILEVEL")
	if apilevel == nil or apilevel == "" then apilevel = "29" end

	local architecture = "aarch64" -- "arch-arm"
	local abi = "arm64-v8a"	-- armeabi-v7a
	local validations = {
		"libVkLayer_core_validation.so",
		"libVkLayer_khronos_validation.so",
		"libVkLayer_object_tracker.so",
		"libVkLayer_parameter_validation.so",
		"libVkLayer_threading.so",
		"libVkLayer_unique_objects.so"
	}

	-- Create android project.
	run:mkdir("assets")
	run:mkdir("lib/" .. abi)
	run:mkdir("res/values")
	run:mkdir("res/drawable")
	run:mkdir("res/drawable-hdpi")
	run:mkdir("res/drawable-ldpi")
	run:mkdir("res/drawable-mdpi")
	run:mkdir("res/drawable-xhdpi")
	run:replace("Application.config", "assets/Application.config")
	run:replace("libApplication.so", "lib/" .. abi .. "/libApplication.so")
	run:replace("$(DEPLOY_ANDROID_NDK_ROOT)/sources/cxx-stl/llvm-libc++/libs/" .. abi .. "/libc++_shared.so", "lib/" .. abi .. "/libc++_shared.so")
	run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/AndroidManifest.xml.template\"", "AndroidManifest.xml")
	run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/splash_drawable.xml.template\"", "res/drawable/splash_drawable.xml")
	run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/splash_theme.xml.template\"", "res/values/splash_theme.xml")
	run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/strings.xml.template\"", "res/values/strings.xml")

	-- Include Vulkan validation layers.
	if debug then
		for _, validation in ipairs(validations) do
			run:replace("$(DEPLOY_ANDROID_NDK_ROOT)/sources/third_party/vulkan/src/build-android/jniLibs/" .. abi .. "/" .. validation, "lib/" .. abi .. "/" .. validation)
		end
	end

	-- Cleanup intermediate files.
	run:rm("Application.config")
	run:rm("libApplication.so")

	-- Create icons.
	stdout:printLn("Generating Android icon images...")

	local iconFile = os:getEnvironment("DEPLOY_PROJECT_ICON")
	if #iconFile <= 0 then
		iconFile = "$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/ic_launcher.png"
	end

	local iconPath = Path("$(DEPLOY_PROJECT_ROOT)"):concat(Path(iconFile))
	local iconImage = Image.loadFromFile(iconPath.pathName)
	if iconImage ~= nil then
		generateImage("res/drawable/splash_image.png", iconImage, 512, 512)
		generateImage("res/drawable-hdpi/ic_launcher.png", iconImage, 72, 72)
		generateImage("res/drawable-ldpi/ic_launcher.png", iconImage, 36, 36)
		generateImage("res/drawable-mdpi/ic_launcher.png", iconImage, 48, 48)
		generateImage("res/drawable-xhdpi/ic_launcher.png", iconImage, 96, 96)
	else
		stderr:printLn("Failed to generate Android icon images; unable to read source image \"" .. iconPath.pathName .. "\".")
		return 1
	end

	-- Build apk package.
	stdout:printLn("Building Android APK package...")

	local apk = os:getEnvironment("DEPLOY_PROJECT_NAME"):gsub("[ .,;:-]", "_")
	local result = false
	local host = os:getEnvironment("DEPLOY_HOST_OS")
	if host == "win32" or host == "win64" then
		result = true
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" package -f -M AndroidManifest.xml -S res -I \"$(DEPLOY_ANDROID_HOME)/platforms/android-" .. apilevel .. "/android.jar\" -F \"" .. apk .. ".unsigned.apk\"") == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" add \"" .. apk .. ".unsigned.apk\" lib/" .. abi .. "/libApplication.so", nil) == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" add \"" .. apk .. ".unsigned.apk\" lib/" .. abi .. "/libc++_shared.so", nil) == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" add \"" .. apk .. ".unsigned.apk\" assets/Application.config", nil) == 0)

		if debug then
			for _, validation in ipairs(validations) do
				result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" add \"" .. apk .. ".unsigned.apk\" lib/" .. abi .. "/" .. validation, nil) == 0)
			end
		end

		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/zipalign.exe\" -f -p 4 \"" .. apk .. ".unsigned.apk\" \"" .. apk .. ".aligned.apk\"", nil) == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/apksigner.bat\" sign --ks \"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/keystore.jks\" --ks-key-alias androidkey --ks-pass pass:android --key-pass pass:android --out \"" .. apk .. ".apk\" \"" .. apk .. ".aligned.apk\"", nil) == 0)
	elseif host == "linux" or host == "osx" then
		result = true
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt package -f -M AndroidManifest.xml -S res -I $(DEPLOY_ANDROID_HOME)/platforms/android-" .. apilevel .. "/android.jar -F " .. apk .. ".unsigned.apk") == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt add " .. apk .. ".unsigned.apk lib/" .. abi .. "/libApplication.so", nil) == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt add " .. apk .. ".unsigned.apk lib/" .. abi .. "/libc++_shared.so", nil) == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt add " .. apk .. ".unsigned.apk assets/Application.config", nil) == 0)

		if debug then
			for _, validation in ipairs(validations) do
				result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt add \"" .. apk .. ".unsigned.apk\" lib/" .. abi .. "/" .. validation, nil) == 0)
			end
		end
		
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/zipalign -f -p 4 " .. apk .. ".unsigned.apk " .. apk .. ".aligned.apk", nil) == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/apksigner sign --ks $(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/keystore.jks --ks-key-alias androidkey --ks-pass pass:android --key-pass pass:android --out " .. apk .. ".apk " .. apk .. ".aligned.apk", nil) == 0)
	else
		stderr:printLn("Unsupported host OS (" .. host .. ").")
		return 1
	end
	if not result then
		stderr:printLn("Failed to generate Android APK package.")
		return 1
	end

	-- Cleanup intermediate files.
	run:rm(apk .. ".unsigned.apk")
	run:rm(apk .. ".aligned.apk")
	return 0
end

--[[
Launch deployed application.
]]
function launch(args)

	-- Ensure device is ready.
	if not isDeviceConnected() then
		stderr:printLn("No device ready; ensure an Android device is connected and properly configured.")
		return 1
	end

	local apk = os:getEnvironment("DEPLOY_PROJECT_NAME"):gsub("[ .,;:-]", "_")
	local launchVS = true
--[[
	local host = os:getEnvironment("DEPLOY_HOST_OS")
	if host == "win32" or host == "win64" then
		launchVS = true
	end	
]]

	if not launchVS then
		-- Launch application on attached device.
		stdout:printLn("Installing package...")
		local result = run:execute("$(DEPLOY_ANDROID_HOME)/platform-tools/adb -d install --no-streaming -r \"" .. apk .. ".apk\"", nil)
		if result ~= 0 then
			stderr:printLn("Failed to install package on device; Please ensure device is attached and in developer mode.")
			return 1
		end

		stdout:printLn("Launching...")
		local result = run:execute("$(DEPLOY_ANDROID_HOME)/platform-tools/adb -d shell am start -S -n $(DEPLOY_PROJECT_IDENTIFIER)/android.app.NativeActivity", nil)
		if result ~= 0 then
			stderr:printLn("Failed to launch package on device; Please ensure device is attached and in developer mode.")
			return 1
		end
	else
		stdout:printLn("Creating Visual Studio solution...")

		-- Generate Visual Studio solution.
		run:mkdir("vs")
		run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/vs/project.vcxproj.template\"", "vs/$(DEPLOY_PROJECT_NAME).vcxproj")
		run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/vs/project.vcxproj.user.template\"", "vs/$(DEPLOY_PROJECT_NAME).vcxproj.user")
		run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/vs/solution.sln.template\"", "vs/$(DEPLOY_PROJECT_NAME).sln")

		local projectName = os:getEnvironment("DEPLOY_PROJECT_NAME")
		local sln = FileSystem.getInstance():getAbsolutePath(Path("vs/" .. projectName .. ".sln"))

		-- Open generated solution in Visual Studio.
		if not os:openFile(sln.pathName) then
			stderr:printLn("Unable to open \"" .. sln.pathName .. "\".")
		end		
	end

	return 0
end

--[[
Create a standalone package of the application.
]]
function migrate(args)
	stdout:printLn("Migrating...")

	-- Build content database.
	run:execute(tools.migrate .. " -p -s=Migrate")
	if run:exitCode() ~= 0 then return run:exitCode() end
	
	-- Create android native binary.
	if not linkApplication() then
		return 1
	end

	local apilevel = os:getEnvironment("DEPLOY_ANDROID_APILEVEL")
	if apilevel == nil or apilevel == "" then apilevel = "29" end

	local architecture = "aarch64" -- "arch-arm"
	local abi = "arm64-v8a"	-- armeabi-v7a

	-- Create android project.
	run:mkdir("assets")
	run:mkdir("lib/" .. abi)
	run:mkdir("res/values")
	run:mkdir("res/drawable")
	run:mkdir("res/drawable-hdpi")
	run:mkdir("res/drawable-ldpi")
	run:mkdir("res/drawable-mdpi")
	run:mkdir("res/drawable-xhdpi")
	run:replace("Application.config", "assets/Application.config")
	run:replace("Content.compact", "assets/Content.compact")
	run:replace("libApplication.so", "lib/" .. abi .. "/libApplication.so")
	run:replace("$(DEPLOY_ANDROID_NDK_ROOT)/sources/cxx-stl/llvm-libc++/libs/" .. abi .. "/libc++_shared.so", "lib/" .. abi .. "/libc++_shared.so")
	run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/AndroidManifest.xml.template\"", "AndroidManifest.xml")
	run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/splash_drawable.xml.template\"", "res/drawable/splash_drawable.xml")
	run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/splash_theme.xml.template\"", "res/values/splash_theme.xml")
	run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/strings.xml.template\"", "res/values/strings.xml")

	-- Cleanup intermediate files.
	run:rm("Application.config")
	run:rm("libApplication.so")

	-- Create icons.
	stdout:printLn("Generating Android icon images...")

	local iconFile = os:getEnvironment("DEPLOY_PROJECT_ICON")
	if #iconFile <= 0 then
		iconFile = "$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/ic_launcher.png"
	end

	local iconPath = Path("$(DEPLOY_PROJECT_ROOT)"):concat(Path(iconFile))
	local iconImage = Image.loadFromFile(iconPath.pathName)
	if iconImage ~= nil then
		generateImage("res/drawable/splash_image.png", iconImage, 512, 512)
		generateImage("res/drawable-hdpi/ic_launcher.png", iconImage, 72, 72)
		generateImage("res/drawable-ldpi/ic_launcher.png", iconImage, 36, 36)
		generateImage("res/drawable-mdpi/ic_launcher.png", iconImage, 48, 48)
		generateImage("res/drawable-xhdpi/ic_launcher.png", iconImage, 96, 96)
	else
		stderr:printLn("Failed to generate Android icon images; unable to read source image \"" .. iconPath.pathName .. "\".")
		return 1
	end

	-- Build apk package.
	stdout:printLn("Building Android APK package...")

	local apk = os:getEnvironment("DEPLOY_PROJECT_NAME"):gsub("[ .,;:-]", "_")
	local result = false
	local host = os:getEnvironment("DEPLOY_HOST_OS")
	if host == "win32" or host == "win64" then
		result = true
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" package -f -M AndroidManifest.xml -S res -I \"$(DEPLOY_ANDROID_HOME)/platforms/android-" .. apilevel .. "/android.jar\" -F \"" .. apk .. ".unsigned.apk\"") == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" add \"" .. apk .. ".unsigned.apk\" lib/" .. abi .. "/libApplication.so", nil) == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" add \"" .. apk .. ".unsigned.apk\" lib/" .. abi .. "/libc++_shared.so", nil) == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" add \"" .. apk .. ".unsigned.apk\" assets/Application.config", nil) == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt.exe\" add \"" .. apk .. ".unsigned.apk\" assets/Content.compact", nil) == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/zipalign.exe\" -f -p 4 \"" .. apk .. ".unsigned.apk\" \"" .. apk .. ".aligned.apk\"", nil) == 0)
		result = result and (run:execute("\"$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/apksigner.bat\" sign --ks \"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/keystore.jks\" --ks-key-alias androidkey --ks-pass pass:android --key-pass pass:android --out \"" .. apk .. ".apk\" \"" .. apk .. ".aligned.apk\"", nil) == 0)
	elseif host == "linux" or host == "osx" then
		result = true
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt package -f -M AndroidManifest.xml -S res -I $(DEPLOY_ANDROID_HOME)/platforms/android-" .. apilevel .. "/android.jar -F " .. apk .. ".unsigned.apk") == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt add " .. apk .. ".unsigned.apk lib/" .. abi .. "/libApplication.so", nil) == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt add " .. apk .. ".unsigned.apk lib/" .. abi .. "/libc++_shared.so", nil) == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt add " .. apk .. ".unsigned.apk assets/Application.config", nil) == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/aapt add " .. apk .. ".unsigned.apk assets/Content.compact", nil) == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/zipalign -f -p 4 " .. apk .. ".unsigned.apk " .. apk .. ".aligned.apk", nil) == 0)
		result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/29.0.1/apksigner sign --ks $(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/keystore.jks --ks-key-alias androidkey --ks-pass pass:android --key-pass pass:android --out " .. apk .. ".apk " .. apk .. ".aligned.apk", nil) == 0)
	else
		stderr:printLn("Unsupported host OS (" .. host .. ").")
		return 1
	end
	if not result then
		stderr:printLn("Failed to generate Android APK package.")
		return 1
	end

	-- Cleanup intermediate files.
	run:rm(apk .. ".unsigned.apk")
	run:rm(apk .. ".aligned.apk")

	-- Ensure device is ready.
	if not isDeviceConnected() then
		stderr:printLn("No device ready; ensure an Android device is connected and properly configured.")
		return 1
	end

	-- Install application on attached device.
	stdout:printLn("Installing package...")
	local result = run:execute("$(DEPLOY_ANDROID_HOME)/platform-tools/adb -d install -r \"$(DEPLOY_PROJECT_NAME).apk\"", nil)
	if result ~= 0 then
		stderr:printLn("Failed to install package on device; Please ensure device is attached and in developer mode.")
		return 1
	end

	return 0
end

--[[
]]
function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	else
		stdout:printLn("Usage: deploy-android [action]")
		stdout:printLn()
		stdout:printLn("  Actions:")
		stdout:printLn("    build")
		stdout:printLn("    deploy")
		stdout:printLn("    launch")
		stdout:printLn("    migrate")
	end
	return 1
end
