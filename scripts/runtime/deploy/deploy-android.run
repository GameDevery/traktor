import(traktor)
import(traktor.drawing)


-- Tools
local tools =
{
	pipeline = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Pipeline.App",
	migrate = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Database.Migrate.App",
	remote = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Remote.Client.App"
}


function string:trim()
	return self:find'^%s*$' and '' or self:match'^%s*(.*%S)'
end


function string:starts(start)
   return string.sub(self, 1, string.len(start)) == start
end


function string:split(sep)
	local sep, fields = sep or ":", {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end


function string:startswith(st)
	return self:sub(1, #st) == st
end


function string:endswith(send)
	return #self >= #send and self:find(send, #self - #send + 1, true) and true or false
end


local function isDeviceConnected()
	run:execute("$(DEPLOY_ANDROID_HOME)/platform-tools/adb get-state", nil)
	local s = run:stdOut():trim()
	return s == "device"
end


local function generateImage(fileName, image, width, height)
	local outputAspect = width / height

	local sourceWidth = image:getWidth()
	local sourceHeight = image:getHeight()

	local cropWidth = sourceWidth
	local cropHeight = math.floor(sourceWidth / outputAspect)

	local output = image:clone(true)
	output:apply(CropFilter(0, 0, cropWidth, cropHeight))
	output:apply(ScaleFilter(width, height))
	output:save(fileName)
end


local function generateBinary()
	local sdk = os:getEnvironment("DEPLOY_ANDROID_HOME")
	if sdk == "" then
		stderr:printLn("Android SDK installation not valid, no SDK root path; ensure Android SDK is properly installed and try again.")
		return false
	end

	local ndk = os:getEnvironment("DEPLOY_ANDROID_NDK_ROOT")
	if ndk == "" then
		stderr:printLn("Android NDK installation not valid, no NDK root path; ensure Android NDK is properly installed and try again.")
		return false
	end

	local toolchain = os:getEnvironment("DEPLOY_ANDROID_TOOLCHAIN") -- "4.9"
	local apilevel = os:getEnvironment("DEPLOY_ANDROID_APILEVEL") -- "android-27"
	local architecture = "arch-arm"
	local abi = "arm-linux-androideabi"

	-- Determine tool suitable for os.
	local host = os:getEnvironment("DEPLOY_HOST_OS")
	if host == "win32" or host == "win64" then
		host = "windows-x86_64"
		if not fileSystem:exist(Path(ndk .. "/toolchains/" .. abi .. "-" .. toolchain .. "/prebuilt/" .. host)) then
			host = "windows"
		end
	elseif host == "osx" then
		host = "darwin-x86_64"
		if not fileSystem:exist(Path(ndk .. "/toolchains/" .. abi .. "-" .. toolchain .. "/prebuilt/" .. host)) then
			host = "darwin"
		end		
	else
		stderr:printLn("Unsupported host OS.")
		return 1
	end

	-- Generate paths to NDK.
	local toolpath = ndk .. "/toolchains/" .. abi .. "-" .. toolchain .. "/prebuilt/" .. host .."/bin"
	local cxxpath = ndk .. "/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a"
	local syspath = ndk .. "/platforms/" .. apilevel .. "/" .. architecture
	local cl = toolpath .. "/" .. abi .. "-gcc"

	-- Check all paths exist.
	local ok =
		fileSystem:exist(Path(toolpath)) and
		fileSystem:exist(Path(cxxpath)) and
		fileSystem:exist(Path(syspath))

	if not ok then
		stderr:printLn("Android NDK installation not valid; ensure Android NDK is properly installed and try again.")
		stderr:printLn("[toolpath] = \"" .. toolpath .. "\"")
		stderr:printLn("[cxxpath] = \"" .. cxxpath .. "\"")
		stderr:printLn("[syspath] = \"" .. syspath .. "\"")
		return false
	end

	stdout:printLn("Android NDK installation ok.")

	-- Get library paths.
	local libraryPaths = ""
	local paths = ""
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end
	 for _, p in pairs(paths) do
		libraryPaths = libraryPaths .. "-L " .. Path(p):getPathName() .. " "
	end

	-- Collect libraries to link.
	local libraries = ""
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for _, f in ipairs(files) do
		if f:endswith(".a") then
			f = f:sub(4)
			f = f:sub(1, #f - 2)
			libraries = libraries .. " -l" .. f
		elseif f:endswith(".o") then
			libraries = libraries .. " " .. f
		else
			stderr:printLn("Unknown deploy file \"" .. f .. "\"")
		end
	end	

	-- Create the module initialization file.
	stdout:printLn("Generating Linkage.cpp...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/Linkage.cpp.template", "Linkage.cpp") ~= 0 then
		stderr:printLn("Failed to generate Linkage.cpp")
		return false
	end	

	-- Compile linkage file.
	stdout:printLn("Compiling Linkage.cpp...")
	local cmd = cl .. " -c Linkage.cpp -o Linkage.o"
	local result = run:execute(cmd) --, nil)
	if result ~= 0 then
		stderr:printLn("Unable to compile file.")
		return false
	end	

	-- Link files into an executable product.
	stdout:printLn("Linking...")
	local cmd = cl
	cmd = cmd .. " -fPIC"
	cmd = cmd .. " --sysroot=" .. syspath
	cmd = cmd .. " -shared"
	cmd = cmd .. " -static-libstdc++"
	cmd = cmd .. " -Wl,-soname,$(DEPLOY_EXECUTABLE)"
	cmd = cmd .. " -Wl,--no-undefined"
	cmd = cmd .. " -Wl,-z,noexecstack"
	cmd = cmd .. " -lc++"
	cmd = cmd .. " -lc"
	cmd = cmd .. " -lm"
	cmd = cmd .. " -llog"
	cmd = cmd .. " -landroid"
	cmd = cmd .. " -lgcc"
	cmd = cmd .. " -lEGL"
	cmd = cmd .. " -lGLESv2"
	cmd = cmd .. " -lOpenSLES"
	cmd = cmd .. " -L" .. cxxpath
	cmd = cmd .. " Linkage.o"
	cmd = cmd .. " " .. libraryPaths
	cmd = cmd .. " " .. libraries
	cmd = cmd .. " " .. libraries
	cmd = cmd .. " -o lib$(DEPLOY_EXECUTABLE).so"

	local result = run:execute(cmd)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		return false
	end

	-- Cleanup intermediate files.
	run:rm("Linkage.cpp")
	run:rm("Linkage.o")
	return true
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = tools.pipeline .. " -p -s=Pipeline"
	for i = 1, args:size() - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	run:execute(cmdline)
	stdout:printLn("Done")
end


function deploy(args)
	stdout:printLn("Deploying...")

	-- Create android native binary.
	if not generateBinary() then
		return 1
	end

	-- Create android project.
	run:mkdir("assets")
	run:mkdir("lib/armeabi-v7a")
	run:mkdir("res/values")
	run:mkdir("res/drawable-hdpi")
	run:mkdir("res/drawable-ldpi")
	run:mkdir("res/drawable-mdpi")
	run:mkdir("res/drawable-xhdpi")
	run:replace("Application.config", "assets/Application.config")
	run:replace("lib$(DEPLOY_EXECUTABLE).so", "lib/armeabi-v7a/lib$(DEPLOY_EXECUTABLE).so")
	run:replace("$(DEPLOY_ANDROID_NDK_ROOT)/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libc++_shared.so", "lib/armeabi-v7a/libc++_shared.so")
	run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/AndroidManifest.xml.template", "AndroidManifest.xml")
	run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/strings.xml.template", "res/values/strings.xml")

	-- Cleanup intermediate files.
	run:rm("Application.config")
	run:rm("lib$(DEPLOY_EXECUTABLE).so")

	-- Create icons.
	stdout:printLn("Generating Android icon images...")

	local iconFile = os:getEnvironment("DEPLOY_PROJECT_ICON")
	if #iconFile <= 0 then
		iconFile = "$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/ic_launcher.png"
	end

	local iconPath = Path("$(DEPLOY_SYSTEM_ROOT)"):concat(Path(iconFile))
	local iconImage = Image.loadFromFile(iconPath:getPathName())
	if iconImage ~= nil then
		generateImage("res/drawable-hdpi/ic_launcher.png", iconImage, 72, 72)
		generateImage("res/drawable-ldpi/ic_launcher.png", iconImage, 36, 36)
		generateImage("res/drawable-mdpi/ic_launcher.png", iconImage, 48, 48)
		generateImage("res/drawable-xhdpi/ic_launcher.png", iconImage, 96, 96)
	else
		stderr:printLn("Failed to generate Android icon images; unable to read source image \"" .. iconPath:getPathName() .. "\".")
		return 1
	end

	-- Build apk package.
	stdout:printLn("Building Android APK package...")

	local result = true	
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe package -f -M AndroidManifest.xml -S res -I \"$(DEPLOY_ANDROID_HOME)/platforms/$(DEPLOY_ANDROID_APILEVEL)/android.jar\" -F $(DEPLOY_PROJECT_NAME).unsigned.apk") == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe add $(DEPLOY_PROJECT_NAME).unsigned.apk lib/armeabi-v7a/lib$(DEPLOY_EXECUTABLE).so", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe add $(DEPLOY_PROJECT_NAME).unsigned.apk lib/armeabi-v7a/libc++_shared.so", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe add $(DEPLOY_PROJECT_NAME).unsigned.apk assets/Application.config", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/zipalign.exe -f -p 4 $(DEPLOY_PROJECT_NAME).unsigned.apk $(DEPLOY_PROJECT_NAME).aligned.apk", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/apksigner.bat sign --ks $(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/keystore.jks --ks-key-alias androidkey --ks-pass pass:android --key-pass pass:android --out $(DEPLOY_PROJECT_NAME).apk $(DEPLOY_PROJECT_NAME).aligned.apk", nil) == 0)

	-- Cleanup intermediate files.
	run:rm("$(DEPLOY_PROJECT_NAME).unsigned.apk")
	run:rm("$(DEPLOY_PROJECT_NAME).aligned.apk")

	if not result then
		stderr:printLn("Failed to generate Android APK package")
		return 1
	end

	stdout:printLn("Done")
	return 0
end


function launch(args)

	-- Ensure device is ready.
	if not isDeviceConnected() then
		stderr:printLn("No device ready; ensure an Android device is connected and properly configured.")
		return 1
	end	

	-- Launch application on attached device.
	stdout:printLn("Installing package...")
	local result = run:execute("$(DEPLOY_ANDROID_HOME)/platform-tools/adb -d install -r \"$(DEPLOY_PROJECT_NAME).apk\"", nil)
	if result ~= 0 then
		stderr:printLn("Failed to install package on device; Please ensure device is attached and in developer mode (1).")
		return 1
	end

	stdout:printLn("Launching...")
	local result = run:execute("$(DEPLOY_ANDROID_HOME)/platform-tools/adb -d shell am start -S -n $(DEPLOY_PROJECT_IDENTIFIER)/android.app.NativeActivity", nil)
	if result ~= 0 then
		stderr:printLn("Failed to launch package on device; Please ensure device is attached and in developer mode (2).")
		return 1
	end
	
	stdout:printLn("Done")
	return 0
end


function migrate(args)
	stdout:printLn("Migrating...")

	-- Migrate database into compact database.
	stdout:printLn("Migrating Android...")
	if run:execute(tools.migrate .. " -p -s=Migrate") ~= 0 then
		stderr:printLn("Failed to migrate Android database")
		return 1
	end
	
	-- Create android native binary.
	if not generateBinary() then
		return 1
	end

	-- Create android project.
	run:mkdir("assets")
	run:mkdir("lib/armeabi-v7a")
	run:mkdir("res/values")
	run:mkdir("res/drawable-hdpi")
	run:mkdir("res/drawable-ldpi")
	run:mkdir("res/drawable-mdpi")
	run:mkdir("res/drawable-xhdpi")
	run:replace("Application.config", "assets/Application.config")
	run:replace("Content.compact", "assets/Content.compact")
	run:replace("lib$(DEPLOY_EXECUTABLE).so", "lib/armeabi-v7a/lib$(DEPLOY_EXECUTABLE).so")
	run:replace("$(DEPLOY_ANDROID_NDK_ROOT)/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libc++_shared.so", "lib/armeabi-v7a/libc++_shared.so")
	run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/AndroidManifest.xml.template", "AndroidManifest.xml")
	run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/strings.xml.template", "res/values/strings.xml")

	-- Cleanup intermediate files.
	run:rm("Application.config")
	run:rm("Content.compact")
	run:rm("lib$(DEPLOY_EXECUTABLE).so")

	-- Create icons.
	stdout:printLn("Generating Android icon images...")

	local iconFile = os:getEnvironment("DEPLOY_PROJECT_ICON")
	if #iconFile <= 0 then
		iconFile = "$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/ic_launcher.png"
	end

	local iconPath = Path("$(DEPLOY_SYSTEM_ROOT)"):concat(Path(iconFile))
	local iconImage = Image.loadFromFile(iconPath:getPathName())
	if iconImage ~= nil then
		generateImage("res/drawable-hdpi/ic_launcher.png", iconImage, 72, 72)
		generateImage("res/drawable-ldpi/ic_launcher.png", iconImage, 36, 36)
		generateImage("res/drawable-mdpi/ic_launcher.png", iconImage, 48, 48)
		generateImage("res/drawable-xhdpi/ic_launcher.png", iconImage, 96, 96)
	else
		stderr:printLn("Failed to generate Android icon images; unable to read source image \"" .. iconPath:getPathName() .. "\".")
		return 1
	end

	-- Build apk package.
	stdout:printLn("Building Android APK package...")

	local result = true	
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe package -f -M AndroidManifest.xml -S res -I \"$(DEPLOY_ANDROID_HOME)/platforms/$(DEPLOY_ANDROID_APILEVEL)/android.jar\" -F $(DEPLOY_PROJECT_NAME).unsigned.apk") == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe add $(DEPLOY_PROJECT_NAME).unsigned.apk lib/armeabi-v7a/lib$(DEPLOY_EXECUTABLE).so", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe add $(DEPLOY_PROJECT_NAME).unsigned.apk lib/armeabi-v7a/libc++_shared.so", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe add $(DEPLOY_PROJECT_NAME).unsigned.apk assets/Application.config", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/aapt.exe add $(DEPLOY_PROJECT_NAME).unsigned.apk assets/Content.compact", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/zipalign.exe -f -p 4 $(DEPLOY_PROJECT_NAME).unsigned.apk $(DEPLOY_PROJECT_NAME).aligned.apk", nil) == 0)
	result = result and (run:execute("$(DEPLOY_ANDROID_HOME)/build-tools/27.0.3/apksigner.bat sign --ks $(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/android/keystore.jks --ks-key-alias androidkey --ks-pass pass:android --key-pass pass:android --out $(DEPLOY_PROJECT_NAME).apk $(DEPLOY_PROJECT_NAME).aligned.apk", nil) == 0)

	-- Cleanup intermediate files.
	run:rm("$(DEPLOY_PROJECT_NAME).unsigned.apk")
	run:rm("$(DEPLOY_PROJECT_NAME).aligned.apk")

	if not result then
		stderr:printLn("Failed to generate Android APK package")
		return 1
	end

	-- Ensure device is ready.
	if not isDeviceConnected() then
		stderr:printLn("No device ready; ensure an Android device is connected and properly configured.")
		return 1
	end

	-- Install application on attached device.
	stdout:printLn("Installing package...")
	local result = run:execute("$(DEPLOY_ANDROID_HOME)/platform-tools/adb -d install -r \"$(DEPLOY_PROJECT_NAME).apk\"", nil)
	if result ~= 0 then
		stderr:printLn("Failed to install package on device; Please ensure device is attached and in developer mode.")
		return 1
	end

	stdout:printLn("Done")
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	end
	return 1
end
