import(traktor)
import(traktor.drawing)
import(traktor.run)


-- Load common script.
if not run:loadScript("$(RUN_SCRIPT_PATH)/common/common.run") then
	stderr:printLn("Unable to load \"common.run\"; installation broken?")
	return 1
end


local function generateResponseFile(files)
	local f = fileSystem:open(Path("link.rsp"), 2)
	assert (f ~= nil)

	local s = StreamOutput(f, Utf8Encoding())
	local fna = files:split(" ")
	for _, fn in ipairs(fna) do
		s:printLn(Path(fn).pathName)
	end

	f:close()
	return "link.rsp"
end


local function linkStaticProduct()
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")
	local preamble = "\"$(TRAKTOR_HOME)/scripts/config-vs-x64.bat\" && "

	-- Get library paths.
	local libraryPaths = ""
	local paths = ""
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end
	for _, p in pairs(paths) do
		libraryPaths = libraryPaths .. "/LIBPATH:\"" .. Path(p).pathName .. "\" "
	end

	-- Get files to link or copy.
	local linkFiles = ""
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			if f:endswith(".lib") then
				linkFiles = linkFiles .. f .. " "
			end
		end
	end

	-- Generate symbols which must be included in product after linkage.
	local linkerIncludes = ""
	local modules = os:getEnvironment("DEPLOY_MODULES"):split("\n")
	for _, m in pairs(modules) do
		linkerIncludes = linkerIncludes .. "/INCLUDE:__module__" .. m:gsub("%.", "_") .. " "
	end

	-- Create icon resource.
	local icon = createIcon()
	if icon == nil then
		stderr:printLn("Unable to create product icon; failed to generate icon image.")
		return 1
	end
	if not icon:save("Traktor.Runtime.App.ico") then
		stderr:printLn("Unable to create product icon; failed to save icon.")
		return 1
	end

	-- Generate resource script.
	if run:run("\"$(TRAKTOR_HOME)/resources/runtime/deploy/win64/Traktor.Runtime.App.rc.template\"", "Traktor.Runtime.App.rc") ~= 0 then
		stderr:printLn("Unable to generate resource script.")
		return 1
	end

	-- Compile resources.
	local cmd = "rc /fo\"%DEPLOY_EXECUTABLE%.res\" Traktor.Runtime.App.rc"
	local result = run:execute(preamble .. cmd, nil)
	if result ~= 0 then
		stderr:printLn("Unable to build product resources.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		return 1
	end

	-- Generate link response file.
	local rsp = generateResponseFile(linkFiles)

	-- Link files into an executable product.
	local cmd = 
		"link @" .. rsp .. " " .. linkerIncludes .. " " ..
		"%DEPLOY_EXECUTABLE%.res " ..
		"/OUT:%DEPLOY_EXECUTABLE%.exe " ..
		"/PDB:%DEPLOY_EXECUTABLE%.pdb " ..
		libraryPaths ..
		"/MACHINE:X64 " ..
		"/SUBSYSTEM:WINDOWS"
	if not debug then
		cmd = cmd .. " /DEBUG /OPT:REF"
	else
		cmd = cmd .. " /DEBUG"
	end
	local result = run:execute(preamble .. cmd, nil)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		return 1
	end

	-- Embed manifest in executable product.
	local cmd = "mt -manifest $(TRAKTOR_HOME)/resources/runtime/deploy/win64/manifest.xml -outputresource:$(DEPLOY_EXECUTABLE).exe;1"
	local result = run:execute(preamble .. cmd, nil)
	if result ~= 0 then
		stderr:printLn("Unable to embed manifest into executable product.")
		stderr:printLn(cmd)
		stderr:printLn(run:stdOut())
		return 1
	end

	-- Clean some unwanted files.
	run:rm("*.exp")
	run:rm("*.lib")
	run:rm("*.res")
	run:rm("*.rc")
	run:rm("*.ico")
	run:rm(rsp)
	return 0	
end


-------------------------------------------------------------------------------


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = tools.pipeline .. " -v -p -s=Pipeline"
	for i = 1, args.size - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


local function deployStatic(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Link our product.
	local r = linkStaticProduct()
	if r ~= 0 then return r end

	-- Deploy executable into remote folder.
	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" $(DEPLOY_EXECUTABLE).exe", nil)
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Get shared paths.
	local paths = nil
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end

	-- Find files to deploy; qualitfy through paths.
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for _, f in ipairs(files) do
		if f ~= "" and not f:endswith(".lib") then
			local found = false
			for _, p in ipairs(paths) do
				local qf = Path(p):concat(Path(f))
				if FileSystem.getInstance():exist(qf) then
					run:pushd(p)
					run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. f, nil)
					run:popd()
					found = true
				end
			end
			if not found then
				stderr:printLn("Unable to deploy \"" .. f .. "\"; file not found.")
				return 1
			end
		end
	end

	return 0
end


local function deployShared(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Create icon resource.
	local icon = createIcon()
	if icon == nil then
		stderr:printLn("Unable to create product icon; failed to generate icon image.")
		return 1
	end
	if not icon:save("Traktor.Runtime.App.ico") then
		stderr:printLn("Unable to create product icon; failed to save icon.")
		return 1
	end

	-- Get shared paths.
	local paths = nil
	if not debug then paths = os:getEnvironment("DEPLOY_SHARED_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_SHARED_PATH_DEBUG"):split("\n") end

	-- Find files to deploy; qualitfy through paths.
	local files = os:getEnvironment("DEPLOY_SHARED"):split("\n")
	for _, p in ipairs(paths) do
		local deployFiles = ""
		for _, f in ipairs(files) do
			local qf = Path(p):concat(Path(f))
			if FileSystem.getInstance():exist(qf) then
				deployFiles = deployFiles .. " " .. f
			end
		end
		if deployFiles ~= "" then
			run:pushd(p)
			run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. deployFiles, nil)
			run:popd()
			if run:exitCode() ~= 0 then return run:exitCode() end
		end
	end

	-- Clean some unwanted files.
	run:rm("*.ico")
	return 0
end


function deploy(args)
	-- Deploy application configuration to target.
	stdout:printLn("Deploying resources to target host...")
	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" Application.config", nil)
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Continue with either statically linked product or as a bunch of dynamic libraries.
	local staticLink = (os:getEnvironment("DEPLOY_STATIC_LINK") ~= "")
	if staticLink then
		return deployStatic(args)
	else
		return deployShared(args)
	end
end


function launch(args)
	stdout:printLn("Launching Win64...")
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")
	return run:execute(tools.remote .. " launch $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. executable .. " \\-s Application.config", nil)
end


local function migrateStatic(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Link our product.
	local r = linkStaticProduct()
	if r ~= 0 then return r end

	-- Copy binaries into "bin".
	run:mkdir("bin64")
	run:replace("$(DEPLOY_EXECUTABLE).exe", "bin64/$(DEPLOY_EXECUTABLE).exe")
	run:replace("$(DEPLOY_EXECUTABLE).pdb", "bin64/$(DEPLOY_EXECUTABLE).pdb")

	-- Get shared paths.
	local paths = nil
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end

	-- Find files to deploy; qualitfy through paths.
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for _, f in ipairs(files) do
		if f ~= "" and not f:endswith(".lib") then
			local found = false
			for _, p in ipairs(paths) do
				local qf = Path(p):concat(Path(f))
				if FileSystem.getInstance():exist(qf) then
					run:replace(qf.pathName, "bin64/" .. f)
					found = true
				end
			end
			if not found then
				stderr:printLn("Unable to migrate \"" .. f .. "\"; file not found.")
				return 1
			end
		end
	end

	return 0
end


local function migrateShared(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Create icon resource.
	local icon = createIcon()
	if icon == nil then
		stderr:printLn("Unable to create product icon; failed to generate icon image.")
		return 1
	end
	if not icon:save("Traktor.Runtime.App.ico") then
		stderr:printLn("Unable to create product icon; failed to save icon.")
		return 1
	end

	run:mkdir("bin64")

	-- Get shared paths.
	local paths = nil
	if not debug then paths = os:getEnvironment("DEPLOY_SHARED_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_SHARED_PATH_DEBUG"):split("\n") end

	-- Find files to deploy; qualitfy through paths.
	local files = os:getEnvironment("DEPLOY_SHARED"):split("\n")
	for _, f in ipairs(files) do
		local found = false
		for _, p in ipairs(paths) do
			local qf = Path(p):concat(Path(f))
			if FileSystem.getInstance():exist(qf) then
				if run:replace(qf.pathName, "bin64/" .. f) then
					found = true
				else
					stderr:printLn("Unable to copy file \"" .. f .. "\" to binary folder; file copy failed.")
					return 1
				end
			end
		end
		if not found then
			stderr:printLn("Unable to copy file \"" .. f .. "\" to binary folder; no such file found.")
			return 1
		end
	end

	-- Clean some unwanted files.
	run:rm("*.ico")
	return 0
end


function migrate(args)
	stdout:printLn("Migrating Win64...")

	-- Build content database.
	run:execute(tools.migrate .. " -p -s=Migrate")
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Continue with either statically linked product or as a bunch of dynamic libraries.
	local staticLink = (os:getEnvironment("DEPLOY_STATIC_LINK") ~= "")
	if staticLink then
		return migrateStatic(args)
	else
		return migrateShared(args)
	end
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	else
		stdout:printLn("Usage: deploy-win64 [action]")
		stdout:printLn()
		stdout:printLn("  Actions:")
		stdout:printLn("    build")
		stdout:printLn("    deploy")
		stdout:printLn("    launch")
		stdout:printLn("    migrate")
	end
	return 1
end
