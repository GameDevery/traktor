import(traktor)
import(traktor.drawing)
import(traktor.run)


-- Load common script.
if not run:loadScript("$(RUN_SCRIPT_PATH)/common/common.run") then
	stderr:printLn("Unable to load \"common.run\"; installation broken?")
	return 1
end


-- Application icon definitions.
local iconDefinitions =
{
	{ image = "Icon.png", idiom = "iphone", width = 29, height = 29, scale = 2 },
	{ image = "Icon.png", idiom = "iphone", width = 29, height = 29, scale = 3 },
	{ image = "Icon.png", idiom = "iphone", width = 40, height = 40, scale = 2 },
	{ image = "Icon.png", idiom = "iphone", width = 40, height = 40, scale = 3 },
	{ image = "Icon.png", idiom = "iphone", width = 60, height = 60, scale = 2 },
	{ image = "Icon.png", idiom = "iphone", width = 60, height = 60, scale = 3 },
	{ image = "Icon.png", idiom = "ipad",   width = 29, height = 29, scale = 1 },
	{ image = "Icon.png", idiom = "ipad",   width = 29, height = 29, scale = 2 },
	{ image = "Icon.png", idiom = "ipad",   width = 40, height = 40, scale = 1 },
	{ image = "Icon.png", idiom = "ipad",   width = 40, height = 40, scale = 2 },
	{ image = "Icon.png", idiom = "ipad",   width = 76, height = 76, scale = 1 },
	{ image = "Icon.png", idiom = "ipad",   width = 76, height = 76, scale = 2 },
	{ image = "Icon.png", idiom = "ipad",   width = 83.5, height = 83.5, scale = 2 },
}


-- Launch image definitions (pre-iOS 7.0).
local imageDefinitions =
{
	{ image = "Default-iPhone.png", width = 1242/3, height = 2208/3, orientation = "portrait", idiom = "iphone", extent = "full-screen", minversion = "8.0", subtype = "736h", scale = 3 },
	{ image = "Default-iPhone.png", width = 2208/3, height = 1242/3, orientation = "landscape", idiom = "iphone", extent = "full-screen", minversion = "8.0", subtype = "736h", scale = 3 },
	{ image = "Default-iPhone.png", width = 750/2, height = 1334/2, orientation = "portrait", idiom = "iphone", extent = "full-screen", minversion = "8.0", subtype = "667h", scale = 2 },
	{ image = "Default-iPhone.png", width = 640/2, height = 960/2, orientation = "portrait", idiom = "iphone", extent = "full-screen", minversion = "7.0", subtype = nil, scale = 2 },
	{ image = "Default-iPhone.png", width = 640/2, height = 1136/2, orientation = "portrait", idiom = "iphone", extent = "full-screen", minversion = "7.0", subtype = "retina4", scale = 2 },
	{ image = "Default-iPad-Portrait.png", width = 768, height = 1024, orientation = "portrait", idiom = "ipad", extent = "full-screen", minversion = "7.0", subtype = nil, scale = 1 },
	{ image = "Default-iPad-Landscape.png", width = 1024, height = 768, orientation = "landscape", idiom = "ipad", extent = "full-screen", minversion = "7.0", subtype = nil, scale = 1 },
	{ image = "Default-iPad-Portrait.png", width = 1536/2, height = 2048/2, orientation = "portrait", idiom = "ipad", extent = "full-screen", minversion = "7.0", subtype = nil, scale = 2 },
	{ image = "Default-iPad-Landscape.png", width = 2048/2, height = 1536/2, orientation = "landscape", idiom = "ipad", extent = "full-screen", minversion = "7.0", subtype = nil, scale = 2 },
	{ image = "Default-iPhone.png", width = 320, height = 480, orientation = "portrait", idiom = "iphone", extent = "full-screen", minversion = nil, subtype = nil, scale = 1 },
	{ image = "Default-iPhone.png", width = 640/2, height = 960/2, orientation = "portrait", idiom = "iphone", extent = "full-screen", minversion = nil, subtype = nil, scale = 2 },
	{ image = "Default-iPhone.png", width = 640/2, height = 1136/2, orientation = "portrait", idiom = "iphone", extent = "full-screen", minversion = nil, subtype = "retina4", scale = 2 },
	{ image = "Default-iPad-Portrait.png", width = 768, height = 1004, orientation = "portrait", idiom = "ipad", extent = "to-status-bar", minversion = nil, subtype = nil, scale = 1 },
	{ image = "Default-iPad-Portrait.png", width = 768, height = 1024, orientation = "portrait", idiom = "ipad", extent = "full-screen", minversion = nil, subtype = nil, scale = 1 },
	{ image = "Default-iPad-Landscape.png", width = 1024, height = 748, orientation = "landscape", idiom = "ipad", extent = "to-status-bar", minversion = nil, subtype = nil, scale = 1 },
	{ image = "Default-iPad-Landscape.png", width = 1024, height = 768, orientation = "landscape", idiom = "ipad", extent = "full-screen", minversion = nil, subtype = nil, scale = 1 },
	{ image = "Default-iPad-Portrait.png", width = 1536/2, height = 2008/2, orientation = "portrait", idiom = "ipad", extent = "to-status-bar", minversion = nil, subtype = nil, scale = 2 },
	{ image = "Default-iPad-Portrait.png", width = 1536/2, height = 2048/2, orientation = "portrait", idiom = "ipad", extent = "full-screen", minversion = nil, subtype = nil, scale = 2 },
	{ image = "Default-iPad-Landscape.png", width = 2048/2, height = 1496/2, orientation = "landscape", idiom = "ipad", extent = "to-status-bar", minversion = nil, subtype = nil, scale = 2 },
	{ image = "Default-iPad-Landscape.png", width = 2048/2, height = 1536/2, orientation = "landscape", idiom = "ipad", extent = "full-screen", minversion = nil, subtype = nil, scale = 2 },
}


function createXCAssets()

	-- Icons
	run:mkdir("Images.xcassets/AppIcon.appiconset")
	local f = fileSystem:open(Path("Images.xcassets/AppIcon.appiconset/Contents.json"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("{")
	s:printLn("  \"images\" : [")

	for i, id in ipairs(iconDefinitions) do
		local image = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/" .. id.image)
		if image == nil then
			return false
		end

		generateImage(
			"Images.xcassets/AppIcon.appiconset/AppIcon-" .. i .. ".png",
			image,
			id.width * id.scale,
			id.height * id.scale
		)

		s:printLn("    {")
		s:printLn("      \"size\" : \"" .. id.width .. "x" .. id.height .. "\",")
		s:printLn("      \"idiom\" : \"" .. id.idiom .. "\",")
		s:printLn("      \"filename\" : \"AppIcon-" .. i .. ".png\",")
		s:printLn("      \"scale\" : \"" .. id.scale .. "x\"")
		s:printLn("    },")
	end

	s:printLn("  ],")
	s:printLn("  \"info\" : {")
	s:printLn("    \"version\" : 1,")
	s:printLn("    \"author\" : \"xcode\"")
	s:printLn("  }")
	s:printLn("}")

	f:close()

	-- Legacy launch images.
	run:mkdir("Images.xcassets/LaunchImage.launchimage")
	local f = fileSystem:open(Path("Images.xcassets/LaunchImage.launchimage/Contents.json"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("{")
	s:printLn("  \"images\" : [")

	for i, id in ipairs(imageDefinitions) do
		local image = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/" .. id.image)
		if image == nil then
			return false
		end

		generateImage(
			"Images.xcassets/LaunchImage.launchimage/LaunchImage-" .. i .. ".png",
		 	image,
		 	id.width * id.scale,
		 	id.height * id.scale
		)

		s:printLn("    {")
		
		if id.extent ~= nil then
			s:printLn("      \"extent\" : \"" .. id.extent .. "\",")
		end

		s:printLn("      \"idiom\" : \"" .. id.idiom .. "\",")

		if id.subtype ~= nil then
			s:printLn("      \"subtype\" : \"" .. id.subtype .. "\",")
		end

		s:printLn("      \"filename\" : \"LaunchImage-" .. i .. ".png\",")

		if id.minversion ~= nil then
			s:printLn("      \"minimum-system-version\" : \"" .. id.minversion .. "\",")
		end

		s:printLn("      \"orientation\" : \"" .. id.orientation .. "\",")
		s:printLn("      \"scale\" : \"" .. id.scale .. "x\"")
		s:printLn("    },")
	end

	s:printLn("  ],")
	s:printLn("  \"info\" : {")
	s:printLn("    \"version\" : 1,")
	s:printLn("    \"author\" : \"xcode\"")
	s:printLn("  }")
	s:printLn("}")

	f:close()
	return true
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = tools.pipeline .. " -p -s=Pipeline"
	for i = 1, args.size - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function deploy(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	stdout:printLn("Generating Info.plist...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/Info.plist.template", "Info.plist") ~= 0 then
		stderr:printLn("Failed to generate Info.plist")
		return 1
	end

	stdout:printLn("Generating Main.mm...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/Main.mm.template", "Main.mm") ~= 0 then
		stderr:printLn("Failed to generate Main.mm")
		return 1
	end

	stdout:printLn("Generating Images.xcassets...")
	if not createXCAssets() then
		stderr:printLn("Failed to generate Images.xcassets")
		return 1
	end

	stdout:printLn("Generating Xcode project...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/project.pbxproj.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj") ~= 0 then
		stderr:printLn("Failed to generate Xcode project")
		return 1
	end

	stdout:printLn("Generating Xcode scheme...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/scheme.xcscheme.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes/$(DEPLOY_PROJECT_NAME).xcscheme") ~= 0 then
		stderr:printLn("Failed to generate Xcode scheme")
		return 1
	end

	stdout:printLn("Generating Xcode launcher script...")
	local f = fileSystem:open(Path("launch.sh"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("open \"${*:1}\".xcodeproj")
	f:close()	

	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		stdout:printLn("Deploying resources to target host...")

		run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" launch.sh *.plist *.mm *.png Application.config", "(null)")
		run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" -recursive Images.xcassets/*.*", "(null)")
		run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" \"$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj\"", "(null)")

		-- Get shared paths.
		local paths = nil
		if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end

		-- Find files to deploy; qualitfy through paths.
		local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
		for _, p in ipairs(paths) do
			local deployFiles = ""
			local deployBundles = {}
			for _, f in ipairs(files) do
				local qf = Path(p):concat(Path(f))
				if FileSystem.getInstance():exist(qf) then
					if string.endswith(f, ".a") or string.endswith(f, ".plist") then
						deployFiles = deployFiles .. " " .. f
					elseif string.endswith(f, ".framework") or string.endswith(f, ".bundle") then
						table.insert(deployBundles, f)
					end
				end
			end
			run:pushd(p)
			if deployFiles ~= "" then
				run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. deployFiles) -- , nil)
				if run:exitCode() ~= 0 then return run:exitCode() end
			end
			for _, bundle in ipairs(deployBundles) do
				run:execute(tools.remote .. " deploy -recursive $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. bundle .. "/*.*") -- nil)
			end
			run:popd()
		end
	end

	stdout:printLn("Deploy finished")
	return 0
end


function launch(args)
	stdout:printLn("Launching Xcode on target host...")
	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		local result = run:execute(tools.remote .. " launch $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" launch.sh \"$(DEPLOY_PROJECT_NAME)\"", "(null)")
		if result ~= 0 then
			stderr:printLn("Failed to launch iOS application")
			return 1
		end
	end
	return 0
end


function migrate(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	stdout:printLn("Migrating iOS...")
	if run:execute(tools.migrate .. " -p -s=Migrate") ~= 0 then
		stderr:printLn("Failed to migrate iOS database")
		return 1
	end

	stdout:printLn("Generating Info.plist...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/Info.plist.template", "Info.plist") ~= 0 then
		stderr:printLn("Failed to generate Info.plist")
		return 1
	end

	stdout:printLn("Generating Main.mm...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/Main.mm.template", "Main.mm") ~= 0 then
		stderr:printLn("Failed to generate Main.mm")
		return 1
	end

	stdout:printLn("Generating Images.xcassets...")
	if not createXCAssets() then
		stderr:printLn("Failed to generate Images.xcassets")
		return 1
	end

	stdout:printLn("Generating Xcode project...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/project.pbxproj.template Content.compact", "$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj") ~= 0 then
		stderr:printLn("Failed to generate Xcode project")
		return 1
	end

	stdout:printLn("Generating Xcode scheme...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/ios/scheme.xcscheme.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes/$(DEPLOY_PROJECT_NAME).xcscheme") ~= 0 then
		stderr:printLn("Failed to generate Xcode scheme")
		return 1
	end

	stdout:printLn("Generating Xcode launcher script...")
	local f = fileSystem:open(Path("launch.sh"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("open \"${*:1}\".xcodeproj")
	f:close()	

	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		stdout:printLn("Deploying resources to target host...")

		run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" launch.sh *.plist *.mm *.png Content.compact Application.config", "(null)")
		run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" -recursive Images.xcassets/*.*", "(null)")
		run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" \"$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj\"", "(null)")

		-- Get shared paths.
		local paths = nil
		if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end

		-- Find files to deploy; qualitfy through paths.
		local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
		for _, p in ipairs(paths) do
			local deployFiles = ""
			local deployBundles = {}
			for _, f in ipairs(files) do
				local qf = Path(p):concat(Path(f))
				if FileSystem.getInstance():exist(qf) then
					if string.endswith(f, ".a") or string.endswith(f, ".plist") then
						deployFiles = deployFiles .. " " .. f
					elseif string.endswith(f, ".framework") or string.endswith(f, ".bundle") then
						table.insert(deployBundles, f)
					end
				end
			end
			run:pushd(p)
			if deployFiles ~= "" then
				run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. deployFiles) -- , nil)
				if run:exitCode() ~= 0 then return run:exitCode() end
			end
			for _, bundle in ipairs(deployBundles) do
				run:execute(tools.remote .. " deploy -recursive $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" " .. bundle .. "/*.*") -- nil)
			end
			run:popd()
		end

		stdout:printLn("Launching Xcode on target host...")
		if run:execute(tools.remote .. " launch $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" launch.sh \"$(DEPLOY_PROJECT_NAME)\"", "(null)") ~= 0 then
			stderr:printLn("Failed to launch Xcode")
			return 1
		end
	end

	stdout:printLn("Migrate finished")
	return 0	
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	else
		stdout:printLn("Usage: deploy-ios [action]")
		stdout:printLn()
		stdout:printLn("  Actions:")
		stdout:printLn("    build")
		stdout:printLn("    deploy")
		stdout:printLn("    launch")
		stdout:printLn("    migrate")
	end
	return 1
end
