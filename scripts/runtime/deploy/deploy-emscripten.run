import(traktor)


-- Load common script.
if not run:loadScript("$(RUN_SCRIPT_PATH)/common/common.run") then
	stderr:printLn("Unable to load \"common.run\"; installation broken?")
	return 1
end


-- Total amount of memory allocated by Emscripten product at runtime.
local totalMemory = 256 * 1024 * 1024


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = tools.pipeline .. " -p -s=Pipeline"
	for i = 1, args.size - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function deploy(args)
	stdout:printLn("Deploying Emscripten...")

	local host = os:getEnvironment("DEPLOY_HOST_OS")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Get toolchain binaries,
	-- toolchain binaries on Windows are actually bat-file wrappers we need to append suffix.
	local emcc = "emcc" 
	if host == "win32" or host == "win64" then
		emcc = emcc .. ".bat"
	end

	-- Get library paths.
	local libraryPaths = ""
	local paths = ""
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end
	 for _, p in pairs(paths) do
		libraryPaths = libraryPaths .. " -L \"" .. Path(p).pathName .. "\""
	end

	-- Collect libraries to link.
	local libraries = ""
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for _, f in ipairs(files) do
		if f:endswith(".a") then
			f = f:sub(4)
			f = f:sub(1, #f - 2)
			libraries = libraries .. " -l" .. f		
		elseif f:endswith(".bc") or f:endswith(".o") then
			libraries = libraries .. " " .. f
		else
			stderr:printLn("Unknown deploy file \"" .. f .. "\"")
		end
	end

	-- Create the module initialization file.
	stdout:printLn("Generating Linkage.cpp...")
	if run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/emscripten/Linkage.cpp.template\"", "Linkage.cpp") ~= 0 then
		stderr:printLn("Failed to generate Linkage.cpp")
		return 1
	end	

	-- Compile linkage file.
	stdout:printLn("Compiling Linkage.cpp...")
	local cmd = emcc .. " -c -s WASM=1 Linkage.cpp -o Linkage.o"
	local result = run:execute(cmd) -- , nil)
	if result ~= 0 then
		stderr:printLn("Unable to compile \"Linkage\" file.")
		return 1
	end

	-- Build linker command line.
	local cmd = emcc .. " "
	cmd = cmd .. " -s WASM=1"
	-- cmd = cmd .. " -s BINARYEN_TRAP_MODE='clamp'"
	-- cmd = cmd .. " -s ERROR_ON_UNDEFINED_SYMBOLS=0"
	cmd = cmd .. " -s USE_PTHREADS=0"
	cmd = cmd .. " -s TOTAL_MEMORY=" .. totalMemory
	-- cmd = cmd .. " -Wl,-s,ERROR_ON_UNDEFINED_SYMBOLS=0"
	cmd = cmd .. " -s LLD_REPORT_UNDEFINED=1"
	-- cmd = cmd .. " -g"
	cmd = cmd .. " -O2"
	cmd = cmd .. " Linkage.o"
	cmd = cmd .. libraryPaths
	cmd = cmd .. libraries
	cmd = cmd .. libraries
	cmd = cmd .. " -o $(DEPLOY_EXECUTABLE).html --preload-file Application.config"

	-- Link files into an executable product.
	local result = run:execute(cmd) --, nil)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		return 1
	end

	-- Remove intermediate files.
	run:rm("Linkage.*")

	-- Create html loader.
--	if run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/emscripten/Index.html.template\"", os:getEnvironment("DEPLOY_EXECUTABLE") .. ".html") ~= 0 then
--		stderr:printLn("Failed to generate HTML loader.")
--		return 1
--	end

	return 0
end


function launch(args)
	return 0
end


function migrate(args)
	stdout:printLn("Migrating Emscripten...")

	local result = run:execute(tools.migrate .. " -p -s=Migrate")
	if result ~= 0 then
		stderr:printLn("Unable to migrate content.")
		return 1
	end

	stdout:printLn("Deploying Emscripten...")

	local host = os:getEnvironment("DEPLOY_HOST_OS")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Get toolchain binaries,
	-- toolchain binaries on Windows are actually bat-file wrappers we need to append suffix.
	local emcc = "emcc" 
	if host == "win32" or host == "win64" then
		emcc = emcc .. ".bat"
	end

	-- Get library paths.
	local libraryPaths = ""
	local paths = ""
	if not debug then paths = os:getEnvironment("DEPLOY_STATIC_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_STATIC_PATH_DEBUG"):split("\n") end
	 for _, p in pairs(paths) do
		libraryPaths = libraryPaths .. " -L " .. Path(p).pathName .. ""
	end

	-- Collect libraries to link.
	local libraries = ""
	local files = os:getEnvironment("DEPLOY_STATIC"):split("\n")
	for _, f in ipairs(files) do
		if f:endswith(".a") then
			f = f:sub(4)
			f = f:sub(1, #f - 2)
			libraries = libraries .. " -l" .. f		
		elseif f:endswith(".bc") or f:endswith(".o") then
			libraries = libraries .. " " .. f
		else
			stderr:printLn("Unknown deploy file \"" .. f .. "\"")
		end
	end

	-- Create the module initialization file.
	stdout:printLn("Generating Linkage.cpp...")
	if run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/emscripten/Linkage.cpp.template\"", "Linkage.cpp") ~= 0 then
		stderr:printLn("Failed to generate Linkage.cpp")
		return 1
	end	

	-- Compile linkage file.
	stdout:printLn("Compiling Linkage.cpp...")
	local cmd = emcc .. " -c -s WASM=1 Linkage.cpp -o Linkage.o"
	local result = run:execute(cmd) --, nil)
	if result ~= 0 then
		stderr:printLn("Unable to compile \"Linkage\" file.")
		return 1
	end

	-- Build linker command line.
	local cmd = emcc .. " "
	cmd = cmd .. " -s WASM=1"
	-- cmd = cmd .. " -s BINARYEN_TRAP_MODE='clamp'"
	-- cmd = cmd .. " -s ERROR_ON_UNDEFINED_SYMBOLS=0"
	cmd = cmd .. " -s USE_PTHREADS=0"
	cmd = cmd .. " -s TOTAL_MEMORY=" .. totalMemory
	-- cmd = cmd .. " -Wl,-s,ERROR_ON_UNDEFINED_SYMBOLS=0"
	-- cmd = cmd .. " -g"
	cmd = cmd .. " -O2"
	cmd = cmd .. " Linkage.o"
	cmd = cmd .. libraryPaths
	cmd = cmd .. libraries
	cmd = cmd .. libraries
	cmd = cmd .. " -o $(DEPLOY_EXECUTABLE).html --preload-file Application.config --preload-file Content.compact"

	-- Link files into an executable product.
	local result = run:execute(cmd) -- , nil)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		return 1
	end

	-- Remove intermediate files.
	run:rm("Linkage.*")

	-- Create html loader.
--	if run:run("\"$(DEPLOY_SYSTEM_ROOT)/resources/runtime/deploy/emscripten/Index.html.template\"", os:getEnvironment("DEPLOY_EXECUTABLE") .. ".html") ~= 0 then
--		stderr:printLn("Failed to generate HTML loader.")
--		return 1
--	end

	stdout:printLn("Done")
	return 0
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	else
		stdout:printLn("Usage: deploy-emscripten [action]")
		stdout:printLn()
		stdout:printLn("  Actions:")
		stdout:printLn("    build")
		stdout:printLn("    deploy")
		stdout:printLn("    launch")
		stdout:printLn("    migrate")
	end
	return 1
end
