import(traktor)
import(traktor.run)


-- Load common script.
if not run:loadScript("$(RUN_SCRIPT_PATH)/common/common.run") then
	stderr:printLn("Unable to load \"common.run\"; installation broken?")
	return 1
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = tools.pipeline .. " -l -p -s=Pipeline"
	for i = 1, args.size - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function deploy(args)
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")
	local bundle = os:getEnvironment("DEPLOY_PROJECT_NAME"):gsub("%s", "") .. ".app"
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Create application bundle.
	run:mkdir(bundle .. "/Contents/MacOS")
	run:mkdir(bundle .. "/Contents/Resources")

	run:run("$(DEPLOY_PROJECT_ROOT)/resources/runtime/deploy/osx/Info.plist.template", bundle .. "/Contents/Info.plist")
	run:replace("$(DEPLOY_PROJECT_ROOT)/resources/runtime/deploy/osx/Icon.icns", bundle .. "/Contents/Resources/Icon.icns")
	run:replace("Application.config", bundle .. "/Contents/Resources/Application.config")
	
	-- Get shared paths.
	local paths = nil
	if not debug then paths = os:getEnvironment("DEPLOY_SHARED_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_SHARED_PATH_DEBUG"):split("\n") end

	-- Copy binaries into bundle.
	local files = os:getEnvironment("DEPLOY_SHARED"):split("\n")
	for _, p in ipairs(paths) do
		for _, f in ipairs(files) do
			local qf = Path(p):concat(Path(f))
			if FileSystem.getInstance():exist(qf) then
				run:replace(qf.pathName, bundle .. "/Contents/MacOS/" .. f)
			end
		end
	end

	-- Deploy bundle to target.
	stdout:printLn("Deploying application to target host...")
	run:pushd(bundle)
	run:execute(tools.remote .. " deploy -recursive $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)/" .. bundle .. "\" *", "(null)")
	if run:exitCode() ~= 0 then
		stderr:printLn("Failed to deploy application to target.")
		return run:exitCode()
	end	
	run:popd()

	-- Create launcher script.
	local f = fileSystem:open(Path("launch.sh"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("chmod u+x " .. bundle .. "/Contents/MacOS/*")
	s:printLn(bundle .. "/Contents/MacOS/" .. executable .. " -s")
	f:close()

	-- Deploy launcher script.
	run:execute(tools.remote .. " deploy $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" launch.sh", "(null)")
	return 0
end


function launch(args)
	stdout:printLn("Launching OSX...")
	return run:execute(tools.remote .. " launch $(DEPLOY_TARGET_HOST) -t=\"$(DEPLOY_PROJECT_NAME)\" launch.sh", "(null)")
end


function migrate(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")
	local bundle = os:getEnvironment("DEPLOY_PROJECT_NAME"):gsub("%s", "") .. ".app"

	-- Build content database.
	stdout:printLn("Migrating OSX...")
	run:execute(tools.migrate .. " -p -s=Migrate")
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Create application bundle.
	run:mkdir(bundle .. "/Contents/MacOS")
	run:mkdir(bundle .. "/Contents/Resources")

	run:run("$(DEPLOY_PROJECT_ROOT)/resources/runtime/deploy/osx/Info.plist.template", bundle .. "/Contents/Info.plist")
	run:replace("$(DEPLOY_PROJECT_ROOT)/resources/runtime/deploy/osx/Icon.icns", bundle .. "/Contents/Resources/Icon.icns")
	run:replace("Application.config", bundle .. "/Contents/Resources/Application.config")
	run:replace("Content.compact", bundle .. "/Contents/Resources/Content.compact")
	
	-- Get shared paths.
	local paths = nil
	if not debug then paths = os:getEnvironment("DEPLOY_SHARED_PATH_RELEASE"):split("\n") else paths = os:getEnvironment("DEPLOY_SHARED_PATH_DEBUG"):split("\n") end

	-- Copy binaries into bundle.
	local files = os:getEnvironment("DEPLOY_SHARED"):split("\n")
	for _, p in ipairs(paths) do
		for _, f in ipairs(files) do
			local qf = Path(p):concat(Path(f))
			if FileSystem.getInstance():exist(qf) then
				if not run:replace(qf.pathName, bundle .. "/Contents/MacOS/" .. f) then
					stderr:printLn("Unable to copy file \"" .. f .. "\" to bundle")
					return 1
				end
			end
		end
	end

	return 0
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	else
		stdout:printLn("Usage: deploy-osx [action]")
		stdout:printLn()
		stdout:printLn("  Actions:")
		stdout:printLn("    build")
		stdout:printLn("    deploy")
		stdout:printLn("    launch")
		stdout:printLn("    migrate")
	end
	return 1
end
