import(traktor)


local function traverse(binPath, path)
	local fs = fileSystem:find("zip:" .. path .. "/*.*")
	for _, f in pairs(fs) do
		if not f.directory then
			local target = Path(binPath .. f.path.pathNameNoVolume)
			fileSystem:makeAllDirectories(Path(target.pathOnly))

			local sf = fileSystem:open(f.path, File.FmRead)
			if sf == nil then
				stderr:printLn("Unable to open stream to \"" .. f.path.pathName .. "\".")
				return false
			end

			local tf = fileSystem:open(target, File.FmWrite)
			if tf == nil then
				stderr:printLn("Unable to create file \"" .. target.pathName .. "\".")
				return false
			end

			if not StreamCopy(tf, sf):execute() then
				stderr:printLn("Failed to write file \"" .. target.pathName .. "\".")
				return false
			end

			tf:close()
			sf:close()
		else
			if not traverse(binPath, f.path.pathName) then
				return false
			end
		end
	end
	return true
end


local function downloadDocument(url)
	local c = net.UrlConnection.open(net.Url(url))
	if c == nil then
		return nil
	end

	local sf = c.stream
	if sf == nil then
		return nil
	end

	local xd = xml.Document()
	if not xd:loadFromStream(sf, "") then
		return nil
	end

	return xd
end


function main(argv)
	local server < const > = argv:get(0) -- "http://pn-tambor-ws.pistol.one:8111"
	local binPath < const > = argv:get(1) -- "$(TRAKTOR_HOME)/bin/latest/ios"
	local id < const > = argv:get(2) -- "Traktor_IOS"

	-- Get information about latest, successful, build.
	local xd = downloadDocument(server .. "/guestAuth/app/rest/builds/buildType:(id:" .. id .. "),status:SUCCESS")
	if xd == nil then
		stderr:printLn("Unable to download XML document.")
		return 1
	end

	local buildId = tonumber(xd.documentElement:getAttribute("id").value)
	local artifactsHref = xd:getSingle("/build/artifacts"):getAttribute("href").value

	-- Get last downloaded buildId.
	local currentBuildId = 0
	local xd = xml.Document()
	if xd:loadFromFile(Path(binPath .. "/build.xml")) then
		currentBuildId = tonumber(xd:getSingle("/build/buildId").value)
	end

	stdout:printLn("Current build ID : " .. currentBuildId)
	stdout:printLn(" Latest build ID : " .. buildId)

	-- In case a newer build exist we download and extract it's artifact.
	if currentBuildId < buildId then

		-- Create a file name for temporary artifact.
		local tmpPath < const > = os.writableFolderPath .. "/Traktor/Download"
		if not fileSystem:makeAllDirectories(Path(tmpPath)) then
			stderr:printLn("Unable to create temporary folder for download.")
			return 1
		end
		local tmpFile < const > = Path(tmpPath .. "/" .. Guid.create():format() .. ".zip")

		local xd = downloadDocument(server .. artifactsHref)
		local xfs = xd:get("/files/file")
		for _, xf in pairs(xfs) do
			local fileHref = xf:getSingle("content"):getAttribute("href").value

			-- Download artifact.
			local c = net.UrlConnection.open(net.Url(server .. fileHref))
			if c == nil then
				stderr:printLn("Unable to open connection to artifact.")
				return 1
			end

			local sf = c.stream
			if sf == nil then
				stderr:printLn("Unable to open stream to artifact.")
				return 1
			end

			stdout:printLn("Downloading...")
			local tf = fileSystem:open(tmpFile, File.FmWrite)
			StreamCopy(tf, sf):execute()
			tf:close()

			-- Move existing target folder, this allows us to replace Windows binaries even
			-- if target is running locally.
			if os.identifier == "windows" then
				if not fileSystem:move(
					Path(Path(binPath).pathOnly .. "/" .. Path(binPath).fileName .. "." .. currentBuildId),
					Path(binPath),
					true
				) then
					stderr:printLn("Unable to move old build.")
					return 1
				end
			else
				if not fileSystem:move(
					Path(Path(binPath).pathOnlyNoVolume .. "/" .. Path(binPath).fileName .. "." .. currentBuildId),
					Path(binPath),
					true
				) then
					stderr:printLn("Unable to move old build.")
					return 1
				end
			end
			
			-- Extract artifact.
			stdout:printLn("Extracting...")
			local zf = fileSystem:open(tmpFile, File.FmRead)
			fileSystem:mount("zip", traktor.compress.ZipVolume(zf))
			traverse(binPath, "")
			fileSystem:umount("zip")
			zf:close()

			-- Remove artifact.
			fileSystem:remove(tmpFile)
		end
	
		-- Write a new build receipt with latest information.
		local f = fileSystem:open(Path(binPath .. "/build.xml"), File.FmWrite)
		local fs = traktor.run.StreamOutput(f, Utf8Encoding())
		fs:printLn("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
		fs:printLn("<build>")
		fs:printLn("\t<buildId>" .. buildId .. "</buildId>")
		fs:printLn("</build>")
		f:close()
	else
		stdout:printLn("Up-to-date")
	end

	stdout:printLn("Done")
	return 0
end
