--[[
 TRAKTOR
 Copyright (c) 2022 Anders Pistol.

 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at https://mozilla.org/MPL/2.0/.
]]
import(traktor)

-- Create workspace from template.
--
-- WIZARD_NAME			Project name
-- WIZARD_OUTPUT_PATH	Output path
-- WIZARD_TEMPLATE_FILE	Template file

local function traverse(base, path, outputPath, rules)
	local fa = FileSystem.getInstance():find(path.pathName .. "/*.*")
	for i = 0, fa.size - 1 do
		local f = fa:get(i)
		local p = f.path
		local fn = p.fileName
		local pn = p.pathName

		if f.directory then
			if fn ~= "." and fn ~= ".." then
				if not traverse(base, p, outputPath, rules) then
					return false
				end
			end
		else
			local pa = FileSystem.getInstance():getAbsolutePath(p)
			local pr = FileSystem.getInstance():getRelativePath(pa, base)
			if pr ~= nil then
				local applyRule = nil
				for _, rule in ipairs(rules) do
					if string.match(pr.pathName, rule.pattern) ~= nil then
						if applyRule == nil or rule.transform then
							applyRule = rule
						end
					end
				end
				if applyRule ~= nil then
					local source = pa.pathName
					local target = outputPath:concat(pr).pathName

					-- Replace special tokens in target name with values from environment.
					target = string.gsub(target, "!%-%-(.*)%-%-!", function (a)
						return os:getEnvironment(a)
					end)

					-- Ensure full output path exists.
					if not run:mkdir(Path(target).pathOnly) then
						stderr:printLn("Unable to make output path \"" .. Path(target).pathOnly .. "\".")
						return false
					end

					-- Transform or copy source into target.
					if applyRule.transform then
						if run:run("-as-template \"" .. source .. "\"", target) ~= 0 then
							stderr:printLn("Unable to transform source file \"" .. source .. "\".")
							return false
						end
					else
						if not run:copy(source, target) then
							stderr:printLn("Unable to copy source file \"" .. source .. "\".")
							return false
						end
					end
				end
			else
				stderr:printLn("No relative path found")
				stderr:printLn("Base: \"" .. base.pathName .. "\"")
				stderr:printLn("File: \"" .. pa.pathName .. "\"")
				return false
			end	
		end
	end
	return true
end

function main(args)
	local WIZARD_NAME = os:getEnvironment("WIZARD_NAME")
	local WIZARD_OUTPUT_PATH = os:getEnvironment("WIZARD_OUTPUT_PATH")
	local WIZARD_TEMPLATE_FILE = os:getEnvironment("WIZARD_TEMPLATE_FILE")

	-- Load template document.
	local doc = xml.Document()
	if not doc:loadFromFile(Path(WIZARD_TEMPLATE_FILE)) then
		stderr:printLn("Unable to read template")
		return 1
	end

	-- Get all rules from template.
	local rules = {}
	local xrules = doc:get("/template/rules/rule")
	for i = 0, xrules.size - 1 do
		local xrule = xrules:get(i)
		assert (xrule ~= nil)

		local rule = {}
		rule.pattern = xrule:getChildElementByName("pattern").value
		rule.transform = (xrule:getChildElementByName("transform").value == "true")
		table.insert(rules, rule)
	end

	-- Recursively copy or transform template into target.
	local path = Path(doc:getSingle("/template/path").value)
	if not traverse(
		FileSystem.getInstance():getAbsolutePath(path),
		path,
		Path(WIZARD_OUTPUT_PATH),
		rules
	) then
		return 1
	end

	return 0
end
