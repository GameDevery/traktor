import(traktor)

function main(args)
	-- Ensure we have unittest support built in.
	if traktor.test.Case == nil then
		stderr:printLn("Traktor.Core not compiled with tests; unable to execute any tests.")
		return 1
	end

	local report = {}

	local caseTypes = traktor.TypeInfo.findAllOf(traktor.test.Case, false)
	for _, caseType in pairs(caseTypes) do
		local include = true

		-- Check filter if case should be included in suite.
		if not args.empty then
			include = false
			for _, filter in pairs(args) do
				if filter == caseType.name then
					include = true
				end
			end
		end

		if include then
			local case = caseType:createInstance()
			if case ~= nil then

				-- Execute test case, collect error messages only.
				local messages = {}
				local r = case:execute(
					nil,
					function(message)
						table.insert(messages, message)
					end
				)

				if r then
					-- stdout:printLn(caseType.name .. " [OK]")
					table.insert(report, { name = caseType.name, result = true, messages = "" })
				else
					-- stderr:printLn(caseType.name .. " [FAILED]")
					table.insert(report, { name = caseType.name, result = false, messages = messages })
				end
			else
				stderr:printLn("Unable to instantiate case \"" .. caseType.name .. "\".")
			end
		end
	end



	-- JUnit

	local testCount = 0
	local testFailures = 0
	for _, r in ipairs(report) do
		testCount = testCount + 1
		if not r.result then
			testFailures = testFailures + 1
		end
	end

	stdout:printLn("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>")
	stdout:printLn("<testsuites id=\"1\" name=\"Traktor\" tests=\"" .. testCount .. "\" failures=\"" .. testFailures .. "\" time=\"1\">")
	stdout:printLn("\t<testsuite id=\"2\" name=\"Traktor\" tests=\"" .. testCount .. "\" failures=\"" .. testFailures .. "\" time=\"1\">")

	for i, r in ipairs(report) do

		stdout:printLn("\t\t<testcase id=\"" .. i .. "\" name=\"" .. r.name .. "\" time=\"1\">")

		for _, m in ipairs(r.messages) do
			stdout:printLn("\t\t\t<failure message=\"" .. m .. "\" type=\"WARNING\">")
			stdout:printLn(m)
			stdout:printLn("\t\t\t</failure>")
		end

		stdout:printLn("\t\t</testcase>")

	end

	stdout:printLn("\t</testsuite>")
	stdout:printLn("</testsuites>")


	return 0
end
