
function OBJNAME(filePath)
	if filePath:getExtension() ~= "rc" then
		return filePath:getPathNameNoExtension() .. ".obj"
	else
		return filePath:getPathNameNoExtension() .. ".res"
	end
end

function PRODUCTNAME(solution, project, configuration)
	local format = configuration:getTargetFormat()

	local productName
	if format == "StaticLibrary" then
		productName = project:getName() .. ".lib"
	elseif format == "SharedLibrary" then
		productName = project:getName() .. ".dll"
	elseif format == "Executable" then
		productName = project:getName() .. ".exe"
	elseif format == "ExecutableConsole" then
		productName = project:getName() .. ".exe"
	end	
	assert(productName ~= nil)

	return productName
end

function DEFINE(solution, project, configuration, definition, output)
	output:print("/D" .. definition .. " ")
end

function INCLUDE(solution, project, configuration, includePaths, libraryPaths, output)
	output:print("/I " .. configuration:getName())
	for _, includePath in ipairs(includePaths) do
		output:print(" /I \"" .. includePath .. "\"")
	end
end

function CC(solution, project, configuration, architecture, filePath, outputPath, output)
	local profile = configuration:getTargetProfile()
	local format = configuration:getTargetFormat()

	if filePath:getExtension() ~= "rc" then
		if format == "StaticLibrary" then
			output:printLn(
				"\tcl " ..
				"$(CC_FLAGS_" .. profile:upper() .. "_STATIC) " ..
				"$(" .. configuration:getName():upper() .. "_INCLUDE) " ..
				"$(" .. configuration:getName():upper() .. "_DEFINES) " ..
				filePath:getPathName() .. " " ..
				"/Fo" .. outputPath
			)
		elseif format == "SharedLibrary" then
			output:printLn(
				"\tcl " ..
				"$(CC_FLAGS_" .. profile:upper() .. "_SHARED) " ..
				"$(" .. configuration:getName():upper() .. "_INCLUDE) " ..
				"$(" .. configuration:getName():upper() .. "_DEFINES) " ..
				filePath:getPathName() .. " " ..
				"/Fo" .. outputPath
			)
		elseif format == "Executable" then
			output:printLn(
				"\tcl " ..
				"$(CC_FLAGS_" .. profile:upper() .. "_EXECUTABLE) " ..
				"$(" .. configuration:getName():upper() .. "_INCLUDE) " ..
				"$(" .. configuration:getName():upper() .. "_DEFINES) " ..
				filePath:getPathName() .. " " ..
				"/Fo" .. outputPath
			)
		elseif format == "ExecutableConsole" then
			output:printLn(
				"\tcl " ..
				"$(CC_FLAGS_" .. profile:upper() .. "_EXECUTABLE_CONSOLE) " ..
				"$(" .. configuration:getName():upper() .. "_INCLUDE) " ..
				"$(" .. configuration:getName():upper() .. "_DEFINES) " ..
				filePath:getPathName() .. " " ..
				"/Fo" .. outputPath
			)
		end
	else
		if format == "StaticLibrary" then
			output:printLn(
				"\trc " ..
				"$(RC_FLAGS_" .. profile:upper() .. "_STATIC) " ..
				"/fo\"" .. outputPath .. "\" " ..
				filePath:getPathName()
			)
		elseif format == "SharedLibrary" then
			output:printLn(
				"\trc " ..
				"$(RC_FLAGS_" .. profile:upper() .. "_SHARED) " ..
				"/fo\"" .. outputPath .. "\" " ..
				filePath:getPathName()
			)
		elseif format == "Executable" then
			output:printLn(
				"\trc " ..
				"$(RC_FLAGS_" .. profile:upper() .. "_EXECUTABLE) " ..
				"/fo\"" .. outputPath .. "\" " ..
				filePath:getPathName()
			)
		elseif format == "ExecutableConsole" then
			output:printLn(
				"\trc " ..
				"$(RC_FLAGS_" .. profile:upper() .. "_EXECUTABLE_CONSOLE) " ..
				"/fo\"" .. outputPath .. "\" " ..
				filePath:getPathName()
			)
		end		
	end
end

function LINK(solution, project, configuration, architecture, sourcePath, sourceFiles, libraryPaths, libraries, externalLibraries, definitionFile, output)
	local profile = configuration:getTargetProfile()
	local format = configuration:getTargetFormat()

	if format == "StaticLibrary" then
		output:printLn(
			"\tlib " ..
			"$(LIB_FLAGS_" .. profile:upper() .. "_STATIC) " ..
			"/OUT:../" .. configuration:getName() .. "/" .. project:getName() .. ".lib " ..
			"$(" .. configuration:getName() .. "_OBJS)"
		)
	else
		local manifest = OS.getInstance():getEnvironment("MAKE_MANIFEST")
		local lo = ""

		if format ~= "StaticLibrary" then
			lo = lo .. " /LIBPATH:\"../" .. configuration:getName() .. "\""
			for _, libraryPath in ipairs(libraryPaths) do
				lo = lo .. " /LIBPATH:\"" .. libraryPath .. "\""
			end
			for _, library in ipairs(libraries) do
				lo = lo .. " " .. library .. ".lib"
			end
			for _, externalLibrary in ipairs(externalLibraries) do
				lo = lo .. " " .. externalLibrary
			end
			if definitionFile ~= nil then
				lo = lo .. " /DEF:\"" .. definitionFile:getPathName() .. "\""
			end
		end

		if format == "SharedLibrary" then
			output:printLn(
				"\tlink " ..
				"$(LINK_FLAGS_" .. profile:upper() .. "_SHARED) " ..
				"/IMPLIB:../" .. configuration:getName() .. "/" .. project:getName() .. ".lib " ..
				"/OUT:../" .. configuration:getName() .. "/" .. project:getName() .. ".dll " ..
				"$(" .. configuration:getName() .. "_OBJS) " .. 
				lo
			)
			if manifest ~= "" then
				output:printLn(
					"\tmt " ..
					"-manifest \"" .. manifest .. "\" " ..
					"-outputresource:../" .. configuration:getName() .. "/" .. project:getName() .. ".dll;2"
				)
			end
		elseif format == "Executable" then
			output:printLn(
				"\tlink " ..
				"$(LINK_FLAGS_" .. profile:upper() .. "_EXECUTABLE) " ..
				"/OUT:../" .. configuration:getName() .. "/" .. project:getName() .. ".exe " ..
				"$(" .. configuration:getName() .. "_OBJS)" ..
				lo
			)
			if manifest ~= "" then
				output:printLn(
					"\tmt " ..
					"-manifest \"" .. manifest .. "\" " ..
					"-outputresource:../" .. configuration:getName() .. "/" .. project:getName() .. ".exe;1"
				)
			end
		elseif format == "ExecutableConsole" then
			output:printLn(
				"\tlink $(LINK_FLAGS_" .. profile:upper() .. "_EXECUTABLE_CONSOLE) " ..
				"/OUT:../" .. configuration:getName() .. "/" .. project:getName() .. ".exe " ..
				"$(" .. configuration:getName() .. "_OBJS)" .. 
				lo
			)
			if manifest ~= "" then
				output:printLn(
					"\tmt " ..
					"-manifest \"" .. manifest .. "\" " ..
					"-outputresource:../" .. configuration:getName() .. "/" .. project:getName() .. ".exe;1"
				)
			end
		end
	end
end

