# This makefile is automatically generated, DO NOT EDIT!

<?--

-- Dependency scanner cache global.
local headerScanner = traktor.sb.HeaderScanner()

import(traktor)

local function split(s, delimiter)
    local result = {}
    for match in (s .. delimiter):gmatch("(.-)" .. delimiter) do
    	if match ~= "" then
        	table.insert(result, match)
        end
    end
    return result
end

local function insertLast(t, iv)
	for i, v in ipairs(t) do
		if v == iv then
			table.remove(t, i)
			break
		end
	end
	table.insert(t, iv)
end

-- Read configuration from environment.
local os = OS.getInstance():getEnvironment("MAKE_OS")
local toolchain = OS.getInstance():getEnvironment("MAKE_TOOLCHAIN")
local dialect = OS.getInstance():getEnvironment("MAKE_DIALECT")
local format = OS.getInstance():getEnvironment("MAKE_FORMAT")
local include = OS.getInstance():getEnvironment("MAKE_INCLUDE")
local architectures = split(OS.getInstance():getEnvironment("MAKE_ARCHITECTURES"), ",") -- "armv7,armv7s,arm64,i386,x86_64"

dofile(format)

local Color =
{
	Red = 31,
	Green = 32,
	Yellow = 33,
	Blue = 34,
	Magenta = 35,
	Cyan = 36
}

local function printWithColor(c, s)
	if os == "windows" then
		output:printLn("\t@echo " .. s)
	elseif os == "osx" then
		output:printLn("\t@printf \"\\e[0;" .. c .. "m" .. s .. "\\e[0m\\n\"")
	elseif os == "linux" then
		output:printLn("\t@printf '\\e[0;" .. c .. "m" .. s .. "\\e[0m\\n'")
	end
end

local function collectDependencies(
	solution,
	project,
	configuration,
	outIncludePaths,
	outLibraries,
	outLibrariesExternal,
	outLibraryPaths
)
	-- Add include paths.
	for _, includePath in pairs(configuration.includePaths) do
		local ip = Path(includePath).pathName
		if ip ~= "" then
			insertLast(outIncludePaths, ip)
		end
	end

	-- Add external libraries, ex precompiled libraries etc.
	for _, library in pairs(configuration.libraries) do
		insertLast(outLibrariesExternal, library)
	end

	-- Add library paths.
	for _, libraryPath in pairs(configuration.libraryPaths) do
		local libraryPath = Path(libraryPath)
		local libraryRelPath = fileSystem:getRelativePath(
			libraryPath,
			projectPath
		)
		local lp = ""
		if libraryRelPath ~= nil then
			lp = libraryRelPath.pathName
		else
			lp = libraryPath.pathName
		end
		if lp ~= "" then
			insertLast(outLibraryPaths, lp)
		end
	end

	-- Recurse with dependencies.
	for _, dependency in pairs(project.dependencies) do
		if isa(dependency, ProjectDependency) then
			local localSolution = solution
			local localProject = dependency.project
			local localConfig = localProject:getConfiguration(configuration.name)
			if localProject.enable then

				-- Add library.
				insertLast(outLibraries, localProject.name)

				-- Recurse with child dependencies.
				if localConfig.targetFormat == "StaticLibrary" then
					collectDependencies(
						localSolution,
						localProject,
						localConfig,
						outIncludePaths,
						outLibraries,
						outLibrariesExternal,
						outLibraryPaths
					)
				else
					-- Only add include paths when dealing with shared library dependencies.
					for _, includePath in pairs(localConfig.includePaths) do
						local ip = Path(includePath).pathName
						if ip ~= "" then
							insertLast(outIncludePaths, ip)
						end
					end
				end
			end
		elseif isa(dependency, ExternalDependency) then
			local externalSolution = dependency.solution
			local externalProject = dependency.project
			local externalConfig = externalProject:getConfiguration(configuration.name)
			if externalConfig ~= nil then

				-- Add path to library.
				if externalConfig.consumerLibraryPath ~= "" then
					local aggregateOutputPath = Path(externalSolution.aggregateOutputPath)
					local consumerLibraryPath = Path(externalConfig.consumerLibraryPath)

					local consumerRelPath = fileSystem:getRelativePath(
						aggregateOutputPath:concat(consumerLibraryPath),
						projectPath
					)

					if consumerRelPath ~= nil then
						insertLast(outLibraryPaths, consumerRelPath.pathName)
					end
				else
					local externalRelPath = fileSystem:getRelativePath(
						Path(externalSolution.rootPath .. "/" .. configuration.name),
						projectPath
					)
					if externalRelPath ~= nil then
						insertLast(outLibraryPaths, externalRelPath.pathName)
					end
				end

				-- Add library.
				if externalProject.enable then
					insertLast(outLibraries, externalProject.name)
				end

				-- Recurse with child dependencies.
				if externalConfig.targetFormat == "StaticLibrary" then
					collectDependencies(
						externalSolution,
						externalProject,
						externalConfig,
						outIncludePaths,
						outLibraries,
						outLibrariesExternal,
						outLibraryPaths
					)
				else
					-- Only add include paths when dealing with shared library dependencies.
					for _, includePath in pairs(externalConfig.includePaths) do
						local ip = Path(includePath).pathName
						if ip ~= "" then
							insertLast(outIncludePaths, ip)
						end
					end
				end
			else
				print("No such configuration \"" .. configuration.name .. "\" in external project \"" .. externalProject.name .. "\"; dependency skipped.")
			end
		end
	end
end

local function collectFiles(project, projectOrFilter, pred)
	for _, item in pairs(projectOrFilter.items) do
		if isa(item, Filter) then
			collectFiles(project, item, pred)
		else
			local files = item:getSystemFiles(project:getSourcePath())
			if os == "windows" then
				for _, file in pairs(files) do
					pred(file)
				end
			else
				for _, file in pairs(files) do
					pred(Path(file.pathNameNoVolume))
				end
			end
		end
	end
end

------------------------------------------------

if include ~= nil then
	if dialect == "nmake" then
		output:printLn("!INCLUDE " .. include)
	elseif dialect == "make" then
		output:printLn("include " .. include)
	end
	output:printLn("")
end

local configurations = project.configurations
local sourcePath = Path(project.sourcePath)

-- Scan configurations.
local includePaths = {}
local libraries = {}
local externalLibraries = {}
local libraryPaths = {}
for i, configuration in pairs(configurations) do
	includePaths[i] = {}
	libraries[i] = {}
	externalLibraries[i] = {}
	libraryPaths[i] = {}
	collectDependencies(
		solution,
		project,
		configuration,
		includePaths[i],
		libraries[i],
		externalLibraries[i],
		libraryPaths[i]
	)
end

-- Collect input files.
local sourceFiles = {}
local resourceFiles = {}
local definitionFile = nil
collectFiles(
	project,
	project,
	function(file)
		local ext = file.extension
		if ext == "c" or ext == "cc" or ext == "cpp" or ext == "m" or ext == "mm" or ext == "rc" then
			table.insert(sourceFiles, file)
		elseif ext == "xdi" or ext == "image" or ext == "png" or ext == "lua" or ext == "js" or ext == "css" or ext == "cgv" or ext == "cgf" then
			table.insert(resourceFiles, file)
		elseif ext == "def" then
			definitionFile = file
		end
	end
)

-- Ensure definition file path is relative to project.
if definitionFile ~= nil then
	definitionFile = fileSystem:getRelativePath(definitionFile, projectPath)
	assert (definitionFile ~= nil)
end

------------------------------------------------

-- Include paths.
for i, configuration in pairs(configurations) do
	output:print(configuration.name:upper() .. "_INCLUDE=")
	INCLUDE(solution, project, configuration, includePaths[i], libraryPaths[i], output)
	output:printLn("")
end

------------------------------------------------
output:printLn("")

-- Definitions.
for i, configuration in pairs(configurations) do
	output:print(configuration.name:upper() .. "_DEFINES=")
	for _, definition in pairs(configuration.definitions) do
		local def0 = string.sub(definition, 1, 1)
		if not (def0 == "'" or def0 == "`") then
			DEFINE(solution, project, configuration, definition, output)
		else
			output:print(definition)
		end
	end
	output:printLn("")
end

------------------------------------------------
output:printLn("")

-- "all" target.
output:printLn(".PHONY: all")
output:print("all :")
for i, configuration in pairs(configurations) do
	output:print(" " .. configuration.name)
end
output:printLn("")
output:printLn("\t@echo all")

------------------------------------------------
output:printLn("")

-- "clean" target.
output:printLn(".PHONY: clean")
output:printLn("clean :")
for i, configuration in pairs(configurations) do
	if #architectures > 0 then
		for _, a in ipairs(architectures) do
			if os == "linux" or os == "osx" then
				output:printLn("\trm -Rf " .. configuration.name .. "_" .. a)
			elseif os == "windows" then
				output:printLn("\tdel /F /Q " .. configuration.name .. "_" .. a)
			end			
		end
	else
		if os == "linux" or os == "osx" then
			output:printLn("\trm -Rf " .. configuration.name)
		elseif os == "windows" then
			output:printLn("\tdel /F /Q " .. configuration.name)
		end
	end
end

------------------------------------------------
output:printLn("")

-- "install" target.
output:printLn(".PHONY: install")
output:printLn("install :")
for i, configuration in pairs(configurations) do
	for _, aggregationItem in pairs(configuration.aggregationItems) do
		local aggregateOutputPath = Path(solution.aggregateOutputPath)
		local sourceFile = Path("../" .. configuration.name):concat(Path(aggregationItem.sourceFile))
		local targetPath = aggregateOutputPath:concat(Path(aggregationItem.targetPath))
		if os == "windows" then
			output:printLn("\t@xcopy /D /F /R /Y /I \"" .. sourceFile.pathName .. "\" \"" .. targetPath.pathName .. "\\\"")
		elseif os == "osx" or os == "linux" then
			printWithColor(Color.Blue, "Copy " .. sourceFile.pathNameNoVolume .. " to " .. targetPath.pathNameNoVolume)
			output:printLn("\t@mkdir -p \"" .. targetPath.pathNameNoVolume .. "/\"")
			output:printLn("\t@-cp -Rf " .. sourceFile.pathNameNoVolume .. " \"" .. targetPath.pathNameNoVolume .. "/\"")
		end
	end
end

------------------------------------------------
if #architectures > 0 then

	------------------------------------------------
	output:printLn("")

	-- Architecture targets.
	for i, configuration in pairs(configurations) do
		local profile = configuration.targetProfile
		local format = configuration.targetFormat
		local productName = PRODUCTNAME(solution, project, configuration)

		output:printLn(".PHONY: " .. configuration.name)
		output:printLn(configuration.name .. " : \\")
		output:printLn("\t../" .. configuration.name .. "/" .. productName)
		output:printLn("")

		output:print("../" .. configuration.name .. "/" .. productName .. " :")
		for _, a in ipairs(architectures) do
			output:printLn(" \\")
			output:print("\t../" .. configuration.name .. "_" .. a .. "/" .. productName)
		end
		output:printLn("")

		if dialect == "nmake" then
			output:printLn("\t-mkdir \"../" .. configuration.name .. "\" 1>nul 2>&1")
		elseif dialect == "make" then
			if os == "windows" then
				output:printLn("\t-mkdir \"../" .. configuration.name .. "\" 1>nul 2>&1")
			else
				output:printLn("\t@mkdir -p ../" .. configuration.name)
			end
		end

		if format == "StaticLibrary" then
			printWithColor(Color.Cyan, "Merging architectures into " .. configuration.name .. "/" .. productName)

			local ws = ""
			if toolchain == "gcc" or toolchain == "clang" then
				ws = " "
			end

			output:print("\t@$(AR) $(AR_FLAGS_" .. profile:upper() .. "_STATIC) $(AR_FLAG_OUTPUT)" .. ws .. "../" .. configuration.name .. "/" .. productName)
			for _, a in ipairs(architectures) do
				output:print(" ../" ..configuration.name .. "_" .. a .. "/" .. productName)
			end

			output:printLn("")
		end

		for _, aggregationItem in pairs(configuration.aggregationItems) do
			local aggregateOutputPath = Path(solution.aggregateOutputPath)
			local sourceFile = Path("../" .. configuration.name):concat(Path(aggregationItem.sourceFile))
			local targetPath = aggregateOutputPath:concat(Path(aggregationItem.targetPath))

			if os == "windows" then
				output:printLn("\t@xcopy /D /F /R /Y /I \"" .. sourceFile.pathName .. "\" \"" .. targetPath.pathName .. "\\\"")
			elseif os == "osx" or os == "linux" then
				printWithColor(Color.Yellow, "Copy " .. sourceFile.pathNameNoVolume .. " to " .. targetPath.pathNameNoVolume)
				output:printLn("\t@mkdir -p \"" .. targetPath.pathNameNoVolume .. "/\"")
				output:printLn("\t@-cp -Rf " .. sourceFile.pathNameNoVolume .. " \"" .. targetPath.pathNameNoVolume .. "/\"")
			end
		end

		output:printLn("")
	end

	------------------------------------------------

	-- Link targets.
	for i, configuration in pairs(configurations) do
		local profile = configuration.targetProfile
		local format = configuration.targetFormat

		for _, a in ipairs(architectures) do
			output:print(configuration.name .. "_" .. a .. "_OBJS=")
			for _, file in ipairs(sourceFiles) do
				local f = fileSystem:getRelativePath(file, sourcePath)
				assert (f ~= nil)
				output:printLn(" \\")
				output:print("\t" .. configuration.name .. "_" .. a .. "/" .. OBJNAME(f))
			end
			output:printLn("")
			output:printLn("")

			output:print(configuration.name .. "_" .. a .. "_PROJECTS=")
			for _, dependency in pairs(project.dependencies) do
				if isa(dependency, ProjectDependency) then
					local c = dependency.project:getConfiguration(configuration.name)
					if c ~= nil then
						output:printLn(" \\")
						output:print("\t../" .. configuration.name .. "_" .. a .. "/" .. PRODUCTNAME(solution, dependency.project, c))
					end
				end
			end
			output:printLn("")
			output:printLn("")

			output:printLn(".PHONY: " .. configuration.name .. "_" .. a)
			output:printLn(configuration.name .. "_" .. a .. " : \\")
			output:printLn("\t../" .. configuration.name .. "_" .. a .. "/" .. PRODUCTNAME(solution, project, configuration))

			output:printLn("")

			output:printLn("../" .. configuration.name .. "_" .. a .. "/" .. PRODUCTNAME(solution, project, configuration) .. " : \\")
			output:printLn("\t$(" .. configuration.name .. "_" .. a .. "_OBJS) \\")
			output:printLn("\t$(" .. configuration.name .. "_" .. a .. "_PROJECTS)")

			if format == "StaticLibrary" then
				printWithColor(Color.Yellow, "Archiving " .. project.name .. " (" .. a .. ")...")
			else
				printWithColor(Color.Yellow, "Linking " .. project.name .. " (" .. a .. ")...")
			end

			if dialect == "nmake" then
				output:printLn("\t-@mkdir \"../" .. configuration.name .. "_" .. a .. "\" 1>nul 2>&1")
			elseif dialect == "make" then
				if os == "windows" then
					output:printLn("\t-mkdir \"../" .. configuration.name .. "_" .. a .. "\" 1>nul 2>&1")
				else
					output:printLn("\t@mkdir -p ../" .. configuration.name .. "_" .. a)
				end
			end

			LINK(
				solution,
				project,
				configuration,
				a,
				sourcePath,
				sourceFiles,
				libraryPaths[i],
				libraries[i],
				externalLibraries[i],
				definitionFile,
				output
			)

			output:printLn("")
		end
	end

else -- No architectures

	------------------------------------------------
	output:printLn("")

	-- Link targets.
	for i, configuration in pairs(configurations) do
		local profile = configuration.targetProfile
		local format = configuration.targetFormat

		output:print(configuration.name .. "_OBJS=")
		for _, file in ipairs(sourceFiles) do
			local f = fileSystem:getRelativePath(file, sourcePath)
			assert (f ~= nil)
			output:printLn(" \\")
			output:print("\t" .. configuration.name .. "/" .. OBJNAME(f))
		end
		output:printLn("")
		output:printLn("")

		output:print(configuration.name .. "_PROJECTS=")
		for _, dependency in pairs(project.dependencies) do
			if isa(dependency, ProjectDependency) then
				local c = dependency.project:getConfiguration(configuration.name)
				if c ~= nil then
					output:printLn(" \\")
					output:print("\t../" .. configuration.name .. "/" .. PRODUCTNAME(solution, dependency.project, c))
				end
			end
		end
		output:printLn("")
		output:printLn("")

		output:printLn(".PHONY: " .. configuration.name)
		output:printLn(configuration.name .. " : \\")
		output:printLn("\t../" .. configuration.name .. "/" .. PRODUCTNAME(solution, project, configuration))

		output:printLn("")

		output:printLn("../" .. configuration.name .. "/" .. PRODUCTNAME(solution, project, configuration) .. " : \\")
		output:printLn("\t$(" .. configuration.name .. "_OBJS) \\")
		output:printLn("\t$(" .. configuration.name .. "_PROJECTS)")

		if format == "StaticLibrary" then
			printWithColor(Color.Yellow, "Archiving " .. project.name .. "...")
		else
			printWithColor(Color.Yellow, "Linking " .. project.name .. "...")
		end

		if dialect == "nmake" then
			output:printLn("\t-@mkdir \"../" .. configuration.name .. "\" 1>nul 2>&1")
		elseif dialect == "make" then
			if os == "windows" then
				output:printLn("\t-mkdir \"../" .. configuration.name .. "\" 1>nul 2>&1")
			else
				output:printLn("\t@mkdir -p ../" .. configuration.name)
			end
		end

		LINK(
			solution,
			project,
			configuration,
			nil,
			sourcePath,
			sourceFiles,
			libraryPaths[i],
			libraries[i],
			externalLibraries[i],
			definitionFile,
			output
		)

		for _, aggregationItem in pairs(configuration.aggregationItems) do
			local aggregateOutputPath = Path(solution.aggregateOutputPath)
			local sourceFile = Path("../" .. configuration.name):concat(Path(aggregationItem.sourceFile))
			local targetPath = aggregateOutputPath:concat(Path(aggregationItem.targetPath))

			if os == "windows" then
				output:printLn("\t@xcopy /D /F /R /Y /I \"" .. sourceFile.pathName .. "\" \"" .. targetPath.pathName .. "\\\"")
			elseif os == "osx" or os == "linux" then
				printWithColor(Color.Yellow, "Copy " .. sourceFile.pathNameNoVolume .. " to " .. targetPath.pathNameNoVolume)
				output:printLn("\t@mkdir -p \"" .. targetPath.pathNameNoVolume .. "/\"")
				output:printLn("\t@-cp -Rf " .. sourceFile.pathNameNoVolume .. " \"" .. targetPath.pathNameNoVolume .. "/\"")
			end
		end

		output:printLn("")
	end
end

------------------------------------------------

-- Resource targets.

for i, configuration in pairs(configurations) do
	for _, file in ipairs(resourceFiles) do
		local f1 = fileSystem:getRelativePath(file, projectPath)
		assert (f1 ~= nil)

		local inputFileNoExt = f1.pathNameNoExtension
		local inputFile = f1.pathName
		local outputFileNoExt = configuration.name .. "/Resources/" .. file.fileNameNoExtension
		local outputFileH = outputFileNoExt .. ".h"

		output:printLn(outputFileH .. " : \\")
		output:printLn("\t" .. inputFile)

		-- \hack Compile PS3/CG embedded shaders.
		local ext = f1.extension
		if ext == "cgv" then
			local intermediateFile = configuration.name .. "/" .. file.fileNameNoExtension .. ".vpo"
			printWithColor(Color.Magenta, "Compiling vertex shader " .. file.fileNameNoExtension .. "...")
			output:printLn("\t@$(CGC) -profile sce_vp_rsx -o \"" .. intermediateFile .. "\" \"" .. inputFile .. "\"")
			inputFile = intermediateFile
		elseif ext == "cgf" then
			local intermediateFile = configuration.name .. "/" .. file.fileNameNoExtension .. ".fpo"
			printWithColor(Color.Magenta, "Compiling fragment shader " .. file.fileNameNoExtension .. "...")
			output:printLn("\t@$(CGC) -profile sce_fp_rsx -o \"" .. intermediateFile .. "\" \"" .. inputFile .. "\"")
			inputFile = intermediateFile
		end

		printWithColor(Color.Magenta, "Converting " .. file.fileName .. "...")
		if dialect == "nmake" then
			output:printLn("\t-@mkdir \"$(@D)\" 1>nul 2>&1")
		elseif dialect == "make" then
			if os == "windows" then
				output:printLn("\t-mkdir \"$(@D:\\=)\"")
			else
				output:printLn("\t@mkdir -p $(@D:\\=)")
			end
		end

		output:printLn("\t-@$(BINARY_INCLUDE) " .. inputFile .. " $@ c_Resource" .. file.fileNameNoExtension)
		output:printLn("")
	end
end

------------------------------------------------

-- Unit targets.
for i, configuration in pairs(configurations) do

	headerScanner:removeAllIncludePaths()
	for _, ip in ipairs(includePaths[i]) do
		headerScanner:addIncludePath(ip)
	end

	for index, file in ipairs(sourceFiles) do
		local headers = headerScanner:get(file.pathName, projectPath.pathName)

		local f = fileSystem:getRelativePath(file, sourcePath)
		assert (f ~= nil)

		local f1 = fileSystem:getRelativePath(file, projectPath)
		assert (f1 ~= nil)

		if #architectures > 0 then
			for _, a in ipairs(architectures) do
				output:printLn(configuration.name .. "_" .. a .. "/" .. OBJNAME(f) .. " : \\")
				output:print("\t" .. f1.pathName)
				for _, dep in pairs(headers) do
					output:printLn(" \\")
					output:print("\t")
					output:print(dep)
				end

				-- Add resource builds as dependency to all targets to ensure
				-- resources are built first and always.
				for _, file in ipairs(resourceFiles) do
					output:printLn(" \\")
					output:print("\t" .. configuration.name .. "/Resources/" .. file.fileNameNoExtension .. ".h")
				end		

				output:printLn("")

				printWithColor(Color.Magenta, "[" .. index .. "/" .. #sourceFiles .. "] " .. f.fileName .. " (" .. a .. ")...")

				if dialect == "nmake" then
					output:printLn("\t-@mkdir \"$(@D)\" 1>nul 2>&1")
				elseif dialect == "make" then
					if os == "windows" then
						output:printLn("\t-mkdir \"$(@D:\\=)\"")
					else
						output:printLn("\t@mkdir -p $(@D:\\=)")
					end
				end

				CC(
					solution,
					project,
					configuration,
					a,
					f1,
					"$@",
					output
				)

				output:printLn("")
			end
		else
			output:printLn(configuration.name .. "/" .. OBJNAME(f) .. " : \\")
			output:print("\t" .. f1.pathName)
			for _, dep in pairs(headers) do
				output:printLn(" \\")
				output:print("\t")
				output:print(dep)
			end

			-- Add resource builds as dependency to all targets to ensure
			-- resources are built first and always.
			for _, file in ipairs(resourceFiles) do
				output:printLn(" \\")
				output:print("\t" .. configuration.name .. "/Resources/" .. file.fileNameNoExtension .. ".h")
			end		

			output:printLn("")

			printWithColor(Color.Magenta, "[" .. index .. "/" .. #sourceFiles .. "] " .. f.fileName .. "...")

			if dialect == "nmake" then
				output:printLn("\t-@mkdir \"$(@D)\" 1>nul 2>&1")
			elseif dialect == "make" then
				if os == "windows" then
					output:printLn("\t-mkdir \"$(@D:\\=)\"")
				else
					output:printLn("\t@mkdir -p $(@D:\\=)")
				end
			end

			CC(
				solution,
				project,
				configuration,
				nil,
				f1,
				"$@",
				output
			)

			output:printLn("")
		end
	end
end

--?>
