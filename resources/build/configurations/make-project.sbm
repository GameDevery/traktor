# This makefile is automatically generated, DO NOT EDIT!

<?--

import(traktor)

-- Read configuration from environment.
local os = OS.getInstance():getEnvironment("MAKE_OS")
local dialect = OS.getInstance():getEnvironment("MAKE_DIALECT")
local format = OS.getInstance():getEnvironment("MAKE_FORMAT")
local include = OS.getInstance():getEnvironment("MAKE_INCLUDE")

dofile(format)

local function printWithColor(c, s)
	if os == "windows" then
		output:printLn("\t@echo " .. s)
	elseif os == "osx" then
		output:printLn("\t@printf \"\\e[0;" .. c .. "m" .. s .. "\\e[0m\\n\"")
	elseif os == "linux" then
		output:printLn("\t@printf '\\e[0;" .. c .. "m" .. s .. "\\e[0m\\n'")
	end
end

local function insertLast(t, iv)
	for i, v in ipairs(t) do
		if v == iv then
			table.remove(t, i)
			break
		end
	end
	table.insert(t, iv)
end

local function collectDependencies(solution, project, configuration, outIncludePaths, outLibraries, outLibrariesExternal, outLibraryPaths)
	-- Add include paths.
	local includePaths = configuration:getIncludePaths()
	for i = 0, includePaths:size() - 1 do
		insertLast(outIncludePaths, includePaths:get(i))
	end

	-- Add libraries.
	local libraries = configuration:getLibraries()
	for i = 0, libraries:size() - 1 do
		insertLast(outLibrariesExternal, libraries:get(i))
	end

	-- Add library paths.
	local libraryPaths = configuration:getLibraryPaths()
	for i = 0, libraryPaths:size() - 1 do
		local libraryRelPath = fileSystem:getRelativePath(
			Path(libraryPaths:get(i)),
			projectPath
		)
		if libraryRelPath ~= nil then
			insertLast(outLibraryPaths, libraryRelPath:getPathName())
		else
			insertLast(outLibraryPaths, libraryPaths:get(i))
		end
	end

	-- Recurse with dependencies.
	local dependencies = project:getDependencies()
	for i = 0, dependencies:size() - 1 do
		local dep = dependencies:get(i)
		if isa(dep, ProjectDependency) then
			local localSolution = solution
			local localProject = dep:getProject()
			local localConfig = localProject:getConfiguration(configuration:getName())
			if localProject:getEnable() then
				insertLast(outLibraries, localProject:getName())
				collectDependencies(
					localSolution,
					localProject,
					localConfig,
					outIncludePaths,
					outLibraries,
					outLibrariesExternal,
					outLibraryPaths
				)
			end
		elseif isa(dep, ExternalDependency) then
			local externalSolution = dep:getSolution()
			local externalProject = dep:getProject()
			local externalConfig = externalProject:getConfiguration(configuration:getName())
			if externalProject:getEnable() then
				local externalRelPath = fileSystem:getRelativePath(
					Path(externalSolution:getRootPath() .. "/" .. configuration:getName()),
					projectPath
				)
				insertLast(outLibraryPaths, externalRelPath:getPathName())
				insertLast(outLibraries, externalProject:getName())
				collectDependencies(
					externalSolution,
					externalProject,
					externalConfig,
					outIncludePaths,
					outLibraries,
					outLibrariesExternal,
					outLibraryPaths
				)
			end
		end
	end
end

local function collectFiles(project, projectOrFilter, pred, outFiles)
	local items = projectOrFilter:getItems()
	for i = 0, items:size() - 1 do
		local item = items:get(i)
		if isa(item, Filter) then
			collectFiles(project, item, pred, outFiles)
		else
			local files = item:getSystemFiles(project:getSourcePath())
			for i = 0, files:size() - 1 do
				local file = files:get(i)
				if os ~= "windows" then
					file = Path(files:get(i):getPathNameNoVolume())
				end
				if pred(file) then
					table.insert(outFiles, file)
				end
			end
		end
	end
end

local function copyTable(t, s)
	for k, v in pairs(s) do
		t[k] = v
	end
end

local function scanHeaderDependencies(cache, includePaths, file, outDependencies, outMissingDependencies)
	if not fileSystem:exist(file) then return end

	-- Check if already cached.
	local fpn = file:getPathName()
	if cache[fpn] ~= nil then
		copyTable(outDependencies, cache[fpn].dependencies)
		copyTable(outMissingDependencies, cache[fpn].missing)
		return
	end

	-- Scan for dependencies in files.
	local fs = fileSystem:open(file, File.FmRead)
	if fs == nil then return end

	local sr = StringReader(BufferedStream(fs), AnsiEncoding())
	while true do
		local s = sr:readLine()
		if s == nil then break end
		local p = s:match("#include.*\"(.*)\"") -- or s:match("#include.*<(.*)>")
		if p ~= nil then
			local found = false
			for _, ip in ipairs(includePaths) do
				local ipp = Path(ip .. "/" .. p):normalized()
				if fileSystem:exist(ipp) then
					if outDependencies[ipp:getPathName()] ~= true then
						outDependencies[ipp:getPathName()] = true
						scanHeaderDependencies(cache, includePaths, ipp, outDependencies, outMissingDependencies)
					end
					found = true
					break
				end
			end
			if not found then
				local ipp = Path(file:getPathOnly() .. "/" .. p):normalized()
				if fileSystem:exist(ipp) then
					if outDependencies[ipp:getPathName()] ~= true then
						outDependencies[ipp:getPathName()] = true
						scanHeaderDependencies(cache, includePaths, ipp, outDependencies, outMissingDependencies)
					end
					found = true
				end
			end
			if not found then
				outMissingDependencies[p] = true
			end
		end
	end

	fs:close()

	-- Store in cache.
	local c = {}
	c.dependencies = {}
	c.missing = {}
	copyTable(c.dependencies, outDependencies)
	copyTable(c.missing, outMissingDependencies)
	cache[fpn] = c
end

------------------------------------------------

if include ~= nil then
	if dialect == "nmake" then
		output:printLn("!INCLUDE " .. include)
	elseif dialect == "make" then
		output:printLn("include " .. include)
	end
	output:printLn("")
end

local configurations = project:getConfigurations()
local sourcePath = Path(project:getSourcePath())

-- Scan configurations.
local includePaths = {}
local libraries = {}
local externalLibraries = {}
local libraryPaths = {}
for i = 0, configurations:size() - 1 do
	includePaths[i] = {}
	libraries[i] = {}
	externalLibraries[i] = {}
	libraryPaths[i] = {}
	collectDependencies(
		solution,
		project,
		configurations:get(i),
		includePaths[i],
		libraries[i],
		externalLibraries[i],
		libraryPaths[i]
	)
end

-- Collect source files.
local sourceFiles = {}
collectFiles(
	project,
	project,
	function(file)
		local ext = file:getExtension()
		return ext == "c" or ext == "cc" or ext == "cpp" or ext == "m" or ext == "mm" 
	end,
	sourceFiles
)

-- Collect resource files.
local resourceFiles = {}
collectFiles(
	project,
	project,
	function(file)
		local ext = file:getExtension()
		return ext == "xdi" or ext == "image" or ext == "png" or ext == "lua"
	end,
	resourceFiles
)

------------------------------------------------

-- Include paths.
for i = 0, configurations:size() - 1 do
	local configuration = configurations:get(i)
	output:print(configuration:getName():upper() .. "_INCLUDE=")

	INCLUDE(solution, project, configuration, includePaths[i], libraryPaths[i], output)

	output:printLn("")
end

------------------------------------------------
output:printLn("")

-- Definitions.
for i = 0, configurations:size() - 1 do
	local configuration = configurations:get(i)
	output:print(configuration:getName():upper() .. "_DEFINES=")

	local definitions = configuration:getDefinitions()
	for j = 0, definitions:size() - 1 do
		local definition = definitions:get(j)
		local def0 = string.sub(definition, 1, 1)
		if not (def0 == "'" or def0 == "`") then
			DEFINE(solution, project, configuration, definition, output)
		else
			output:print(definition)
		end
	end

	output:printLn("")
end

------------------------------------------------
output:printLn("")

-- "all" target.
output:printLn(".PHONY: all")
output:print("all :")
for i = 0, configurations:size() - 1 do
	local configuration = configurations:get(i)
	output:print(" " .. configuration:getName())
end
output:printLn("")
output:printLn("\t@echo all")

------------------------------------------------
output:printLn("")

-- "clean" target.
output:printLn(".PHONY: clean")
output:printLn("clean :")
for i = 0, configurations:size() - 1 do
	local configuration = configurations:get(i)
	if os == "linux" or os == "osx" then
		output:printLn("\trm -Rf " .. configuration:getName())
	elseif os == "windows" then
		output:printLn("\tdel /F /Q " .. configuration:getName())
	end
end

------------------------------------------------
output:printLn("")

-- "install" target.
output:printLn(".PHONY: install")
output:printLn("install :")
for i = 0, configurations:size() - 1 do
	local configuration = configurations:get(i)
	local aggregationItems = configuration:getAggregationItems()
	for i = 0, aggregationItems:size() - 1 do
		local aggregationItem = aggregationItems:get(i)
		local sourceFile = aggregationItem:getSourceFile()
		local targetPath = aggregationItem:getTargetPath()

		sourceFile = Path("../" .. configuration:getName()):concat(Path(sourceFile))

		if os == "windows" then
			targetPath = Path(targetPath)
			output:printLn("\txcopy /D /F /R /Y /I \"" .. sourceFile:getPathName() .. "\" \"" .. targetPath:getPathName() .. "\\\"")
		elseif os == "osx" or os == "linux" then
			printWithColor(35, "Copy " .. sourceFile:getPathNameNoVolume() .. " to " .. targetPath)
			output:printLn("\t@mkdir -p \"" .. targetPath .. "/\"")
			output:printLn("\t@-cp -Rf " .. sourceFile:getPathNameNoVolume() .. " \"" .. targetPath .. "/\"")
		end
	end
end

------------------------------------------------
output:printLn("")

-- Link targets.
for i = 0, configurations:size() - 1 do
	local configuration = configurations:get(i)
	local profile = configuration:getTargetProfile()
	local format = configuration:getTargetFormat()

	output:print(configuration:getName() .. "_OBJS=")
	for _, file in ipairs(sourceFiles) do
		local f = fileSystem:getRelativePath(file, sourcePath)
		assert (f ~= nil)
		output:printLn(" \\")
		output:print("\t" .. configuration:getName() .. "/" .. OBJNAME(f))
	end
	output:printLn("")

	output:printLn(configuration:getName() .. " : \\")
	output:printLn("\t$(" .. configuration:getName() .. "_OBJS)")

	printWithColor(35, "Assembling " .. project:getName() .. "...")

	if dialect == "nmake" then
		output:printLn("\t-@mkdir \"../" .. configuration:getName() .. "\" 1>nul 2>&1")
	elseif dialect == "make" then
		if os == "windows" then
			output:printLn("\t-mkdir \"../" .. configuration:getName() .. "\" 1>nul 2>&1")
		else
			output:printLn("\t@mkdir -p ../" .. configuration:getName())
		end
	end

	LINK(solution, project, configuration, libraryPaths[i], libraries[i], externalLibraries[i], output)

	local aggregationItems = configuration:getAggregationItems()
	for i = 0, aggregationItems:size() - 1 do
		local aggregationItem = aggregationItems:get(i)
		local sourceFile = aggregationItem:getSourceFile()
		local targetPath = aggregationItem:getTargetPath()

		sourceFile = Path("../" .. configuration:getName()):concat(Path(sourceFile))

		if os == "windows" then
			targetPath = Path(targetPath)
			output:printLn("\txcopy /D /F /R /Y /I \"" .. sourceFile:getPathName() .. "\" \"" .. targetPath:getPathName() .. "\\\"")
		elseif os == "osx" or os == "linux" then
			printWithColor(35, "Copy " .. sourceFile:getPathNameNoVolume() .. " to " .. targetPath)
			output:printLn("\t@mkdir -p \"" .. targetPath:getPathNameNoVolume() .. "/\"")
			output:printLn("\t@cp -Rf " .. sourceFile:getPathNameNoVolume() .. " \"" .. targetPath .. "/\"")
		end
	end

	output:printLn("")
end

------------------------------------------------

-- Resource targets.

for i = 0, configurations:size() - 1 do
	local configuration = configurations:get(i)
	for _, file in ipairs(resourceFiles) do
		local f1 = fileSystem:getRelativePath(file, projectPath)
		assert (f1 ~= nil)

		output:printLn(configuration:getName() .. "/Resources/" .. file:getFileNameNoExtension() .. ".h : \\")
		output:printLn("\t" .. f1:getPathName())

		printWithColor(35, "Converting " .. file:getFileName() .. "...")
		if dialect == "nmake" then
			output:printLn("\t-@mkdir \"$(@D)\" 1>nul 2>&1")
		elseif dialect == "make" then
			if os == "windows" then
				output:printLn("\t-mkdir \"$(@D:\\=)\"")
			else
				output:printLn("\t@mkdir -p $(@D:\\=)")
			end
		end

		if dialect == "nmake" then
			output:printLn("\t@$(BINARY_INCLUDE) $** $@ c_Resource" .. file:getFileNameNoExtension())
		elseif dialect == "make" then
			output:printLn("\t@$(BINARY_INCLUDE) $^ $@ c_Resource" .. file:getFileNameNoExtension())
		end

		output:printLn("")
	end
end

------------------------------------------------

-- Unit targets.
for i = 0, configurations:size() - 1 do
	local configuration = configurations:get(i)
	local cache = {}

	for _, file in ipairs(sourceFiles) do
		local deps = {}
		local missing = {}
		scanHeaderDependencies(cache, includePaths[i], file, deps, missing)

		local f = fileSystem:getRelativePath(file, sourcePath)
		assert (f ~= nil)

		local f1 = fileSystem:getRelativePath(file, projectPath)
		assert (f1 ~= nil)

		output:printLn(configuration:getName() .. "/" .. OBJNAME(f) .. " : \\")
		output:print("\t" .. f1:getPathName())
		for dep, _ in pairs(deps) do
			local f2 = fileSystem:getRelativePath(Path(dep), projectPath)
			assert (f2 ~= nil)
			output:printLn(" \\")
			output:print("\t" .. f2:getPathName())
		end
		for dep, _ in pairs(missing) do
			for _, file in ipairs(resourceFiles) do
				if dep == "Resources/" .. file:getFileNameNoExtension() .. ".h" then
					output:printLn(" \\")
					output:print("\t" .. configuration:getName() .. "/Resources/" .. file:getFileNameNoExtension() .. ".h")
				end
			end
		end
		output:printLn("")

		printWithColor(35, "Compiling " .. f:getFileName() .. "...")

		if dialect == "nmake" then
			output:printLn("\t-@mkdir \"$(@D)\" 1>nul 2>&1")
		elseif dialect == "make" then
			if os == "windows" then
				output:printLn("\t-mkdir \"$(@D:\\=)\"")
			else
				output:printLn("\t@mkdir -p $(@D:\\=)")
			end
		end

		CC(solution, project, configuration, f1, "$@", output)

		output:printLn("")
	end
end

--?>
