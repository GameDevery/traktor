<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="1">
	<dependencies/>
	<text>
	<![CDATA[

m_camera = nil
m_cameraPosition = nil
m_cameraRotation = nil

m_player = nil
m_playerPosition = nil
m_playerRotation = nil
m_playerDirection = nil

m_gridX = 0
m_gridZ = 0

function initialize()

	m_camera = world:getEntity("Camera")
	m_cameraPosition = m_camera:getTransform():translation()
	m_cameraRotation = Quaternion(0, 1.2, 0)
	
	m_playerPosition = Vector4(
		m_cameraPosition:x(),
		0.5,
		m_cameraPosition:z()
	)
	m_playerRotation = 0
	m_playerDirection = Vector4(0, 0, 1, 0)

	m_player = world:createEntity("Player")
	m_player:setTransform(Transform(
		m_playerPosition,
		Quaternion(0, 0, 0)
	))
	world:addEntity(m_player)
end

function update(control, info)
	local dT = info:getSimulationDeltaTime()
	local im = environment:getInput():getInputMapping()
	
	
	local gridSizeX = 14
	local gridSizeZ = 8
	local gridViewCenterX = m_gridX * gridSizeX
	local gridViewCenterZ = m_gridZ * gridSizeZ
	local gridViewMinX = gridViewCenterX - gridSizeX / 2
	local gridViewMinZ = gridViewCenterZ - gridSizeZ / 2
	local gridViewMaxX = gridViewCenterX + gridSizeX / 2
	local gridViewMaxZ = gridViewCenterZ + gridSizeZ / 2
	
	
	m_cameraPosition = Vector4(
		gridViewCenterX,
		m_cameraPosition:y(),
		gridViewCenterZ - 3
	)
	
	
	m_camera:setTransform(Transform(
		m_cameraPosition,
		m_cameraRotation
	))

	local dm = im:getStateValue("STATE_PLAYER_MOVE")
	local dr = im:getStateValue("STATE_PLAYER_ROTATE")

	-- Update player controller.
	local motionVelocity = Vector4(dr * 4, 0, -dm * 4);
	local velocity = m_player:getBody():getLinearVelocity()
	m_player:getBody():addLinearImpulse(
		Vector4(
			(motionVelocity:x() - velocity:x()) * dT,
			0,
			(motionVelocity:z() - velocity:z()) * dT
		),
		false
	)

	-- Calculate player orientation.
	if velocity:length() > 0.1 then

		m_playerDirection = velocity:normalized():mulf(0.1):add(m_playerDirection:mulf(0.9))
		m_playerRotation = math.atan2(-m_playerDirection:z(), m_playerDirection:x()) + 3.142/2

--		local rotation = math.atan2(-velocity:z(), velocity:x()) + 3.142/2
--		m_playerRotation = m_playerRotation * 0.9 + rotation * 0.1
	end

	-- Force angular velocity to be zero; don't want to tip over.
	-- Also ensure orientation is fixed.
	m_player:getBody():setAngularVelocity(Vector4(0, 0, 0, 0))
	local bodyTransform = m_player:getBody():getTransform()
	m_player:getBody():setTransform(Transform(
		bodyTransform:translation(),
		Quaternion(m_playerRotation, 0, 0)
	))

	-- Update grid position from player's current position.
	m_playerPosition = m_player:getTransform():translation()
	if m_playerPosition:x() < gridViewMinX then
		m_gridX = m_gridX - 1
	end
	if m_playerPosition:x() > gridViewMaxX then
		m_gridX = m_gridX + 1
	end
	if m_playerPosition:z() < gridViewMinZ then
		m_gridZ = m_gridZ - 1
	end
	if m_playerPosition:z() > gridViewMaxZ then
		m_gridZ = m_gridZ + 1
	end
end

	]]>
	</text>
</object>
