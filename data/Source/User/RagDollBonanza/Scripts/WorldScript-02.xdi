<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="1">
	<dependencies/>
	<text>
	<![CDATA[
local _force
local _camera
local _cameraTransform
local _cannon
local _cannonHead
local _cannonPitch
local _collisions
local _follow

function getBodyVelocity(body)
	if body.getLinearVelocity ~= nil then
		return body:getLinearVelocity()
	end
	return Vector4(0, 0, 0, 0)
end

-- Collision listener delegate
function collisionDelegate(body0, body1, contacts)

	-- Calculate relative velocity; must hit hard in order to count.
	local v0 = getBodyVelocity(body0)
	local v1 = getBodyVelocity(body1)
	local vr = v0:sub(v1):length()
	if vr > 1 then
		-- Increase score
		_collisions = _collisions + 1
	
		-- Create impact effect
		local impact = _self:createEntity("Impact")
		if impact ~= nil then
			local position = contacts:position(0)
			local normal = contacts:normal(0)
			impact:setTransform(Transform(
				position,
				Quaternion(
					Vector4(0, 1, 0),
					normal
				)
			))
			_self:addTransientEntity(impact, 2)
		end
	end
end

-- Initialize layer
function layerInit(stage)
	_force = 0
	_camera = _self:getEntity("Camera")
	_cameraTransform = _camera:getTransform()
	_cannon = _self:getEntity("Cannon")
	_cannonHead = 1.52
	_cannonPitch = 0.0
	_collisions = 0
	_follow = nil
end

-- Update layer
function layerUpdate(stage, info)
	local dT = info:getSimulationDeltaTime()
	local env = stage:getEnvironment()
	local im = env:getInput():getInputMapping()

	local hud = stage:findLayer("HUD")
	if hud ~= nil then
		local moviePlayer = hud:getMoviePlayer()
		if moviePlayer ~= nil then
			moviePlayer:setGlobal("_fireForce", math.floor(_force * 100))
			moviePlayer:setGlobal("_collisions", _collisions)
		end
	end
		
	local fire = im:isStateDown("STATE_TURRET_FIRE")
	if fire then
		_force = _force + dT
		if _force > 1 then
			_force = 1
		end
		_follow = nil
	else
		local dh = im:getStateValue("STATE_TURRET_TURN_HEAD")
		local dp = im:getStateValue("STATE_TURRET_TURN_PITCH")
		
		if dh ~= 0 or dp ~= 0 then
			_follow = nil
		end
		
		_cannonHead = _cannonHead + dh * dT
		_cannonPitch = _cannonPitch + dp * dT
		
		local T = Transform(
			Vector4(-10, 0, 15),
			Quaternion(_cannonHead, _cannonPitch, 0)
		)
		_cannon:setTransform(T)
		
		if _follow ~= nil then
			local Tf = _follow:getTransform()
			local To = Transform(
				Vector4(0, 2, -5),
		 	Quaternion(0, 0.5, 0)
			)
			_camera:setTransform(Tf:concat(To))
		else
			_camera:setTransform(_cameraTransform)
		end
	
		if _force > 0 then
			local ragdoll = _self:createEntity("Ragdoll")
			
			ragdoll:setTransform(Transform(
				Vector4(-10, 0, 15),
				Quaternion(0, 0, 0)
			))
			
			local controller = ragdoll:getPoseController()
			local limbs = controller:getLimbs()
			
			local Qr = Quaternion(_cannonHead, _cannonPitch, 0)
			local impulse = Vector4(
				0,
				1.5,
				5 + _force * 15
			)
			local impulseWorld = Qr:transform(impulse)
			
			for i = 0, limbs:length() - 1 do
				local limb = limbs:get(i)
				limb:addLinearImpulse(impulseWorld, false)
				limb:addCollisionListener(CollisionListener(
					Delegate(_self, "collisionDelegate")
				))
			end
			
			_self:addEntity(ragdoll)
			
			_force = 0
			_follow = ragdoll
		end
	end
end

	]]>
	</text>
</object>
