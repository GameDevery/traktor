<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="1">
	<dependencies/>
	<text>
	<![CDATA[
local m_1stTransforms


function layerInit(stage)

--	local physicsManager = stage:getEnvironment():getPhysics():getPhysicsManager()
--	physicsManager:setGravity(Vector4(0, -10, 0, 0))

	local outerEntity = _self:getEntity("Player")

	local playerEntity = outerEntity:getEntities():get(0) -- _self:getEntity("Player")
	local trailEntities = playerEntity:getEntities()
	local frameEntity = trailEntities:get(0)
	local frontWheelEntity = trailEntities:get(1)
	local rearWheelEntity = trailEntities:get(2)
	
	m_1stTransforms = {
		frameEntity:getTransform(),
		frontWheelEntity:getTransform(),
		rearWheelEntity:getTransform()
	}

end


function resetPlayer(playerEntity)

	local trailEntities = playerEntity:getEntities()
	local frameEntity = trailEntities:get(0)
	local frontWheelEntity = trailEntities:get(1)
	local rearWheelEntity = trailEntities:get(2)

	local frameBody = frameEntity:getBody()
	local frontWheelBody = frontWheelEntity:getBody()
	local rearWheelBody = rearWheelEntity:getBody()

	frameEntity:setTransform(m_1stTransforms[1])
	frontWheelEntity:setTransform(m_1stTransforms[2])
	rearWheelEntity:setTransform(m_1stTransforms[3])


	frameBody:reset()
	frontWheelBody:reset()
	rearWheelBody:reset()

end


function restrainBody(body)
	local v = body:getLinearVelocity()
	body:setLinearVelocity(Vector4(0, v:y(), v:z(), 0))
end


function layerUpdate(stage, info)
	local inputMapping = stage:getEnvironment():getInput():getInputMapping()

	local outerEntity = _self:getEntity("Player")

	local playerEntity = outerEntity:getEntities():get(0)
	local driverEntity = outerEntity:getEntities():get(1)

	local trailEntities = playerEntity:getEntities()
	local frameEntity = trailEntities:get(0)
	local frameBody = frameEntity:getBody()
	local frontWheelEntity = trailEntities:get(1)
	local frontWheelBody = frontWheelEntity:getBody()
	local rearWheelEntity = trailEntities:get(2)
	local rearWheelBody = rearWheelEntity:getBody()

	-- Restrain 3 degree of freedom (head, pitch and X).
	restrainBody(frameBody)
	restrainBody(frontWheelBody)
	restrainBody(rearWheelBody)

	-- Check if reset is pressed.
	if inputMapping:isStateReleased("STATE_RESET") then
		resetPlayer(playerEntity)
	end

	-- Add torque to rear wheel.
	local throttle = inputMapping:getStateValue("STATE_THROTTLE")

	if math.abs(throttle) > 0.1 then

		local a = rearWheelBody:getAngularVelocity():x()
		local v = (30 - a) / 30
		if v < -1 then v = -1 end
		if v > 1 then v = 1 end
		local torque = throttle * v * 250

		rearWheelBody:addTorque(Vector4(torque, 0, 0, 0), true)
		frameBody:addTorque(Vector4(-torque * 0.75, 0, 0, 0), true)

	end

	-- Update frame bones.
	local frameVisualEntity = frameEntity:getEntity()
	local frameT = frameEntity:getTransform()
	local frameTinv = frameT:inverse()

	local frontT = frameTinv:concat(frontWheelBody:getTransform())
	frameVisualEntity:setNeutralPoseTransform(
		"FrontWheel",
		Transform(
			frontT:translation(),
			Quaternion(0, 0, 0)
		)
	)

	local rearT = frameTinv:concat(rearWheelBody:getTransform())
	frameVisualEntity:setNeutralPoseTransform(
		"RearWheel",
		Transform(
			rearT:translation(),
			Quaternion(0, 0, 0)
		)
	)


	-- Update driver entity.
	driverEntity:setTransform(Transform(
		frameT:translation():add(frameT:transform(Vector4(0, 0.8, -0.1, 0))),
		frameT:rotation()
	))
--	driverEntity:getPoseController():setCondition("FORWARD", throttle > 0.1)


	-- Update camera to follow player.
	local cameraEntity = _self:getEntity("Camera")

	local T = frameEntity:getTransform()
	local fy = T:translation():y() + 2
	local fz = T:translation():z() + 1

	local T = cameraEntity:getTransform()
	local cx = T:translation():x()
	local cy = T:translation():y()
	local cz = T:translation():z()

	local x = cx
	local y = (cy * 0.9 + fy * 0.1)
	local z = (cz * 0.9 + fz * 0.1)

	cameraEntity:setTransform(Transform(
		Vector4(x, y, z, 1),
		T:rotation()
	))


end

	]]>
	</text>
</object>
