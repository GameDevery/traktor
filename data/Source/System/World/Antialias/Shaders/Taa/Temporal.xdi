<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.render.ShaderModule">
	<text>
	<![CDATA[
#define TAPS 16

bool Clipped(vec2 uv)
{
	return uv.x < 0.0f || uv.y < 0.0f || uv.x > 1.0f || uv.y > 1.0f;
}

vec4 ColorClamp(in texture2D currentFrame, in sampler currentSampler, vec4 currentColor, vec4 historyColor, vec2 uv)
{
	const vec4 n0 = textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(-1, 0));
	const vec4 n1 = textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2( 1, 0));
	const vec4 n2 = textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(0, -1));
	const vec4 n3 = textureOffset(sampler2D(currentFrame, currentSampler), uv, ivec2(0,  1));

	const vec4 bmn = min(currentColor, min(n0, min(n1, min(n2, n3))));
	const vec4 bmx = max(currentColor, max(n0, max(n1, max(n2, n3))));

	const float e = 0.01f;
	const vec4 E = vec4(e, e, e, 0.0f);

	return clamp(historyColor, bmn - E, bmx + E);
}

vec4 TemporalAntiAlias(
	in texture2D currentFrame,
	in texture2D previousFrame,
	in texture2D velocity,
	in texture2D depth,
	in sampler pointSampler,
	in sampler linearSampler,
	vec4 jitter,
	vec2 uv
)
{
	const float f = 1.0f / TAPS;

	// Convert current jitter to UV space.
	const vec2 Juv = jitter.xy;

	// Get velocity of current pixel, in NDC space.
	const vec2 v = texture(sampler2D(velocity, pointSampler), uv - Juv).xy;

	// Convert velocity to UV space.
	const vec2 Vuv = v * vec2(-0.5f, 0.5f);

	// Sample current colour.
	const vec4 cc = texture(sampler2D(currentFrame, linearSampler), uv - Juv);

	// Blend with previous colour.
	if (!Clipped(uv - Vuv))
	{
		// Sample previous colour,
		const vec4 cp = texture(sampler2D(previousFrame, linearSampler), uv - Vuv);

		// Clamp previous colour to current color neighbourhood.
		const vec4 ccp = ColorClamp(currentFrame, linearSampler, cc, cp, uv - Juv);

		return cc * f + ccp * (1.0f - f);
	}

	return cc;
}

	]]>
	</text>
</object>
