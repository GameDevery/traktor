<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.render.ShaderGraph">
	<nodes>
		<item type="traktor.render.Uniform" version="1">
			<comment/>
			<position>
				<first>-75</first>
				<second>636</second>
			</position>
			<parameterName>Projection</parameterName>
			<type>PtMatrix</type>
			<frequency>UfOnce</frequency>
		</item>
		<item type="traktor.render.InputPort" version="1">
			<comment/>
			<position>
				<first>-82</first>
				<second>311</second>
			</position>
			<name>Normal</name>
			<connectable>true</connectable>
			<optional>false</optional>
			<defaultValue>0</defaultValue>
		</item>
		<item type="traktor.render.InputPort" version="1">
			<comment/>
			<position>
				<first>-82</first>
				<second>397</second>
			</position>
			<name>Origin</name>
			<connectable>true</connectable>
			<optional>false</optional>
			<defaultValue>0</defaultValue>
		</item>
		<item type="traktor.render.OutputPort">
			<comment/>
			<position>
				<first>896</first>
				<second>498</second>
			</position>
			<name>HitPosition</name>
		</item>
		<item type="traktor.render.Uniform" version="1">
			<comment/>
			<position>
				<first>-75</first>
				<second>551</second>
			</position>
			<parameterName>DepthMap</parameterName>
			<type>PtTexture2D</type>
			<frequency>UfDraw</frequency>
		</item>
		<item type="traktor.render.Script">
			<comment/>
			<position>
				<first>376</first>
				<second>408</second>
			</position>
			<name>RayCastFn_DX11</name>
			<inputPins>
				<item>
					<name>Direction</name>
					<type>PtVector</type>
					<samplerId/>
				</item>
				<item>
					<name>Origin</name>
					<type>PtVector</type>
					<samplerId/>
				</item>
				<item>
					<name>DepthMap</name>
					<type>PtTexture2D</type>
					<samplerId>DepthMap_Sampler</samplerId>
				</item>
				<item>
					<name>Projection</name>
					<type>PtMatrix</type>
					<samplerId/>
				</item>
				<item>
					<name>ColorMap</name>
					<type>PtTexture2D</type>
					<samplerId>ColorMap_Sampler</samplerId>
				</item>
			</inputPins>
			<outputPins>
				<item>
					<name>Hit</name>
					<type>PtVector</type>
				</item>
			</outputPins>
			<samplers>
				<item>
					<first>ColorMap_Sampler</first>
					<second>
						<minFilter>FtPoint</minFilter>
						<mipFilter>FtPoint</mipFilter>
						<magFilter>FtPoint</magFilter>
						<addressU>AdClamp</addressU>
						<addressV>AdClamp</addressV>
						<addressW>AdClamp</addressW>
						<compare>CfNone</compare>
						<mipBias>0</mipBias>
						<ignoreMips>true</ignoreMips>
						<useAnisotropic>false</useAnisotropic>
					</second>
				</item>
				<item>
					<first>DepthMap_Sampler</first>
					<second>
						<minFilter>FtPoint</minFilter>
						<mipFilter>FtPoint</mipFilter>
						<magFilter>FtPoint</magFilter>
						<addressU>AdClamp</addressU>
						<addressV>AdClamp</addressV>
						<addressW>AdClamp</addressW>
						<compare>CfNone</compare>
						<mipBias>0</mipBias>
						<ignoreMips>true</ignoreMips>
						<useAnisotropic>false</useAnisotropic>
					</second>
				</item>
			</samplers>
			<script>
			<![CDATA[
const float StepLength = 1.5f;
const int MaxSteps = 16;
const int BinarySearchSteps = 5;
const float MaxDeltaDepth = 4.0f;

float3 hitCoord = Origin.xyz;
float deltaDepth = 0.0f;

// Scan coarse hit.
for (int i = 0; i < MaxSteps; ++i)
{
	hitCoord += Direction.xyz * StepLength;
	
	float4 projCoord = mul(Projection, float4(hitCoord, 1.0f));
	projCoord.xy /= projCoord.w;
	projCoord.xy = projCoord.xy * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);

	float depth = DepthMap.Sample(DepthMap_Sampler, projCoord.xy).x;
	deltaDepth = depth - hitCoord.z;
	if (deltaDepth < 0.0f && deltaDepth > -MaxDeltaDepth)
		break;
}

if (deltaDepth < 0.0f && deltaDepth > -MaxDeltaDepth)
{
/*
	// Refine hit by binary search.
	float3 dir = Direction.xyz * StepLength;
	for (int i = 0; i < BinarySearchSteps; i++)
    {
		float4 projCoord = mul(Projection, float4(hitCoord, 1.0f));
		projCoord.xy /= projCoord.w;
		projCoord.xy = projCoord.xy * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);
 
		float depth = DepthMap.Sample(DepthMap_Sampler, projCoord.xy).x;
		deltaDepth = depth - hitCoord.z;
 
		dir *= 0.5f;
 	if (deltaDepth < 0.0f)
			hitCoord += dir;
		else
			hitCoord -= dir;
    }
*/
	float4 projCoord = mul(Projection, float4(hitCoord, 1.0f));
	projCoord.xy /= projCoord.w;

	float2 colorCoord = projCoord.xy * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);

	float2 dc = abs(projCoord.xy);
	float edgeFactor = clamp((1.0f - max(dc.x, dc.y)) * 10.0f, 0.0f, 1.0f);
	float normFactor = pow(clamp(Direction.z, 0.0f, 1.0f), 0.2f);
	float distFactor = 1.0f - pow(length(Origin.xyz - hitCoord) / (MaxSteps * StepLength), 2.0f);

	float3 color = ColorMap.Sample(ColorMap_Sampler, colorCoord).xyz;
	Hit = float4(color, edgeFactor * normFactor * distFactor);
}
else
	Hit = float4(0.0f, 0.0f, 0.0f, 0.0f);
			]]>
			</script>
		</item>
		<item type="traktor.render.InputPort" version="1">
			<comment/>
			<position>
				<first>-122</first>
				<second>354</second>
			</position>
			<name>ViewDirection</name>
			<connectable>true</connectable>
			<optional>false</optional>
			<defaultValue>0</defaultValue>
		</item>
		<item type="traktor.render.Reflect">
			<comment/>
			<position>
				<first>141</first>
				<second>306</second>
			</position>
		</item>
		<item type="traktor.render.Uniform" version="1">
			<comment/>
			<position>
				<first>-75</first>
				<second>466</second>
			</position>
			<parameterName>ColorMap</parameterName>
			<type>PtTexture2D</type>
			<frequency>UfFrame</frequency>
		</item>
		<item type="traktor.render.Script">
			<comment/>
			<position>
				<first>368</first>
				<second>583</second>
			</position>
			<name>RayCastFn_OpenGL</name>
			<inputPins>
				<item>
					<name>Direction</name>
					<type>PtVector</type>
					<samplerId/>
				</item>
				<item>
					<name>Origin</name>
					<type>PtVector</type>
					<samplerId/>
				</item>
				<item>
					<name>DepthMap</name>
					<type>PtTexture2D</type>
					<samplerId>DepthMap_Sampler</samplerId>
				</item>
				<item>
					<name>Projection</name>
					<type>PtMatrix</type>
					<samplerId/>
				</item>
				<item>
					<name>ColorMap</name>
					<type>PtTexture2D</type>
					<samplerId>ColorMap_Sampler</samplerId>
				</item>
			</inputPins>
			<outputPins>
				<item>
					<name>Hit</name>
					<type>PtVector</type>
				</item>
			</outputPins>
			<samplers>
				<item>
					<first>ColorMap_Sampler</first>
					<second>
						<minFilter>FtPoint</minFilter>
						<mipFilter>FtPoint</mipFilter>
						<magFilter>FtPoint</magFilter>
						<addressU>AdClamp</addressU>
						<addressV>AdClamp</addressV>
						<addressW>AdClamp</addressW>
						<compare>CfNone</compare>
						<mipBias>0</mipBias>
						<ignoreMips>true</ignoreMips>
						<useAnisotropic>false</useAnisotropic>
					</second>
				</item>
				<item>
					<first>DepthMap_Sampler</first>
					<second>
						<minFilter>FtPoint</minFilter>
						<mipFilter>FtPoint</mipFilter>
						<magFilter>FtPoint</magFilter>
						<addressU>AdClamp</addressU>
						<addressV>AdClamp</addressV>
						<addressW>AdClamp</addressW>
						<compare>CfNone</compare>
						<mipBias>0</mipBias>
						<ignoreMips>true</ignoreMips>
						<useAnisotropic>false</useAnisotropic>
					</second>
				</item>
			</samplers>
			<script>
			<![CDATA[
const float StepLength = 1.5;
const int MaxSteps = 16;
const int BinarySearchSteps = 5;
const float MaxDeltaDepth = 4.0;

vec3 hitCoord = Origin.xyz;
float deltaDepth = 0.0;
float hitDepth = 0.0;

// Scan coarse hit.
for (int i = 0; i < MaxSteps; ++i)
{
	hitCoord += Direction.xyz * StepLength;
	
	vec4 projCoord = Projection * vec4(hitCoord, 1.0);
	projCoord.xy /= projCoord.w;
	projCoord.xy = projCoord.xy * vec2(0.5, -0.5) + vec2(0.5, 0.5);

	hitDepth = texture(DepthMap_Sampler, projCoord.xy).x;
	deltaDepth = hitDepth - hitCoord.z;
	if (deltaDepth < 0.0 && deltaDepth > -MaxDeltaDepth)
		break;
}

if (/*hitDepth >= Origin.z &&*/ deltaDepth < 0.0 && deltaDepth > -MaxDeltaDepth)
{
	vec4 projCoord = Projection * vec4(hitCoord, 1.0);
	projCoord.xy /= projCoord.w;

	vec2 colorCoord = projCoord.xy * vec2(0.5, -0.5) + vec2(0.5, 0.5);

	vec2 dc = abs(projCoord.xy);
	float edgeFactor = clamp((1.0f - max(dc.x, dc.y)) * 10.0, 0.0, 1.0);
	float normFactor = pow(clamp(Direction.z, 0.0, 1.0), 0.2);
	float distFactor = 1.0 - pow(length(Origin.xyz - vec3(hitCoord.xy, hitDepth)) / (MaxSteps * StepLength), 2);

	vec3 color = texture(ColorMap_Sampler, colorCoord).xyz;
	Hit = vec4(color, edgeFactor * normFactor * distFactor);
}
else
	Hit = vec4(0.0, 0.0, 0.0, 0.0);

			]]>
			</script>
		</item>
		<item type="traktor.render.Platform">
			<comment/>
			<position>
				<first>616</first>
				<second>478</second>
			</position>
		</item>
		<item type="traktor.render.Vector">
			<comment/>
			<position>
				<first>421</first>
				<second>742</second>
			</position>
			<value>0, 0, 0, 0</value>
		</item>
	</nodes>
	<edges>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[2]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[5]"/>
				<name>Origin</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[5]"/>
				<name>Projection</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[4]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[5]"/>
				<name>DepthMap</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[1]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[7]"/>
				<name>Normal</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[6]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[7]"/>
				<name>Direction</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[7]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[5]"/>
				<name>Direction</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[8]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[5]"/>
				<name>ColorMap</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[5]"/>
				<name>Hit</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[10]"/>
				<name>DX11</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[10]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[3]"/>
				<name>Input</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[9]"/>
				<name>Hit</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[10]"/>
				<name>OpenGL</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[7]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[9]"/>
				<name>Direction</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[2]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[9]"/>
				<name>Origin</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[8]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[9]"/>
				<name>ColorMap</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[4]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[9]"/>
				<name>DepthMap</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[9]"/>
				<name>Projection</name>
			</destination>
		</item>
		<item type="traktor.render.Edge">
			<source>
				<node ref="/object/nodes/item[11]"/>
				<name>Output</name>
			</source>
			<destination>
				<node ref="/object/nodes/item[10]"/>
				<name>Other</name>
			</destination>
		</item>
	</edges>
</object>
