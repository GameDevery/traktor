<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

-- PushButton

PushButton = PushButton or class("PushButton", Widget)

PushButton.Default = 0
PushButton.Toggle = 1

PushButton:setStyle("resource", "MC_PushButton")
PushButton:setStyle("background", traktor.Color4f(0 / 255, 105 / 255, 217 / 255, 1.0))
PushButton:setStyle("backgroundDown", traktor.Color4f(0 / 255, 85 / 255, 180 / 255, 1.0))
PushButton:setStyle("backgroundHover", traktor.Color4f(0 / 255, 85 / 255, 180 / 255, 1.0))
PushButton:setStyle("text", traktor.Color4f(1.0, 1.0, 1.0, 1.0))
PushButton:setStyle("textSize", 20)

function PushButton:new(parent, caption, mode)
	local mc = Widget._createResource(parent, self:getStyle().resource)
	self:_initialize(parent, mc, caption, mode or PushButton.Default)
end

function PushButton:getPreferredSize()
	return self._preferredSize
end

function PushButton:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	self._background_mc.width = p.width
	self._background_mc.height = p.height

	local sz = self._caption_tb.textSize
	local mx = p.width - sz.x
	local my = p.height - sz.y
	self._caption_tb.X = mx / 2
	self._caption_tb.Y = my / 2
end

function PushButton:setColor(color)
	self._defaultColor = color
	self:_updateState()
	return self
end

function PushButton:setDownColor(color)
	self._downColor = color
	self:_updateState()
	return self
end

function PushButton:setHoverColor(color)
	self._hoverColor = color
	self:_updateState()
	return self
end

function PushButton:setTextColor(color)
	self._caption_tb.textColor = color
	return self
end

function PushButton:setTextSize(size)
	local tf = self._caption_tb:getTextFormat()
	tf.size = size * 20
	self._caption_tb:setTextFormat(tf)
	self._preferredSize.height = size + self._textSizeMargin
	return self
end

function PushButton:setCaption(s)

	-- Reset original text bounds as text layout engine
	-- use bounds to figure out the layout. And because
	-- we want layout to behave same regardless of bounds
	-- we need to restore it before changing the value.
	self._caption_tb.textBounds = self._originalBounds
	self._caption_tb:parseText(s)

	local sz = self._caption_tb.textSize
	self._preferredSize.width = math.max(sz.x + self._margin * 2, self._minimumWidth)

	return self
end

function PushButton:setMinimumWidth(minimumWidth)
	self._minimumWidth = minimumWidth

	local sz = self._caption_tb.textSize
	self._preferredSize.width = math.max(sz.x + self._margin * 2, self._minimumWidth)

	return self
end

function PushButton:getMinimumWidth()
	return self._minimumWidth
end

function PushButton:setEnable(enable)
	Widget.setEnable(self, enable)

	-- As disabled widgets doesn't receive events we force button back to default
	-- state even if mouse cursor is inside and pressing.
	if not enable then
		self._pressed = false
		self._inside = false
	end

	self:_updateState()
	return self
end

function PushButton:setOnClick(fn)
	self._clickFn = fn
	return self
end

function PushButton:setToggled(toggled)
	self._toggled = toggled
	self:_updateState()
	return self
end

function PushButton:isToggled()
	return self._toggled
end

-- Private

function PushButton:_initialize(parent, mc, caption, mode)
	Widget._initialize(self, parent, mc)

	self._background_mc = mc:getMember("background_mc")
	self._caption_tb = mc:getMember("caption_tb")
	self._caption_tb.renderClipMask = false

	self._originalBounds = self._caption_tb.textBounds
	self._margin = self._caption_tb.X
	self._minimumWidth = mc.width
	self._textSizeMargin = mc.height - self._caption_tb:getTextFormat().size / 20
	self._preferredSize =
	{
		width = mc.width,
		height = mc.height
	}

	self._clickFn = nil
	self._mode = mode
	self._toggled = false
	self._inside = false
	self._pressed = false

	self:_loadStyle()
	self:_updateState()

	self:addEventListener(MousePressEvent, self, self._onMousePress)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)
	self:addEventListener(MouseEnterEvent, self, self._onMouseEnter)
	self:addEventListener(MouseLeaveEvent, self, self._onMouseLeave)

	self:setCaption(caption)

#if defined(_EDITOR)
	self._background_mc.wireOutline = true
	self._caption_tb.wireOutline = true
#endif
end

function PushButton:_loadStyle()
	local style = self:getStyle()
	self:setColor(style.background)
	self:setDownColor(style.backgroundDown)
	self:setHoverColor(style.backgroundHover)
	self:setTextColor(style.text)
	self:setTextSize(style.textSize)
end

function PushButton:_updateState()
	local cb = traktor.Color4f(0, 0, 0, 0)

	local down = self._toggled or (self._pressed and self._inside)
	local up = not down and not self._inside
	local hover = not down and self._inside

	if down then
		self._background_mc:gotoAndStop("down")
		self._background_mc.colorTransform = traktor.spark.ColorTransform(self._downColor, cb)
	end

	if up then
		self._background_mc:gotoAndStop("up")
		self._background_mc.colorTransform = traktor.spark.ColorTransform(self._defaultColor, cb)
	end

	if hover then
		self._background_mc:gotoAndStop("hover")
		self._background_mc.colorTransform = traktor.spark.ColorTransform(self._hoverColor, cb)
	end

	if self:isEnabled() then
		self._mc.alpha = 1
	else
		self._mc.alpha = 0.5
	end
end

function PushButton:_onMousePress(event)
	self._pressed = true
	self:_updateState()
	self:setExclusive()
	return true
end

function PushButton:_onMouseRelease(event)
	self._pressed = false

	local toggle = (self._mode & PushButton.Toggle) ~= 0
	if toggle then
		if self._inside then
			self._toggled = not self._toggled
		end
	end

	self:_updateState()
	self:releaseExclusive()

	if self._inside and self._clickFn ~= nil then
		self._clickFn(self)
	end
	return true
end

function PushButton:_onMouseEnter(event)
	self._inside = true
	self:_updateState()
	return true
end

function PushButton:_onMouseLeave(event)
	self._inside = false
	self:_updateState()
	return true
end
	]]>
	</text>
</object>
