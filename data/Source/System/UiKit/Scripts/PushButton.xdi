<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

import(traktor.flash)

-- PushButton

PushButton = PushButton or inherit(Widget)
PushButton_meta = PushButton_meta or { name = "PushButton", __index = PushButton }

function PushButton.new(parent, caption)
	local o = {}
	setmetatable(o, PushButton_meta)

	local mc = Widget._createResource(parent, "MC_PushButton")

	o:_initialize(parent, mc, caption)
	return o
end

function PushButton:getPreferredSize()
	return self._preferredSize
end

function PushButton:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	self._background_mc:setWidth(p.width)

	local sz = self._caption_tb:getTextSize()
	local m = p.width - sz:x()
	self._caption_tb:setX(m / 2)
end

function PushButton:setColor(color)
	self._background_mc:setColorTransform(ColorTransform(
		color,
		Color4f(0, 0, 0, 0)
	))
	return self
end

function PushButton:setCaption(s)

	-- Reset original text bounds as text layout engine
	-- use bounds to figure out the layout. And because
	-- we want layout to behave same regardless of bounds
	-- we need to restore it before changing the value.
	self._caption_tb:setTextBounds(self._originalBounds)
	self._caption_tb:parseText(s)

	local sz = self._caption_tb:getTextSize()
	self._preferredSize.width = math.max(sz:x() + self._margin * 2, self._minimumWidth)

	return self
end

function PushButton:setEnable(enable)
	self._enable = enable
	if self._enable then
		self._mc:setProperty("_alpha", 100)
	else
		self._mc:setProperty("_alpha", 50)
	end
	return self
end

function PushButton:isEnabled()
	return self._enable
end

function PushButton:setOnClick(fn)
	self._clickFn = fn
	return self
end

-- Private

function PushButton:_initialize(parent, mc, caption)
	Widget._initialize(self, parent, mc)

	self._background_mc = mc:getMember("background_mc")
	self._caption_tb = mc:getMember("caption_tb")
	self._caption_tb:setRenderClipMask(false)

	self._originalBounds = self._caption_tb:getTextBounds()
	self._margin = self._caption_tb:getX()
	self._minimumWidth = mc:getWidth()
	self._preferredSize =
	{
		width = mc:getWidth(),
		height = mc:getHeight()
	}

	self._enable = true
	self._clickFn = nil

	self:addEventListener(MousePressEvent, self, self._onMousePress)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)

	self:setCaption(caption)

#if defined(_DEBUG)
	self._background_mc:setMember("__renderWireOutline", true)
	self._caption_tb:setMember("__renderWireOutline", true)
#endif
end

function PushButton:_onMousePress(event)
	if self._enable then
		self._background_mc:gotoAndStop("down")
	end
	return true
end

function PushButton:_onMouseRelease(event)
	if self._enable then
		self._background_mc:gotoAndStop("up")
		if event.inside and self._clickFn ~= nil then
			self._clickFn()
		end
	end
	return true
end


	]]>
	</text>
</object>
