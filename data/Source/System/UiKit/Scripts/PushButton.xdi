<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

import(traktor.flash)

-- PushButton

PushButton = PushButton or class("PushButton", Widget)

PushButton.Default = 0
PushButton.Toggle = 1

function PushButton:new(parent, caption, mode)
	local mc = Widget._createResource(parent, "MC_PushButton")
	self:_initialize(parent, mc, caption, mode or PushButton.Default)
end

function PushButton:getPreferredSize()
	return self._preferredSize
end

function PushButton:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	self._background_mc.width = p.width

	local sz = self._caption_tb.textSize
	local m = p.width - sz.x
	self._caption_tb.X = m / 2
end

function PushButton:setColor(color)
	self._defaultColor = color
	self._background_mc.colorTransform = ColorTransform(
		self._defaultColor,
		Color4f(0, 0, 0, 0)
	)
	return self
end

function PushButton:setHoverColor(color)
	self._hoverColor = color
	return self
end

function PushButton:setCaption(s)

	-- Reset original text bounds as text layout engine
	-- use bounds to figure out the layout. And because
	-- we want layout to behave same regardless of bounds
	-- we need to restore it before changing the value.
	self._caption_tb.textBounds = self._originalBounds
	self._caption_tb:parseText(s)

	local sz = self._caption_tb.textSize
	self._preferredSize.width = math.max(sz.x + self._margin * 2, self._minimumWidth)

	return self
end

function PushButton:setMinimumWidth(minimumWidth)
	self._minimumWidth = minimumWidth

	local sz = self._caption_tb.textSize
	self._preferredSize.width = math.max(sz.x + self._margin * 2, self._minimumWidth)

	return self
end

function PushButton:getMinimumWidth()
	return self._minimumWidth
end

function PushButton:setEnable(enable)
	Widget.setEnable(self, enable)
	if enable then
		self._mc.alpha = 1
	else
		self._mc.alpha = 0.5
	end
	return self
end

function PushButton:setOnClick(fn)
	self._clickFn = fn
	return self
end

function PushButton:setToggled(toggled)
	self._toggled = toggled
	if self._toggled then
		self._background_mc:gotoAndStop("down")
	else
		self._background_mc:gotoAndStop("up")
	end
	return self
end

function PushButton:isToggled()
	return self._toggled
end

-- Private

function PushButton:_initialize(parent, mc, caption, mode)
	Widget._initialize(self, parent, mc)

	self._background_mc = mc:getMember("background_mc")
	self._caption_tb = mc:getMember("caption_tb")
	self._caption_tb.renderClipMask = false

	self._originalBounds = self._caption_tb.textBounds
	self._margin = self._caption_tb.X
	self._minimumWidth = mc.width
	self._preferredSize =
	{
		width = mc.width,
		height = mc.height
	}
	self._defaultColor = Color4f(0.8, 0.8, 0.8, 1)
	self._hoverColor = Color4f(1, 1, 1, 1)
	self._clickFn = nil
	self._mode = mode
	self._toggled = false
	self._inside = false
	self._pressed = false

	self._background_mc.colorTransform = ColorTransform(
		self._defaultColor,
		Color4f(0, 0, 0, 0)
	)

	self:addEventListener(MousePressEvent, self, self._onMousePress)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)
	self:addEventListener(MouseEnterEvent, self, self._onMouseEnter)
	self:addEventListener(MouseLeaveEvent, self, self._onMouseLeave)

	self:setCaption(caption)

#if defined(_DEBUG)
	self._background_mc:setMember("__renderWireOutline", true)
	self._caption_tb:setMember("__renderWireOutline", true)
#endif
end

function PushButton:_updateColor()
	if self._inside and not self._pressed then
		self._background_mc.colorTransform = ColorTransform(
			self._hoverColor,
			Color4f(0, 0, 0, 0)
		)
	else
		self._background_mc.colorTransform = ColorTransform(
			self._defaultColor,
			Color4f(0, 0, 0, 0)
		)
	end
end

function PushButton:_onMousePress(event)
	self._background_mc:gotoAndStop("down")
	self._pressed = true
	self:_updateColor()
	return true
end

function PushButton:_onMouseRelease(event)
	self._pressed = false

	local toggle = (self._mode & PushButton.Toggle) ~= 0
	if toggle then
		if self._inside then
			self._toggled = not self._toggled
		end
		if self._toggled then
			self._background_mc:gotoAndStop("down")
		else
			self._background_mc:gotoAndStop("up")
		end
	else
		self._background_mc:gotoAndStop("up")
	end

	if self._inside and self._clickFn ~= nil then
		self._clickFn(self)
	end

	self:_updateColor()
	return true
end

function PushButton:_onMouseEnter(event)
	self._inside = true
	self:_updateColor()
	return true
end

function PushButton:_onMouseLeave(event)
	self._inside = false
	self:_updateColor()
	return true
end

	]]>
	</text>
</object>
