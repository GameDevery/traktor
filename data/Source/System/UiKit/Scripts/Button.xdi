<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

-- Button

Button = Button or inherit(Widget)
Button_meta = Button_meta or { name = "Button", __index = Button }

function Button.new(parent, imageUp, imageDown, imageHover)
	local o = {}
	setmetatable(o, Button_meta)

	local mc = Widget._createEmptyResource(parent)

	o:_initialize(parent, mc, imageUp, imageDown, imageHover)
	return o
end

function Button:getPreferredSize()
	return self._preferredSize
end

function Button:setEnable(enable)
	self._enable = enable
	if self._enable then
		self._mc:setProperty("_alpha", 100)
	else
		self._mc:setProperty("_alpha", 50)
	end
	return self
end

function Button:isEnabled()
	return self._enable
end

function Button:setOnClick(fn)
	self._clickFn = fn
	return self
end

-- Private

function Button:_initialize(parent, mc, imageUp, imageDown, imageHover)
	Widget._initialize(self, parent, mc)

	if isa(imageUp, traktor.drawing.Image) then
		local bm = self._mc:getContext():createBitmap(imageUp)
		if bm == nil then return false end
		self._imageUp_mc = Widget._createEmptyResource(self)
		self._imageUp_mc:attachBitmap(bm, 0)

	elseif isa(imageUp, traktor.flash.FlashMovie) then
		self._imageUp_mc = image:createExternalMovieClipInstance(self._mc, 0)

	elseif type(imageUp) == "string" then
		self._imageUp_mc = Widget._createResource(self, imageUp)
#if defined(_DEBUG)
		if self._imageUp_mc == nil then print("No such image \\"" .. imageUp.. "\\"") end
#endif
	end

	if self._imageUp_mc == nil then
		return false
	end

	if imageDown ~= nil then
		if isa(imageDown, traktor.drawing.Image) then
			local bm = self._mc:getContext():createBitmap(imageDown)
			if bm == nil then return false end
			self._imageDown_mc = Widget._createEmptyResource(self)
			self._imageDown_mc:attachBitmap(bm, 0)
	
		elseif isa(imageDown, traktor.flash.FlashMovie) then
			self._imageDown_mc = image:createExternalMovieClipInstance(self._mc, 0)
	
		elseif type(imageDown) == "string" then
			self._imageDown_mc = Widget._createResource(self, imageDown)
#if defined(_DEBUG)
			if self._imageDown_mc == nil then print("No such image \\"" .. imageDown .. "\\"") end
#endif
		end
	
		if self._imageDown_mc == nil then
			return false
		end
	else
		self._imageDown_mc = self._imageUp_mc
	end

	if imageHover ~= nil then
		if isa(imageHover, traktor.drawing.Image) then
			local bm = self._mc:getContext():createBitmap(imageHover)
			if bm == nil then return false end
			self._imageHover_mc = Widget._createEmptyResource(self)
			self._imageHover_mc:attachBitmap(bm, 0)
	
		elseif isa(imageHover, traktor.flash.FlashMovie) then
			self._imageHover_mc = image:createExternalMovieClipInstance(self._mc, 0)
	
		elseif type(imageHover) == "string" then
			self._imageHover_mc = Widget._createResource(self, imageHover)
#if defined(_DEBUG)
			if self._imageHover_mc == nil then print("No such image \\"" .. imageHover .. "\\"") end
#endif
		end
	
		if self._imageHover_mc == nil then
			return false
		end
	else
		self._imageHover_mc = self._imageUp_mc
	end

	self._preferredSize =
	{
		width = mc:getWidth(),
		height = mc:getHeight()
	}
	self._clickFn = nil

	self:addEventListener(MousePressEvent, self, self._onMousePress)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)
	self:addEventListener(MouseEnterEvent, self, self._onMouseEnter)
	self:addEventListener(MouseLeaveEvent, self, self._onMouseLeave)

	self._imageDown_mc:setVisible(false)
	self._imageHover_mc:setVisible(false)
	self._imageUp_mc:setVisible(true)

	self._isPressed = false
	self._isRolledOver = false	
end

function Button:_onMousePress(event)
	self._imageUp_mc:setVisible(false)
	self._imageHover_mc:setVisible(false)
	self._imageDown_mc:setVisible(true)
	self._isPressed = true
	return true
end

function Button:_onMouseRelease(event)
	self._imageDown_mc:setVisible(false)
	if not self._isRolledOver then
		self._imageHover_mc:setVisible(false)
		self._imageUp_mc:setVisible(true)
	else
		self._imageUp_mc:setVisible(false)
		self._imageHover_mc:setVisible(true)
	end
	if event.inside then
		if self._clickFn ~= nil then self._clickFn() end
		self._isPressed = false
	end
	return true
end

function Button:_onMouseEnter(event)
	if not self._isPressed then
		self._imageUp_mc:setVisible(false)
		self._imageDown_mc:setVisible(false)
		self._imageHover_mc:setVisible(true)
	end
	self._isRolledOver = true
	return true
end

function Button:_onMouseLeave()
	self._imageHover_mc:setVisible(false)
	if not self._isPressed then
		self._imageDown_mc:setVisible(false)
		self._imageUp_mc:setVisible(true)
	else
		self._imageUp_mc:setVisible(false)
		self._imageDown_mc:setVisible(true)
	end
	self._isRolledOver = false
end

	]]>
	</text>
</object>
