<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

import(traktor.flash)

-- ScrollBar

ScrollBar = ScrollBar or inherit(Widget)
ScrollBar_meta = ScrollBar_meta or { name = "ScrollBar", __index = ScrollBar }

ScrollBar.HORIZONTAL = 0
ScrollBar.VERTICAL = 1

function ScrollBar.new(parent, orientation)
	local o = {}
	setmetatable(o, ScrollBar_meta)

	local mc
	if orientation == ScrollBar.HORIZONTAL then
		mc = Widget._createResource(parent, "MC_ScrollBar_Horizontal")
	elseif orientation == ScrollBar.VERTICAL then
		mc = Widget._createResource(parent, "MC_ScrollBar_Vertical")
	end
	assert (mc ~= nil)

	o:_initialize(parent, mc, orientation)
	return o
end

function ScrollBar:getPreferredSize()
	return self._preferredSize
end

function ScrollBar:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	if self._orientation == ScrollBar.HORIZONTAL then
		self._background_mc:setWidth(p.width)
	elseif self._orientation == ScrollBar.VERTICAL then
		self._background_mc:setHeight(p.height)
	end
	self:_updateKnobSize()
end

function ScrollBar:setColor(color)
	self._background_mc:setColorTransform(ColorTransform(
		color,
		Color4f(0, 0, 0, 0)
	))
	return self
end

function ScrollBar:setKnobColor(color)
	self._knob_mc:setColorTransform(ColorTransform(
		color,
		Color4f(0, 0, 0, 0)
	))
	return self
end

function ScrollBar:setRange(range, size)
	self._range = range
	self._size = size
	self:_updateKnobSize()
	return self
end

function ScrollBar:setPosition(position)
	if self._orientation == ScrollBar.HORIZONTAL then
		local bw = self._background_mc:getWidth() - self._knobMargin * 2
		local kw = self._knob_mc:getWidth()
		local f = position / self._range
		self._knob_mc:setX((bw - kw) * f + self._knobMargin)
	elseif self._orientation == ScrollBar.VERTICAL then
		local bh = self._background_mc:getHeight() - self._knobMargin * 2
		local kh = self._knob_mc:getHeight()
		local f = position / self._range
		self._knob_mc:setY((bh - kh) * f + self._knobMargin)
	end
	return self
end

function ScrollBar:getPosition()
	if self._orientation == ScrollBar.HORIZONTAL then
		local bw = self._background_mc:getWidth() - self._knobMargin * 2
		local kw = self._knob_mc:getWidth()
		local kx = self._knob_mc:getX() - self._knobMargin
		return self._range * kx / (bw - kw)
	elseif self._orientation == ScrollBar.VERTICAL then
		local bh = self._background_mc:getHeight() - self._knobMargin * 2
		local kh = self._knob_mc:getHeight()
		local ky = self._knob_mc:getY() - self._knobMargin
		return self._range * ky / (bh - kh)
	end
	return 0
end

function ScrollBar:setOnScroll(scrollFn)
	self._scrollFn = scrollFn
	return self
end

-- Private

function ScrollBar:_updateKnobSize()
	if self._orientation == ScrollBar.HORIZONTAL then
		local bw = self._background_mc:getWidth() - self._knobMargin * 2
		local w = (self._size / self._range) * bw
		self._knob_mc:setWidth(w)
	elseif self._orientation == ScrollBar.VERTICAL then
		local bh = self._background_mc:getHeight() - self._knobMargin * 2
		local h = (self._size / self._range) * bh
		self._knob_mc:setHeight(h)
	end
end

function ScrollBar:_initialize(parent, mc, orientation)
	Widget._initialize(self, parent, mc)

	self._preferredSize =
	{
		width = mc:getWidth(),
		height = mc:getHeight()
	}

	self._background_mc = mc:getMember("background_mc")
	self._knob_mc = mc:getMember("knob_mc")

	self._orientation = orientation

	if self._orientation == ScrollBar.HORIZONTAL then
		self._knobMargin = self._knob_mc:getX()
	elseif self._orientation == ScrollBar.VERTICAL then
		self._knobMargin = self._knob_mc:getY()
	end

	self:addEventListener(MousePressEvent, self, self._onMousePress)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)
	self:addEventListener(MouseMoveEvent, self, self._onMouseMove)

	self:setRange(100, 20)
end

function ScrollBar:_onMousePress(event)
	if self._orientation == ScrollBar.HORIZONTAL then
		self._trackOffset = self._mc:getMouseX() - self._knob_mc:getX()
		self._track = (self._trackOffset >= 0 and self._trackOffset < self._knob_mc:getWidth())
	elseif self._orientation == ScrollBar.VERTICAL then
		self._trackOffset = self._mc:getMouseY() - self._knob_mc:getY()
		self._track = (self._trackOffset >= 0 and self._trackOffset < self._knob_mc:getHeight())
	end
	return true
end

function ScrollBar:_onMouseRelease(event)
	self._track = false
	return true
end

function ScrollBar:_onMouseMove(event)
	if not self._track then return false end

	if self._orientation == ScrollBar.HORIZONTAL then
		local x = self._mc:getMouseX() - self._trackOffset - self._knobMargin

		-- Clamp range.
		local bw = self._background_mc:getWidth() - self._knobMargin * 2
		local mx = bw - self._knob_mc:getWidth()
		if x < 0 then
			x = 0
		elseif x > mx then
			x = mx
		end

		self._knob_mc:setX(x + self._knobMargin)

		if self._scrollFn ~= nil then
			self._scrollFn()
		end

	elseif self._orientation == ScrollBar.VERTICAL then
		local y = self._mc:getMouseY() - self._trackOffset - self._knobMargin

		-- Clamp range.
		local bh = self._background_mc:getHeight() - self._knobMargin * 2
		local my = bh - self._knob_mc:getHeight()
		if y < 0 then
			y = 0
		elseif y > my then
			y = my
		end

		self._knob_mc:setY(y + self._knobMargin)

		if self._scrollFn ~= nil then
			self._scrollFn()
		end
	end

	return true
end


	]]>
	</text>
</object>
