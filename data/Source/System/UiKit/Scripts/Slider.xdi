<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

-- Slider

Slider = Slider or class("Slider", Widget)

Slider:setStyle("resource", "MC_Slider")
Slider:setStyle("background", traktor.Color4f(0.4, 0.4, 0.4, 1.0))
Slider:setStyle("knob", traktor.Color4f(0.8, 0.8, 0.8, 1.0))

function Slider:new(parent)
	local mc = Widget._createResource(parent, self:getStyle().resource)
	self:_initialize(parent, mc)
end

function Slider:getPreferredSize()
	return self._preferredSize
end

function Slider:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	self._background_mc.width = p.width
end

function Slider:setColor(color)
	self._background_mc.colorTransform = traktor.flash.ColorTransform(
		color,
		traktor.Color4f(0, 0, 0, 0)
	)
	return self
end

function Slider:setKnobColor(color)
	self._knob_mc.colorTransform = traktor.flash.ColorTransform(
		color,
		traktor.Color4f(0, 0, 0, 0)
	)
	return self
end

function Slider:setRange(min, max)
	self._range = { min = min, max = max }
	return self
end

function Slider:setPosition(position, immediate)
	local w = self._background_mc.width - self._knob_mc.width
	local f = (position - self._range.min) / (self._range.max - self._range.min)
	if immediate == true then
		self:_moveKnobImmediate(w * f)
	else
		self:_moveKnob(w * f)
	end
	return self
end

function Slider:getPosition()
	local w = self._background_mc.width - self._knob_mc.width
	local x = self._knobX
	return self._range.min + (self._range.max - self._range.min) * x / w
end

function Slider:setOnScroll(scrollFn)
	self._scrollFn = scrollFn
	return self
end

-- Private

function Slider:_initialize(parent, mc)
	Widget._initialize(self, parent, mc)

	self._preferredSize =
	{
		width = mc.width,
		height = mc.height
	}

	self._background_mc = mc:getMember("background_mc")
	self._knob_mc = mc:getMember("knob_mc")
	self._knobX = self._knob_mc.X

	self:_loadStyle()

	self:addEventListener(MousePressEvent, self, self._onMousePress)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)
	self:addEventListener(MouseMoveEvent, self, self._onMouseMove)

	self:setRange(0, 100)
end

function Slider:_loadStyle()
	local style = self:getStyle()
	self:setColor(style.background)
	self:setKnobColor(style.knob)
end

function Slider:_moveKnob(x)
	local current = self._knob_mc.X
	if x ~= current then
		local d = math.abs(x - current) / (self:getPlacement().width * 2)
		if self._knobTween == nil then
			self._knobTween = Tween(current, x, d, function(v, last)
				self._knob_mc.X = v
				if last then self._knobTween = nil end
			end)
		else
			self._knobTween:continueTo(x, d)
		end
	end
	self._knobX = x
end

function Slider:_moveKnobImmediate(x)
	self._knob_mc.X = x
	self._knobX = x
end

function Slider:_onMousePress(event)
	self._trackOffset = self._mc.mouseX - self._knob_mc.X
	self._track = (self._trackOffset >= 0 and self._trackOffset < self._knob_mc.width)
	self:setExclusive()
	return true
end

function Slider:_onMouseRelease(event)
	self._track = false
	self:releaseExclusive()
	return true
end

function Slider:_onMouseMove(event)
	if not self._track then return false end

	local x = self._mc.mouseX - self._trackOffset
	local mx = self._background_mc.width - self._knob_mc.width
	if x < 0 then
		x = 0
	elseif x > mx then
		x = mx
	end

	self:_moveKnob(x)

	if self._scrollFn ~= nil then
		self._scrollFn(self, self:getPosition())
	end

	return true
end
	]]>
	</text>
</object>
