<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{7947759C-88DB-794E-8D09-7F30A40B6669}

-- Dialog

Dialog = Dialog or class("Dialog", Container)

Dialog:setStyle("resource", "MC_Dialog")
Dialog:setStyle("background", Color4f(0.6, 0.6, 0.6, 1.0))
Dialog:setStyle("border", Color4f(1.0, 1.0, 1.0, 1.0))

function Dialog:new(parent, layout)
	local mc = Widget._createResource(parent, self:getStyle().resource, true)
	self:_initialize(parent, mc, layout)
end

function Dialog:place(x, y, width, height)
	Container.place(self, x, y, width, height)

	local p = self:getPlacement()
	self._background_mc.width = p.width
	self._background_mc.height = p.height
	self._border_mc.width = p.width
	self._border_mc.height = p.height

	local p = self:getAncestor():getPlacement()
	local tl = self:globalToLocal({ x = 0, y = 0 })

	self._shadow_mc.X = tl.x
	self._shadow_mc.Y = tl.y
	self._shadow_mc.width = p.width
	self._shadow_mc.height = p.height
end

function Dialog:setColor(color)
	self._background_mc.colorTransform = ColorTransform(
		color,
		Color4f(0, 0, 0, 0)
	)
	return self
end

function Dialog:setBorderColor(color)
	self._border_mc.colorTransform = ColorTransform(
		color,
		Color4f(0, 0, 0, 0)
	)
	return self
end

function Dialog:show()
	self:_updatePlacement()
	self:setVisible(true)
	self:setModal()
end

function Dialog:hide()
	self:setVisible(false)
	self:releaseModal()
end

-- Private

function Dialog:_initialize(parent, mc, layout)
	Container._initialize(self, parent, mc, layout)

	self._shadow_mc = mc:getMember("shadow_mc")
	self._background_mc = mc:getMember("background_mc")
	self._border_mc = mc:getMember("border_mc")
	self._inner_mc = mc:getMember("innerContainer_mc")

	self.__layout = ILayout.FLOAT

	self:_loadStyle()

	self:addEventListener(ResizeEvent, self, function()
		self:_updatePlacement()
	end)

	self:setVisible(false)
end

function Dialog:_updatePlacement()
	local ps = self:getPreferredSize()
	local p = self:getAncestor():getPlacement()
	self:place((p.width - ps.width) / 2, (p.height - ps.height) / 2, ps.width, ps.height)
end

function Dialog:_loadStyle()
	local style = self:getStyle()
	self:setColor(style.background)
	self:setBorderColor(style.border)
end

function Dialog:_getInnerClip()
	return self._inner_mc
end

	]]>
	</text>
</object>
