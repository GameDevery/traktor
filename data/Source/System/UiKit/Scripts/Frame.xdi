<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{7947759C-88DB-794E-8D09-7F30A40B6669}
#using \{26FCC8EA-F349-5545-93B5-6ABDAE065E6F}
#using \{65079C2E-2443-F248-BCF1-F48F8A2EE1F5}

-- Frame

Frame = Frame or class("Frame", Container)

#if defined(_DEBUG)
Frame.ShowDebugCursor = false
#endif

function Frame:new(root_mc, vwidth, vheight, layout)
	local depth < const > = root_mc.displayList.nextHighestDepth
	local mc < const > = root_mc:createEmptyMovieClip("mc", depth)
	self:_initialize(mc, vwidth, vheight, layout)
end

function Frame:remove()
	local cx < const > = self._mc.context

	self._mc.eventEnterFrame:removeAll()
	self._mc.eventMouseDown:removeAll()
	self._mc.eventMouseUp:removeAll()
	self._mc.eventMouseMove:removeAll()

	if self._mouseListener ~= nil then
		cx.mouse.eventMouseWheel:remove(self._mouseListener)
		self._mouseListener = nil
	end

	if self._keyDownListener ~= nil then
		cx.key.eventKeyDown:remove(self._keyDownListener)
		self._keyDownListener = nil
	end

	if self._keyUpListener ~= nil then
		cx.key.eventKeyUp:remove(self._keyUpListener)
		self._keyUpListener = nil
	end

	if self._stageListener ~= nil then
		cx.stage.eventResize:remove(self._stageListener)
		self._stageListener = nil
	end

	Widget.remove(self)
end

function Frame:getPreferredSize()
	return { width = 0, height = 0 }
end

function Frame:update()
	local cx < const > = self._mc.context

	local width < const > = cx.stage.width
	local height < const > = cx.stage.height
	assert (width > 0)
	assert (height > 0)

	if self._vscaleDynamic then
		local xscale < const > = width / self._vwidth
		local yscale < const > = height / self._vheight
		self._vscale = math.min(xscale, yscale)
	end

	self._mc.xScale = self._vscale * 100
	self._mc.yScale = self._vscale * 100
	
	self:place(0, 0, width / self._vscale, height / self._vscale)
end

-- Private

function Frame:_initialize(mc, vwidth, vheight, layout)
	Container._initialize(self, nil, mc, layout)

	-- Disable stage scale and position, register listener of changes in stage size.
	local stage < const > = mc.context.stage
	self._stageListener = stage.eventResize:add(function() self:_eventStageResize() end)
	stage.scaleMode = traktor.spark.Stage.NoScale
	stage.align = "TL"

	self._vwidth = 1280 -- vwidth
	self._vheight = 720 -- vheight

	-- Calculate first virtual scale factor.
	-- \\tbd This currently "freezes" output size based on inital size of screen...
	local width < const > = stage.width
	local height < const > = stage.height
	local xscale < const > = width / self._vwidth
	local yscale < const > = height / self._vheight
	self._vscale = math.min(xscale, yscale)

	-- \\tbd Determine which mode...
	self._vscaleDynamic = true

	-- Setup event source listeners.
	self._mc.eventEnterFrame:add(function() self:_eventEnterFrame() end)
	self._mc.eventMouseDown:add(function() self:_eventMouseDown() end)
	self._mc.eventMouseUp:add(function() self:_eventMouseUp() end)
	self._mc.eventMouseMove:add(function() self:_eventMouseMove() end)

	local mouse < const > = mc.context.mouse
	self._mouseListener = mouse.eventMouseWheel:add(function(delta) self:_eventMouseWheel(delta) end)

	local key < const > = mc.context.key
	self._keyDownListener = key.eventKeyDown:add(function() self:_eventKeyDown() end)
	self._keyUpListener = key.eventKeyUp:add(function() self:_eventKeyUp() end)

#if defined(_DEBUG)
	if Frame.ShowDebugCursor then
		self._mc_debug = Widget._createResource(self, "MC_DebugMarker")
		self._tb_position = self._mc_debug:getMember("tb_position")
	end
#endif
end

function Frame:_eventStageResize()
	self:update()
	self:_dispatchEvent(ResizeEvent())
end

function Frame:_eventEnterFrame()
	self:_dispatchEvent(FrameEvent())
end

function Frame:_eventMouseDown()
	local pt < const > = self:getMousePosition()
	self:_dispatchEvent(MouseDownEvent(pt.x, pt.y))
end

function Frame:_eventMouseUp()
	local pt < const > = self:getMousePosition()
	self:_dispatchEvent(MouseUpEvent(pt.x, pt.y))
end

function Frame:_eventMouseMove()
	local pt < const > = self:getMousePosition()
#if defined(_DEBUG)
	if Frame.ShowDebugCursor then
		self._mc_debug.position = Vector2(pt.x, pt.y)
		self._tb_position:parseText(pt.x .. ";" .. pt.y)
	end
#endif
	self:_dispatchEvent(MouseMoveEvent(pt.x, pt.y))
end

function Frame:_eventMouseWheel(delta)
	local pt < const > = self:getMousePosition()
	self:_dispatchEvent(MouseWheelEvent(pt.x, pt.y, delta))
end

function Frame:_eventKeyDown()
	local key < const > = self._mc.context.key
	self:_dispatchEvent(KeyDownEvent(key.code))
end

function Frame:_eventKeyUp()
	local key < const > = self._mc.context.key
	self:_dispatchEvent(KeyUpEvent(key.code))
end

	]]>
	</text>
</object>
