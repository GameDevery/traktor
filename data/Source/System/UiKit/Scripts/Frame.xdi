<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{7947759C-88DB-794E-8D09-7F30A40B6669}
#using \{26FCC8EA-F349-5545-93B5-6ABDAE065E6F}
#using \{65079C2E-2443-F248-BCF1-F48F8A2EE1F5}

-- Frame

Frame = Frame or class("Frame", Container)

#if defined(_DEBUG)
Frame.ShowDebugCursor = false
#endif

function Frame:new(root_mc, vwidth, vheight, layout)
	local depth = root_mc.displayList.nextHighestDepth
	local mc = root_mc:createEmptyMovieClip("mc", depth)
	self:_initialize(mc, vwidth, vheight, layout)
end

function Frame:remove()
	local cx = self._mc.context

	self._mc:setMember("onEnterFrame", nil)
	self._mc:setMember("onMouseDown", nil)
	self._mc:setMember("onMouseUp", nil)
	self._mc:setMember("onMouseMove", nil)

	if self._mouseListener ~= nil then
		local mouse = cx.global:getMember("Mouse")
		mouse:removeListener(self._mouseListener)
		self._mouseListener = nil
	end

	if self._stageListener ~= nil then
		local stage = cx.global:getMember("Stage")
		stage:removeListener(self._stageListener)
		self._stageListener = nil
	end

	Widget.remove(self)
end

function Frame:getPreferredSize()
	return { width = 0, height = 0 }
end

function Frame:update()
	local cx = self._mc.context
	local stage = cx.global:getMember("Stage")

	local width = stage:getProperty("width")
	local height = stage:getProperty("height")
	assert (width > 0)
	assert (height > 0)

	local xscale = width / self._vwidth
	local yscale = height / self._vheight
	local scale = math.min(xscale, yscale)

	self._mc.xScale = scale * 100
	self._mc.yScale = scale * 100

	self:place(0, 0, width / scale, height / scale)
end

-- Private

function Frame:_initialize(mc, vwidth, vheight, layout)
	Container._initialize(self, nil, mc, layout)

	-- Disable stage scale and position, register listener of changes in stage size.
	local cx = mc.context
	local stage = cx.global:getMember("Stage")
	self._stageListener = cx:createObject()
	self._stageListener:setMember("onResize", function() self:_eventStageResize() end)
	stage:addListener(self._stageListener)
	stage:setProperty("scaleMode", "noScale")
	stage:setProperty("align", "TL")

	self._vwidth = vwidth
	self._vheight = vheight

	-- Setup event source listeners.
	self._mc:setMember("onEnterFrame", function() self:_eventEnterFrame() end)
	self._mc:setMember("onMouseDown", function() self:_eventMouseDown() end)
	self._mc:setMember("onMouseUp", function() self:_eventMouseUp() end)
	self._mc:setMember("onMouseMove", function() self:_eventMouseMove() end)

	local mouse = cx.global:getMember("Mouse")
	self._mouseListener = cx:createObject()
	self._mouseListener:setMember("onMouseWheel", function(delta) self:_eventMouseWheel(delta) end)
	mouse:addListener(self._mouseListener)

#if defined(_DEBUG)
	if Frame.ShowDebugCursor then
		self._mc_debug = Widget._createResource(self, "MC_DebugMarker")
		self._tb_position = self._mc_debug:getMember("tb_position")
	end
#endif
end

function Frame:_eventStageResize()
	self:update()
	self:_dispatchEvent(ResizeEvent())
end

function Frame:_eventEnterFrame()
	self:_dispatchEvent(FrameEvent())
end

function Frame:_eventMouseDown()
	local pt = self:getMousePosition()
	self:_dispatchEvent(MouseDownEvent(pt.x, pt.y))
end

function Frame:_eventMouseUp()
	local pt = self:getMousePosition()
	self:_dispatchEvent(MouseUpEvent(pt.x, pt.y))
end

function Frame:_eventMouseMove()
	local pt = self:getMousePosition()
#if defined(_DEBUG)
	if Frame.ShowDebugCursor then
		self._mc_debug.position = Vector2(pt.x, pt.y)
		self._tb_position:parseText(pt.x .. ";" .. pt.y)
	end
#endif
	self:_dispatchEvent(MouseMoveEvent(pt.x, pt.y))
end

function Frame:_eventMouseWheel(delta)
	local pt = self:getMousePosition()
	self:_dispatchEvent(MouseWheelEvent(pt.x, pt.y, delta))
end

	]]>
	</text>
</object>
