<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

import(traktor)

-- Static

Static = Static or inherit(Widget)
Static_meta = Static_meta or { name = "Static", __index = Static }

function Static.new(parent, text)
	local o = {}
	setmetatable(o, Static_meta)

	local mc = Widget._createResource(parent, "MC_Static")

	o:_initialize(parent, mc, text)
	return o
end

function Static:getPreferredSize()
	return self._preferredSize
end

function Static:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	self._text_tb:setTextBounds(Aabb2(
		Vector2(0, 0),
		Vector2(p.width * 20, p.height * 20)
	))
end

function Static:setText(text)

	-- Reset original text bounds as text layout engine
	-- use bounds to figure out the layout. And because
	-- we want layout to behave same regardless of bounds
	-- we need to restore it before changing the value.
	self._text_tb:setTextBounds(self._originalBounds)
	self._text_tb:parseText(text)

	local sz = self._text_tb:getTextSize()
	self._preferredSize.width = sz:x()
	self._preferredSize.height = sz:y()

	return self
end

function Static:setTextSize(size)

	local tf = self._text_tb:getTextFormat()
	tf:setSize(size * 20)
	self._text_tb:setTextFormat(tf)

	local sz = self._text_tb:getTextSize()
	self._preferredSize.width = sz:x()
	self._preferredSize.height = sz:y()

	return self
end

function Static:setTextColor(color)
	self._text_tb:setTextColor(color)
	return self
end

function Static:setWordWrap(wordWrap)
	self._text_tb:setWordWrap(wordWrap)
	return self
end

function Static:setOnClick(fn)
	self:_registerEvent("onRelease", fn)
	return self
end

-- Private

function Static:_initialize(parent, mc, text)
	Widget._initialize(self, parent, mc)

	self._text_tb = mc:getMember("text_tb")
	self._text_tb:setTransform(Matrix33.identity)
	self._text_tb:setRenderClipMask(false)
	self._originalBounds = self._text_tb:getTextBounds()
	self._preferredSize = { width = 0, height = 0 }

	self:setText(text)

#if defined(_DEBUG)
	self._text_tb:setMember("__renderWireOutline", true)
#endif
end

	]]>
	</text>
</object>
