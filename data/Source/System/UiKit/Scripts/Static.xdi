<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

import(traktor)

-- Static

Static = Static or class("Static", Widget)

function Static:new(parent, text, clip)
	local mc = Widget._createResource(parent, "MC_Static")
	self:_initialize(parent, mc, text, clip)
end

function Static:getPreferredSize(hint)
	local text = self._text_tb:getText()
	if hint ~= nil and self._text_tb:getMultiLine() then
		self._text_tb:setTextBounds(Aabb2(
			Vector2(0, 0),
			Vector2(hint.width * 20, hint.height * 20)
		))
		self:setText(text)
		local sz = self._text_tb:getTextSize()
		return { width = sz.x, height = sz.y }
	else
		local sz = self._text_tb:measureText(text)
		return { width = sz.x, height = sz.y }
	end
end

function Static:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	-- Use placement to set text bound.
	local p = self:getPlacement()
	self._text_tb:setTextBounds(Aabb2(
		Vector2(0, 0),
		Vector2(p.width * 20, p.height * 20)
	))

	-- Reset text to ensure it's properly fitted to given text bound.
	local text = self._text_tb:getText()
	self:setText(text)
end

function Static:setText(text)
	self._text_tb:parseText(text)
	return self
end

function Static:setHtml(html)
	self._text_tb:parseHtml(html)
	return self
end

function Static:setTextSize(size)
	local tf = self._text_tb:getTextFormat()
	tf:setSize(size * 20)
	self._text_tb:setTextFormat(tf)
	return self
end

function Static:setTextColor(color)
	self._text_tb:setTextColor(color)
	self._textColor = color
	return self
end

function Static:setTextHoverColor(color)
	self._textHoverColor = color
	return self
end

function Static:setDropShadowColor(color)
	if color:getAlpha() > 0.01 then
		self._text_tb:setFilter(1)
		self._text_tb:setFilterColor(color)
	else
		self._text_tb:setFilter(0)
	end
	return self
end

function Static:setMultiLine(multiLine)
	self._text_tb:setMultiLine(multiLine)
	return self
end

function Static:setWordWrap(wordWrap)
	self._text_tb:setWordWrap(wordWrap)
	return self
end

function Static:setScroll(scroll)
	self._text_tb:setScroll(scroll)
	return self
end

function Static:getMaxScroll()
	return self._text_tb:getMaxScroll()
end

function Static:setOnClick(fn)
	self._clickFn = fn
	return self
end

-- Private

function Static:_initialize(parent, mc, text, clip)
	Widget._initialize(self, parent, mc)

	self._text_tb = mc:getMember("text_tb")
	self._text_tb:setTransform(Matrix33.identity)
	self._text_tb:setRenderClipMask(clip or false)
	self._textColor = self._text_tb:getTextColor()
	self._textHoverColor = nil

	self:setText(text or "")

	self:addEventListener(MouseEnterEvent, self, self._onMouseEnter)
	self:addEventListener(MouseLeaveEvent, self, self._onMouseLeave)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)

#if defined(_DEBUG)
	self._text_tb:setMember("__renderWireOutline", true)
#endif
end

function Static:_onMouseEnter(event)
	if self._textHoverColor ~= nil then
		self._text_tb:setTextColor(self._textHoverColor)
	end
end

function Static:_onMouseLeave(event)
	if self._textHoverColor ~= nil then
		self._text_tb:setTextColor(self._textColor)
	end
end

function Static:_onMouseRelease(event)
	if self._clickFn ~= nil then self._clickFn(self) end
	return true
end

	]]>
	</text>
</object>
