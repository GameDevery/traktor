<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

import(traktor)

-- Static

Static = Static or class("Static", Widget)

Static:setStyle("resource", "MC_Static")
Static:setStyle("text", Color4f(0.0, 0.0, 0.0, 1.0))
Static:setStyle("textHover", nil)
Static:setStyle("textOutline", nil)
Static:setStyle("textDropShadow", nil)
Static:setStyle("textSize", 17)

function Static:new(parent, text, clip)
	local mc = Widget._createResource(parent, self:getStyle().resource)
	self:_initialize(parent, mc, text, clip)
end

function Static:getPreferredSize(hint)
	local sz = 0
	if hint ~= nil then
		if not self._html then
			sz = self._text_tb:measureText(self._text_tb.text, hint.width * 20)
		else
			sz = { x = hint.width, y = hint.height }
		end
	else
		sz = self._text_tb:measureText(self._text_tb.text)
	end
	return { width = sz.x, height = sz.y }
end

function Static:place(x, y, width, height)
	Widget.place(self, x, y, width, height)
	if not self._html then
		local sz = self._text_tb:measureText(self._text_tb.text, width * 20)
		self._text_tb.textBounds = Aabb2(
			Vector2(0, 0),
			Vector2(math.min(sz.x, width) * 20, math.min(sz.y, height) * 20)
		)
		self:setText(self._text_tb.text)
	else
		self._text_tb.textBounds = Aabb2(
			Vector2(0, 0),
			Vector2(width * 20, height * 20)
		)
		self:setHtml(self._text_tb.htmlText)
	end
end

function Static:setText(text)
	if text ~= nil then
		self._text_tb:parseText(text)
	else
		self._text_tb:parseText("")
	end
	self._html = false
	return self
end

function Static:setHtml(html)
	if html ~= nil then
		self._text_tb:parseHtml(html)
	else
		self._text_tb:parseHtml("")
	end
	self._html = true
	return self
end

function Static:setTextSize(size)
	local tf = self._text_tb:getTextFormat()
	tf.size = size * 20
	self._text_tb:setTextFormat(tf)
	return self
end

function Static:setTextColor(color)
	self._text_tb.textColor = color
	self._textColor = color
	return self
end

function Static:setTextHoverColor(color)
	self._textHoverColor = color
	return self
end

function Static:setTextOutlineColor(color)
	if color ~= nil then
		self._text_tb.filter = 3
		self._text_tb.filterColor = color
	else
		self._text_tb.filter = 0
	end
	return self
end

function Static:setTextDropShadowColor(color)
	if color ~= nil then
		self._text_tb.filter = 1
		self._text_tb.filterColor = color
	else
		self._text_tb.filter = 0
	end
	return self
end

function Static:setMultiLine(multiLine)
	self._text_tb.multiLine = multiLine
	return self
end

function Static:setWordWrap(wordWrap)
	self._text_tb.wordWrap = wordWrap
	return self
end

function Static:setScroll(scroll)
	self._text_tb.scroll = scroll
	return self
end

function Static:getMaxScroll()
	return self._text_tb.maxScroll
end

function Static:setOnClick(fn)
	self._clickFn = fn
	return self
end

-- Private

function Static:_initialize(parent, mc, text, clip)
	Widget._initialize(self, parent, mc)

	self._text_tb = mc:getMember("text_tb")
	self._text_tb.transform = Matrix33.identity
	self._text_tb.renderClipMask = clip or false
	self._textColor = self._text_tb.textColor
	self._textHoverColor = nil
	self._html = false

	self:_loadStyle()

	self:setText(text or "")

	self:addEventListener(MouseEnterEvent, self, self._onMouseEnter)
	self:addEventListener(MouseLeaveEvent, self, self._onMouseLeave)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)

#if defined(_EDITOR)
	self._text_tb.wireOutline = true
#endif
end

function Static:_loadStyle()
	local style = self:getStyle()
	self:setTextColor(style.text)
	self:setTextHoverColor(style.textHover)
	self:setTextOutlineColor(style.textOutline)
	self:setTextDropShadowColor(style.textDropShadow)
	self:setTextSize(style.textSize)
end

function Static:_onMouseEnter(event)
	if self._textHoverColor ~= nil then
		self._text_tb.textColor = self._textHoverColor
	end
end

function Static:_onMouseLeave(event)
	if self._textHoverColor ~= nil then
		self._text_tb.textColor = self._textColor
	end
end

function Static:_onMouseRelease(event)
	if self._clickFn ~= nil then self._clickFn(self) end
	return true
end

	]]>
	</text>
</object>
