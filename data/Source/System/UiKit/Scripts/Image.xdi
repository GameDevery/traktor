<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
-- Image

Image = Image or inherit(Widget)
Image_meta = Image_meta or { name = "Image", __index = Image }

Image.MODE_DEFAULT = 0
Image.MODE_STRETCH = 1
Image.MODE_CLIP = 2

Image.BLEND_ALPHA = 0
Image.BLEND_ADD = 1

function Image.new(parent, image, mode)
	local o = {}
	setmetatable(o, Image_meta)

	local mc = Widget._createEmptyResource(parent)

	o:_initialize(parent, mc, image, mode)
	return o
end

function Image:getPreferredSize()
	return
	{
		width = self._preferredSize.width * self._hscale,
		height = self._preferredSize.height * self._vscale
	}
end

function Image:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	if self._mode == Image.MODE_STRETCH then
		self._image_mc:setWidth(p.width)
		self._image_mc:setHeight(p.height)

	elseif self._mode == Image.MODE_CLIP then
		self._clipper_mc:setWidth(p.width)
		self._clipper_mc:setHeight(p.height)
	end
end

function Image:setImage(image, mode)
	if mode == nil then
		mode = Image.MODE_DEFAULT
	end

	-- Create image resource.
	if isa(image, traktor.drawing.Image) then
		self._image_mc = Widget._createEmptyResource(self)
		self._image_mc:attachBitmap(traktor.flash.BitmapImage(image), 0)

	elseif isa(image, traktor.video.VideoTexture) then
		self._image_mc = Widget._createEmptyResource(self)
		self._image_mc:attachBitmap(traktor.flash.BitmapTexture(image), 0)

	elseif isa(image, traktor.flash.Movie) then
		self._image_mc = image:createExternalMovieClipInstance(self._mc, 0)

	elseif type(image) == "string" then
		self._image_mc = Widget._createResource(self, image)
#if defined(_DEBUG)
		if self._image_mc == nil then print("No such image \\"" .. image .. "\\"") end
#endif
	end

	if self._image_mc == nil then
		return false
	end

	-- Keep original size as preferred size.
	self._preferredSize.width = self._image_mc:getWidth()
	self._preferredSize.height = self._image_mc:getHeight()

	-- Ensure scale is 
	self._image_mc:setScale(Vector2(self._hscale * 100, self._vscale * 100))

	-- Create clipper.
	if mode == Image.MODE_CLIP then
		self._clipper_mc = Widget._createResource(self, "MC_Clipper")
		self._clipper_mc:setWidth(self._preferredSize.width)
		self._clipper_mc:setHeight(self._preferredSize.height)
		self._image_mc:setMask(self._clipper_mc)
	end

	self._mode = mode
end

function Image:setBlend(mode)
	if mode == Image.BLEND_ALPHA then
		self._image_mc:setBlendMode(traktor.flash.CharacterInstance.SbmDefault)
	elseif mode == Image.BLEND_ADD then
		self._image_mc:setBlendMode(traktor.flash.CharacterInstance.SbmAdd)
	end
	return self
end

function Image:setAlpha(alpha)
	self._image_mc:setProperty("_alpha", 100 * alpha)
	return self
end

function Image:setScale(hscale, vscale)
	self._hscale = hscale
	self._vscale = hscale
	if self._image_mc ~= nil then
		self._image_mc:setScale(Vector2(hscale * 100, vscale * 100))
	end
	return self
end

function Image:setOnClick(fn)
	self._clickFn = fn
	return self
end

-- Private

function Image:_initialize(parent, mc, image, mode)
#if defined(_DEBUG)
	mc:setMember("__renderWireOutline", true)
#endif

	self._hscale = 1
	self._vscale = 1
	self._preferredSize = { width = 0, height = 0 }

	Widget._initialize(self, parent, mc)

	if image ~= nil then
		self:setImage(image, mode)
	end

	self:addEventListener(MousePressEvent, self, self._onMousePress)
	self:addEventListener(MouseReleaseEvent, self, self._onMouseRelease)
end

function Image:_onMousePress(event)
	self:setExclusive()
	return true
end

function Image:_onMouseRelease(event)
	if event.inside then
		if self._clickFn ~= nil then self._clickFn() end
	end
	self:releaseExclusive()
	return true
end

	]]>
	</text>
</object>
