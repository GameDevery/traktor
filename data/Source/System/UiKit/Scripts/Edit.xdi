<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

-- Edit

Edit = Edit or class("Edit", Widget)

Edit.MODE_DEFAULT = 0
Edit.MODE_PASSWORD = 1

Edit:setStyle("resource", "MC_Edit")
Edit:setStyle("background", Color4f(1.0, 1.0, 1.0, 1.0))
Edit:setStyle("text", Color4f(0.0, 0.0, 0.0, 1.0))
Edit:setStyle("textSize", 10)

function Edit:new(parent, text, hint, validator)
	local mc = Widget._createResource(parent, self:getStyle().resource)
	self:_initialize(parent, mc, text, hint, validator)
end

function Edit:remove()
	self._text_tb.eventSetFocus:removeAll()
	self._text_tb.eventKillFocus:removeAll()
	self._text_tb.eventChanged:removeAll()
	Widget.remove(self)
end

function Edit:setMode(mode)
	self._text_tb.password = ((mode & Edit.MODE_PASSWORD) ~= 0)
	return self
end

function Edit:setText(text)
	if text ~= nil then
		self._text_tb:parseText(text)
	elseif self._hint ~= nil then
		self._text_tb:parseText(self._hint)
	else
		self._text_tb:parseText("")
	end
	return self
end

function Edit:getText()
	return self._text_tb.text
end

function Edit:setTextSize(size)
	local tf = self._text_tb:getTextFormat()
	tf.size = size * 20
	self._text_tb:setTextFormat(tf)
	self._preferredSize.height = size + self._textSizeMargin
	return self
end

function Edit:setColor(color)
	self._background_mc.colorTransform = traktor.spark.ColorTransform(
		color,
		traktor.Color4f(0, 0, 0, 0)
	)
	return self
end

function Edit:setTextColor(color)
	self._text_tb.textColor = color
	return self
end

function Edit:setOnChange(fn)
	self._changeFn = fn
	return self
end

function Edit:setOnEdited(fn)
	self._editedFn = fn
	return self
end

function Edit:setOnEnter(fn)
	self._enterFn = fn
	return self
end

function Edit:getPreferredSize()
	return self._preferredSize
end

function Edit:setFocus()
	Widget.setFocus(self)
	self._text_tb.focus = true
end

function Edit:killFocus()
	if Widget.killFocus(self) then
		self._text_tb.focus = false
	end
end

function Edit:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	local mx = self._text_tb.X
	self._text_tb.width = p.width - mx * 2

	self._background_mc.width = p.width
	self._background_mc.height = p.height
end

-- private

function Edit:_initialize(parent, mc, text, hint, validator)
	Widget._initialize(self, parent, mc)

	self._background_mc = mc:getMember("background_mc")
	self._text_tb = mc:getMember("text_tb")
	self._text_tb.eventSetFocus:add(function() self:_onSetFocus() end)
	self._text_tb.eventKillFocus:add(function() self:_onKillFocus() end)
	self._text_tb.eventChanged:add(function() self:_onChanged() end)

	self._preferredSize =
	{
		width = mc.width,
		height = mc.height
	}

	local th = self._text_tb:getTextFormat().size / 20
	self._textSizeMargin = self._preferredSize.height - th

	self._hint = hint
	self._validator = validator
	self._text0 = ""

	if text ~= nil then
		if validator ~= nil then
			assert(validator:check(text))	-- Initial text must be valid.
		end
		self._text_tb:parseText(text)
		self._text0 = text
		self._hintActive = false
	elseif hint ~= nil then
		self._text_tb:parseText(hint)
		self._hintActive = true
	end

	self:_loadStyle()
end

function Edit:_loadStyle()
	local style = self:getStyle()
	self:setColor(style.background)
	self:setTextColor(style.text)
	self:setTextSize(style.textSize)
end

function Edit:_onSetFocus()
	-- Remove hint.
	if self._hintActive then
		self._text_tb:parseText("")
		self._hintActive = false
	end

	-- Register global key up/down events.
	local cx = self._mc.context
	self._keyDownListener = cx.key.eventKeyDown:add(function() self:_onKeyDown() end)
	self._keyUpListener = cx.key.eventKeyUp:add(function() self:_onKeyUp() end)

	self._enterPressed = false

#if defined(ANDROID)
	traktor.input.KeyboardDeviceAndroid.showSoftKeyboard()
#endif
end

function Edit:_onKillFocus()
	if self._editedFn ~= nil then
		self._editedFn(self)
	end

	if self._hint ~= "" and self._text_tb.text == "" then
		self._text_tb:parseText(self._hint)
		self._hintActive = true
	end

	-- Remove global key up/down events.
	local cx = self._mc.context
	cx.key.eventKeyDown:remove(self._keyDownListener)
	cx.key.eventKeyUp:remove(self._keyUpListener)

#if defined(ANDROID)
	traktor.input.KeyboardDeviceAndroid.hideSoftKeyboard()
#endif
end

function Edit:_onChanged()
	if self._validator ~= nil then
		local text = self._text_tb.text
		if self._validator:check(text) then
			self._text0 = text
		else
			self._text_tb:parseText(self.text0)
		end
		if self._changeFn ~= nil then
			self._changeFn(self)
		end
	end
end

function Edit:_onKeyDown()
	local key = self._mc.context.key
	if key.code == spark.Key.AkEnter or key.code == 220 then
		self._enterPressed = true
	end
end

function Edit:_onKeyUp()
	if self._enterPressed then
		self._enterPressed = false

		local key = self._mc.context.key
		if key.code == spark.Key.AkEnter or key.code == 220 then
			if self._enterFn ~= nil then
				self._enterFn(self)
			end
		end
	end
end
	]]>
	</text>
</object>
