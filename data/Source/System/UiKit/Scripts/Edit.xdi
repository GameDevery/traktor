<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
-- Edit
import(traktor.input)

Edit = Edit or class("Edit", Widget)

Edit.MODE_DEFAULT = 0
Edit.MODE_PASSWORD = 1

function Edit:new(parent, text, hint, validator)
	local mc = Widget._createResource(parent, "MC_Edit")
	self:_initialize(parent, mc, text, hint, validator)
end

function Edit:remove()
	self._text_tb:setMember("onSetFocus", nil)
	self._text_tb:setMember("onKillFocus", nil)
	self._text_tb:setMember("onChanged", nil)
	Widget.remove(self)
end

function Edit:setMode(mode)
	self._text_tb:setPassword((mode & Edit.MODE_PASSWORD) ~= 0)
	return self
end

function Edit:setText(text)
	self._text_tb:parseText(text)
	return self
end

function Edit:getText()
	return self._text_tb:getText()
end

function Edit:setOnChange(fn)
	self._changeFn = fn
	return self
end

function Edit:setOnEdited(fn)
	self._editedFn = fn
	return self
end

function Edit:setOnEnter(fn)
	self._enterFn = fn
	return self
end

function Edit:getPreferredSize()
	return self._preferredSize
end

function Edit:setFocus()
	Widget.setFocus(self)

	local cx = self._mc:getContext()
	local selection = cx:getGlobal():getMember("Selection")
	selection:setFocus(self._text_tb)
end

function Edit:killFocus()
	if Widget.killFocus(self) then
		local cx = self._mc:getContext()
		local selection = cx:getGlobal():getMember("Selection")
		selection:setFocus(nil)
	end
end

function Edit:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()
	local mx = self._text_tb:getX()
	self._text_tb:setWidth(p.width - mx * 2)

	self._background_mc:setWidth(p.width)
	self._background_mc:setHeight(p.height)
end

-- private

function Edit:_initialize(parent, mc, text, hint, validator)
	Widget._initialize(self, parent, mc)

	self._background_mc = mc:getMember("background_mc")
	self._text_tb = mc:getMember("text_tb")
	self._text_tb:setMember("onSetFocus", function() self:_onSetFocus() end)
	self._text_tb:setMember("onKillFocus", function() self:_onKillFocus() end)
	self._text_tb:setMember("onChanged", function() self:_onChanged() end)

	self._preferredSize =
	{
		width = mc:getWidth(),
		height = mc:getHeight()
	}

	self._hint = hint
	self._validator = validator
	self._text0 = ""

	if text ~= nil then
		if validator ~= nil then
			assert(validator:check(text))	-- Initial text must be valid.
		end
		self._text_tb:parseText(text)
		self._text0 = text
		self._hintActive = false
	elseif hint ~= nil then
		self._text_tb:parseText(hint)
		self._hintActive = true
	end
end

function Edit:_onSetFocus()
	-- Remove hint.
	if self._hintActive then
		self._text_tb:parseText("")
		self._hintActive = false
	end

	-- Register global key up/down events.
	local cx = self._mc:getContext()
	local key = cx:getGlobal():getMember("Key")

	self._keyListener = cx:createObject()
	self._keyListener:setMember("onKeyDown", function() self:_onKeyDown() end)
	self._keyListener:setMember("onKeyUp", function() self:_onKeyUp() end)
	key:addListener(self._keyListener)

	self._enterPressed = false

#if defined(ANDROID)
	KeyboardDeviceAndroid.showSoftKeyboard()
#endif
end

function Edit:_onKillFocus()
	if self._editedFn ~= nil then
		self._editedFn()
	end

	if self._hint ~= "" and self._text_tb:getText() == "" then
		self._text_tb:parseText(self._hint)
		self._hintActive = true
	end

	-- Remove global key up/down events.
	if self._keyListener ~= nil then
		local cx = self._mc:getContext()
		local key = cx:getGlobal():getMember("Key")
		key:removeListener(self._keyListener)
		self._keyListener = nil
	end

#if defined(ANDROID)
	KeyboardDeviceAndroid.hideSoftKeyboard()
#endif
end

function Edit:_onChanged()
	if self._validator ~= nil then
		local text = self._text_tb:getText()
		if self._validator:check(text) then
			self._text0 = text
		else
			self._text_tb:parseText(self.text0)
		end
		if self._changeFn ~= nil then
			self._changeFn()
		end
	end
end

function Edit:_onKeyDown()
	local cx = self._mc:getContext()
	local key = cx:getGlobal():getMember("Key")
	local code = key:getCode()
	if code == key:getMember("ENTER") or code == 220 then
		self._enterPressed = true
	end
end

function Edit:_onKeyUp()
	if self._enterPressed then
		self._enterPressed = false

		local cx = self._mc:getContext()
		local key = cx:getGlobal():getMember("Key")
		local code = key:getCode()
		if code == key:getMember("ENTER") or code == 220 then
			if self._enterFn ~= nil then
				self._enterFn()
			end
		end
	end
end

	]]>
	</text>
</object>
