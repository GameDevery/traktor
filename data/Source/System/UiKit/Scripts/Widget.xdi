<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{7F5ADE59-4125-3342-A3F1-AEA3F584834E}
#using \{D35E3668-DEFB-924A-B4DB-2E317DD67308}
#using \{E1AC8A37-C364-5E47-BB5F-41B22A0CDC5E}
#using \{E57536DD-10D0-E645-9155-9184BFE7809E}
#using \{1821BA8C-3175-C94C-8520-87FFEFC1EDAF}
#using \{7122E0C9-1BEE-634A-8BF7-49087F52A189}
#using \{FE6D486C-DD87-B842-B350-6270791D3E64}
#using \{816FB49B-11B4-7A40-8F72-5F76DC858D5F}

-- Widget

Widget = Widget or {}
Widget_meta = Widget_meta or { name = "Widget", __index = Widget }

Widget.ALIGN_LEFT = "L"
Widget.ALIGN_CENTER = "C"
Widget.ALIGN_RIGHT = "R"
Widget.ALIGN_TOP = "T"
Widget.ALIGN_BOTTOM = "B"

function Widget.initialize(env, resourceKits)
	Widget._env = env
	Widget._resourceKits = {}
	Widget._modal = {}
	Widget._exclusive = {}
	Widget._focus = nil
	for _, rkid in ipairs(resourceKits) do
		local rk = env:getResource():getResourceManager():bind(traktor.flash.FlashMovie, rkid)
		if rk == nil then return false end
		table.insert(Widget._resourceKits, rk)
	end
	return true
end

function Widget:remove()
	-- Ensure widget isn't modal.
	for k, w in ipairs(Widget._modal) do
		if w == self then
			table.remove(Widget._modal, k)
			break
		end
	end

	-- Ensure widget isn't exclusive.
	for k, w in ipairs(Widget._exclusive) do
		if w == self then
			table.remove(Widget._exclusive, k)
			break
		end
	end

	-- Ensure widget hasn't focus.
	if Widget._focus == self then
		Widget._focus = nil
	end

	-- Remove all children.
	local children = self._children
	while #children > 0 do
		local ln = #children
		children[1]:remove()
		assert (#children < ln)
	end

	-- Remove from parent.
	if self._parent ~= nil then
		self._parent:_removeChild(self)
		self._parent = nil
	end

	-- Remove movieclip.
	if self._mc ~= nil then
		self._mc:removeMovieClip()
		self._mc = nil
	end

#if defined(_DEBUG)
	self._debugInfo = "REMOVED"
#endif
end

function Widget:removeAllChildren()
	local children = self:getChildren()
	for _, c in ipairs(children) do
		c:remove()
	end
end

function Widget:getParent()
	return self._parent
end

function Widget:getAncestor()
	if self._parent == nil then return self end
	return self._parent:getAncestor()
end

function Widget:getChildren(filterFn)
	local children = {}
	for _, c in ipairs(self._children) do
		local add = true
		if not c.__private then
			if filterFn ~= nil then
				if filterFn(c) then table.insert(children, c) end
			else
				table.insert(children, c)
			end
		end
	end
	return children
end

function Widget:setVisible(visible)
	if visible ~= self._visible then
		self._mc:setVisible(visible)
		self._visible = visible
	end
	return self
end

function Widget:isVisible()
	local p = self
	while p ~= nil do
		if not p._visible then return false end
		p = p._parent
	end
	return true
end

function Widget:setEnable(enable)
	self._enable = enable
	return self
end

function Widget:isEnabled()
	return self._enable
end

function Widget:setModal()
	table.insert(Widget._modal, self)
	return true
end

function Widget:releaseModal()
	local m = #Widget._modal
	if Widget._modal[m] == self then
		table.remove(Widget._modal, m)
	end
end

function Widget:setExclusive()
	table.insert(Widget._exclusive, self)
	return true
end

function Widget:releaseExclusive()
	local x = #Widget._exclusive
	if Widget._exclusive[x] == self then
		table.remove(Widget._exclusive, x)
	end
end

function Widget:setFocus()
	if Widget._focus ~= nil then
		if Widget._focus ~= self then
			Widget._focus:_notifyEventListeners(FocusEvent.new(false))
		else
			return
		end
	end
	Widget._focus = self
	Widget._focus:_notifyEventListeners(FocusEvent.new(true))	
end

function Widget.getFocus()
	return Widget._focus
end

function Widget:setHorizontalAlign(halign)
	self._halign = halign
	return self
end

function Widget:setVerticalAlign(valign)
	self._valign = valign
	return self
end

function Widget:getPlacement()
	return self._placement
end

function Widget:getPreferredSize()
	error("getPreferredSize must be overrided")
end

function Widget:place(x, y, width, height)
	self._placement.x = x
	self._placement.y = y
	self._placement.width = width
	self._placement.height = height

	local ps = self:getPreferredSize({ width = width, height = height })

	local ax = x
	local aw = width
	if self._halign == Widget.ALIGN_RIGHT then
		ax = x + width - ps.width
		aw = ps.width
	elseif self._halign == Widget.ALIGN_CENTER then
		ax = x + (width - ps.width) / 2
		aw = ps.width
	end
	self._placement.x = ax
	self._placement.width = aw
	self._mc:setX(ax)

	local ay = y
	local ah = height
	if self._valign == Widget.ALIGN_BOTTOM then
		ay = y + height - ps.height
		ah = ps.height
	elseif self._valign == Widget.ALIGN_CENTER then
		ay = y + (height - ps.height) / 2
		ah = ps.height
	end
	self._placement.y = ay
	self._placement.height = ah
	self._mc:setY(ay)
end

function Widget:globalToLocal(pt)
	if self._mc ~= nil then
		local ancestor = self:getAncestor()
		local lpt = ancestor._mc:transformInto(self._mc, Vector2(pt.x * 20, pt.y * 20))
		return { x = lpt:x() / 20, y = lpt:y() / 20 }
	else
		return pt
	end
end

function Widget:localToGlobal(pt)
	if self._mc ~= nil then
		local ancestor = self:getAncestor()
		local gpt = self._mc:transformInto(ancestor._mc, Vector2(pt.x * 20, pt.y * 20))
		return { x = gpt:x() / 20, y = gpt:y() / 20 }
	else
		return pt
	end
end

function Widget:hitTest(position)
	if position.x < 0 or position.y < 0 then return nil end
	if position.x > self._placement.width or position.y > self._placement.height then return nil end
	return self
end

function Widget:getMousePosition()
	return { x = self._mc:getMouseX(), y = self._mc:getMouseY() }
end

function Widget:addEventListener(eventType, target, fn)
	assert (eventType.mask ~= nil)
	self._eventListeners[eventType] = {
		target = target,
		fn = fn
	}
	self:getAncestor():_updateEventFilter()
end

function Widget:removeEventListener(eventType, target, fn)
	self._eventListeners[eventType] = nil
	self:getAncestor():_updateEventFilter()
end

-- Private

function Widget:_initialize(parent, mc)
	self._parent = parent
	self._mc = mc
	self._mc:setPlaying(false, true)
	self._enable = true
	self._visible = true
	self._placement = { x = 0, y = 0, width = 0, height = 0 }
	self._eventListeners = {}
	self._eventFilter = 0x00000000
	self._mouseInside = false
	self._mousePressed = false
	self._children = {}
	if parent ~= nil then
		parent:_addChild(self)
	end
#if defined(_DEBUG)
	self._debugInfo = "INITIALIZED"
#endif
end

function Widget:_addChild(child)
	table.insert(self._children, child)
	self:getAncestor():_updateEventFilter()
end

function Widget:_removeChild(child)
	for i, k in ipairs(self._children) do
		if k == child then
			table.remove(self._children, i)
			self:getAncestor():_updateEventFilter()
			return
		end
	end
	error("Not a child of this container")
end

function Widget:_isChild(child)
	if child == self then return true end
	for _, c in ipairs(self._children) do
		if c:_isChild(child) then return true end
	end
	return false
end

function Widget:_updateEventFilter()
	self._eventFilter = 0x00000000
	for k, v in pairs(self._eventListeners) do
		assert (v ~= nil)
		self._eventFilter = self._eventFilter | k.mask
	end
	for _, c in ipairs(self._children) do
		self._eventFilter = self._eventFilter | c:_updateEventFilter()
	end
	return self._eventFilter
end

function Widget:_notifyEventListeners(event)
	-- Is target exclusive receiver of events.
	local x = #Widget._exclusive
	if x > 0 then
		if Widget._exclusive[x] ~= self then return false end
	end

	-- Is target widget part of a modal.
	local m = #Widget._modal
	if m > 0 then
		if not Widget._modal[m]:_isChild(self) then return false end
	end

	-- Find event listener from type of event.
	local eventType = getmetatable(event).__index
	local ln = self._eventListeners[eventType]
	if ln ~= nil then
		if ln.fn(ln.target, event) then
#if 0
			print("Event " .. getmetatable(event).name .. " handled by " .. getmetatable(self).name)
#endif
			return true
		end
	end

	-- Event not handled.
	return false
end

function Widget:_dispatchEvent(event)
	-- Enabled, non-visible, widgets are not permitted to receive events.
	if not self._enable or not self._visible then
		return false
	end

	local eventType = getmetatable(event).__index
	if (self._eventFilter & eventType.mask) == 0x00000000 then
		return false
	end

	-- Propagate event further to children first.
	for _, c in ipairs(self._children) do
		if c:_dispatchEvent(event) then return true end
	end

	-- Synthesize enter/leave mouse events.
	if eventType == MouseMoveEvent then
		local ps = self._placement
		local pt = self:globalToLocal(event)
		local inside = (pt.x >= 0 and pt.y >= 0 and pt.x <= ps.width and pt.y <= ps.height)
		if inside ~= self._mouseInside then
			if inside then
				self:_notifyEventListeners(MouseEnterEvent.new())
			else
				self:_notifyEventListeners(MouseLeaveEvent.new())
			end
			self._mouseInside = inside
		end
	-- Synthesize press/release mouse events.
	elseif eventType == MouseDownEvent then
		local ps = self._placement
		local pt = self:globalToLocal(event)
		local inside = (pt.x >= 0 and pt.y >= 0 and pt.x <= ps.width and pt.y <= ps.height)
		if inside then
			-- First move focus to this widget.
			self:setFocus()
			-- Then issue mouse press event.
			self:_notifyEventListeners(MousePressEvent.new())
			self._mousePressed = true
		end
	elseif eventType == MouseUpEvent and self._mousePressed then
		local ps = self._placement
		local pt = self:globalToLocal(event)
		local inside = (pt.x >= 0 and pt.y >= 0 and pt.x <= ps.width and pt.y <= ps.height)
		self:_notifyEventListeners(MouseReleaseEvent.new(inside))
		self._mousePressed = false
	end

	-- Call listener attached to this widget for specific event.
	return self:_notifyEventListeners(event)
end

-- Retrieve "inner" movie clip; into which child resources are created.
-- \\note Override this if other movie clip than widget clip should be used.
function Widget:_getInnerClip()
	return self._mc
end

function Widget._createEmptyResource(parent)
	local into_mc = parent:_getInnerClip()
	assert (into_mc ~= nil)

	local depth = into_mc:getNextHighestDepth()
	local mc = into_mc:createEmptyMovieClip("", depth)
	assert (mc ~= nil)

	return mc
end

function Widget._createResource(parent, resource)
	local into_mc = parent:_getInnerClip()
	assert (into_mc ~= nil)

	local depth = into_mc:getNextHighestDepth()
	local mc = nil
	for _, rk in ipairs(Widget._resourceKits) do
		mc = rk:get():createExternalSpriteInstance(into_mc, resource, depth)
		if mc ~= nil then break end
	end

	return mc
end

function Widget:_playSound(soundId)
	local resourceManager = Widget._env:getResource():getResourceManager()
	assert (resourceManager ~= nil)

	local soundPlayer = Widget._env:getAudio():getSoundPlayer()
	assert (soundPlayer ~= nil)

	if not isa(soundId, Guid) then
		soundId = Guid(soundId)
	end

	local sound = resourceManager:bind(traktor.sound.Sound, soundId)
	if sound == nil or sound:get() == nil then return end

	soundPlayer:play(sound:get(), 0)
end

	]]>
	</text>
</object>
