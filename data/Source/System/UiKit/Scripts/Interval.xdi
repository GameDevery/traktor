<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
-- Interval

Interval = Interval or {}
Interval_meta = Interval_meta or { __index = Interval }

Interval._instances = {}

function Interval.new(duration, callFn)
	local o = {}
	setmetatable(o, Interval_meta)

	assert (duration > 0)
	assert (callFn ~= nil)

	o._duration = duration
	o._callFn = callFn

	table.insert(Interval._instances, o)
	return o
end

function Interval:cancel()
	for i, t in ipairs(Interval._instances) do
		if t == self then
			table.remove(Interval._instances, i)
			break
		end
	end
end

function Interval.update(dT)
	-- Note) Two passes is required as new intervals might be added during callbacks.

	-- First pass, count down and kick off callbacks.
	local n = #Interval._instances
	local i = 1
	while i <= n do
		local t = Interval._instances[i]
		assert (t._callFn ~= nil)
		t._duration = t._duration - dT
		if t._duration <= 0 then
			t._callFn()
			t._callFn = nil
		end
		i = i + 1
	end

	-- Second pass, remove all kicked instances.
	local n = #Interval._instances
	local i = 1
	while i <= n do
		local t = Interval._instances[i]
		if t._duration <= 0 then
			Interval._instances[i] = Interval._instances[n]
			Interval._instances[n] = nil
			n = n - 1
		else
			i = i + 1
		end
	end
end

	]]>
	</text>
</object>
