<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \\{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

-- Container

Container = Container or inherit(Widget)
Container_meta = Container_meta or { name = "Container", __index = Container }

function Container.new(parent, layout)
	local o = {}
	setmetatable(o, Container_meta)

	local mc = Widget._createEmptyResource(parent)

	o:_initialize(parent, mc, layout)
	return o
end

function Container:getPreferredSize()
	if self._layout ~= nil then
		if self:isVisible() then
			local w, h = self._layout:estimate(self)
			return { width = w, height = h }
		else
			return { width = 0, height = 0 }
		end
	else
		local w, h = 0, 0
		for _, child in ipairs(self._children) do
			local ps = child:getPreferredSize()
			w = math.max(w, ps.width)
			h = math.max(h, ps.height)
		end
		return { width = w, height = h }
	end
end

function Container:place(x, y, width, height)
	Widget.place(self, x, y, width, height)
	if self:isVisible() and self._layout ~= nil then
		local p = self:getPlacement()
		self._layout:update(self, p.width, p.height)
	end
end

function Container:layout()
	if self:isVisible() and self._layout ~= nil then
		local p = self:getPlacement()
		self._layout:update(self, p.width, p.height)
	end
end

function Container:setVisible(visible)
	Widget.setVisible(self, visible)
	self:layout()
	return self
end

-- Private

function Container:_initialize(parent, mc, layout)
	Widget._initialize(self, parent, mc)
	self._layout = layout
end
	]]>
	</text>
</object>
