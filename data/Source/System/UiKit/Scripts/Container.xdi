<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{40191BBE-DDD0-0E47-92A9-66AF2CEC0F6F}

-- Container

Container = Container or class("Container", Widget)

function Container:new(parent, layout)
	local mc = Widget._createEmptyResource(parent)
	self:_initialize(parent, mc, layout)
end

function Container:getPreferredSize()
	if self._cachedEstimate ~= nil then
		return self._cachedEstimate
	end

	if self._layout ~= nil then
		local w, h = self._layout:estimate(self)
		local e = { width = w, height = h }
		self._cachedEstimate = e
		return e
	else
		local w, h = 0, 0
		for _, child in ipairs(self._children) do
			local ps = child:getPreferredSize()
			w = math.max(w, ps.width)
			h = math.max(h, ps.height)
		end
		local e = { width = w, height = h }
		self._cachedEstimate = e
		return e
	end
end

function Container:place(x, y, width, height)
	local last = self:getPlacement()

	Widget.place(self, x, y, width, height)

	if last.width ~= width or last.height ~= height then
		self._cachedEstimate = nil
	end

	if self:isVisible(false) and self._layout ~= nil then
		local p = self:getPlacement()
		self._layout:update(self, p.width, p.height)
	end
end

function Container:layout()
	if self:isVisible(false) and self._layout ~= nil then
		local p = self:getPlacement()
		self._layout:update(self, p.width, p.height)
	end
end

function Container:setVisible(visible)
	if visible ~= self._visible then
		Widget.setVisible(self, visible)
		self:layout()
	end
	return self
end

-- Private

function Container:_initialize(parent, mc, layout)
	Widget._initialize(self, parent, mc)
	self._layout = layout
	self._cachedEstimate = nil
end

function Container:_addChild(child)
	Widget._addChild(self, child)
	self._cachedEstimate = nil
end

function Container:_removeChild(child)
	Widget._removeChild(self, child)
	self._cachedEstimate = nil
end

	]]>
	</text>
</object>
