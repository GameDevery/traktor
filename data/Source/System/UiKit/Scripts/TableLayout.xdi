<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{73B653B2-7D15-A345-93EE-B2511B60F0D0}

-- TableLayout

TableLayout = TableLayout or class("TableLayout", ILayout)

function TableLayout:new(cdef, rdef, hmargin, vmargin, hpad, vpad)
	self._cdef = cdef
	self._rdef = rdef
	self._hmargin = hmargin
	self._vmargin = vmargin
	self._hpad = hpad
	self._vpad = vpad
end

function TableLayout:estimate(container)
	local children = container:getChildren(function (c) return c.__layout ~= ILayout.FLOAT end)

	local nc = #self._cdef
	local nr = (#children + nc - 1) / math.max(nc, 1)

	-- Get preferred size of all children.
	local cps = {}
	for i = 1, #children do
		cps[i] = children[i]:getPreferredSize()
	end

	-- Measure widest preferred row.
	local widest = 0
	for r = 1, nr do
		local w = 0
		for c = 1, nc do
			local i = c + (r - 1) * nc
			if i <= #children then
				w = w + cps[i].width
			end
		end
		widest = math.max(widest, w)
	end

	-- Measure tallest preferred column.
	local tallest = 0
	for c = 1, nc do
		local h = 0
		for r = 1, nr do
			local i = c + (r - 1) * nc
			if i <= #children then
				h = h + cps[i].height
			end
		end
		tallest = math.max(tallest, h)
	end

	local mx = self._hmargin
	local my = self._vmargin
	local px = self._hpad
	local py = self._vpad

	-- Calculate largest preferred size.
	local p_w = mx * 2 + widest + px * math.max(nc - 1, 0)
	local p_h = my * 2 + tallest + py * math.max(nr - 1, 0)

	-- Calculate final dimensions by applying table algorithm.
	local w, h = self:_calculate(container, p_w, p_h)

	local tw = mx * 2 + math.max(#w - 1, 0) * px
	for _, v in ipairs(w) do tw = tw + v end

	local th = my * 2 + math.max(#h - 1, 0) * py
	for _, v in ipairs(h) do th = th + v end

	return tw, th
end

function TableLayout:update(container, width, height)
	local mx = self._hmargin
	local my = self._vmargin
	local px = self._hpad
	local py = self._vpad

	local nc = #self._cdef
	local w, h = self:_calculate(container, width, height)

	local x = mx
	local y = my

	local children = container:getChildren(function (c) return c.__layout ~= ILayout.FLOAT end)
	for i = 1, #children do
		local c = math.floor((i - 1) % nc + 1)
		local r = math.floor((i - 1) / nc + 1)
		children[i]:place(x, y, w[c], h[r])
		x = x + w[c] + px
		if c >= nc then
			x = mx
			y = y + h[r] + py
		end		
	end
end

-- Private

function TableLayout:_calculate(container, width, height)
	local mx = self._hmargin
	local my = self._vmargin
	local px = self._hpad
	local py = self._vpad

	local children = container:getChildren(function (c) return c.__layout ~= ILayout.FLOAT end)

	-- Get preferred size of all children.
	local cps = {}
	for i = 1, #children do
		cps[i] = children[i]:getPreferredSize()
	end

	local nc = #self._cdef
	local nr = (#children + nc - 1) / math.max(nc, 1)

	local aw = width - mx * 2 - math.max((nc - 1), 0) * px
	local ah = height - my * 2 - math.max((nr - 1), 0) * py

	local w = {}
	for c = 1, nc do
		if self._cdef[c] == 0 then
			w[c] = 0
			for r = 1, nr do
				local i = c + (r - 1) * nc
				if i <= #children then
					w[c] = math.max(w[c], cps[i].width)
				end
			end
			w[c] = -w[c]
		else
			w[c] = self._cdef[c]
		end
	end

	local wat = 0
	local wrt = 0
	for c = 1, nc do
		if w[c] > 0 then
			wrt = wrt + w[c]
		else
			wat = wat + -w[c]
		end
	end
	local ww = math.max(aw - wat, 0)
	for c = 1, nc do
		if w[c] > 0 then
			assert (wrt > 0)
			w[c] = (ww * w[c]) / wrt
		else
			w[c] = -w[c]
		end
	end

	local h = {}
	for r = 1, nr do
		local ir = (r - 1) % #self._rdef + 1
		if self._rdef[ir] == 0 then
			h[r] = 0
			for c = 1, nc do
				local i = c + (r - 1) * nc
				if i <= #children then
					h[r] = math.max(h[r], cps[i].height)
				end
			end
			h[r] = -h[r]
		else
			h[r] = self._rdef[ir]
		end
	end

	local hat = 0
	local hrt = 0
	for r = 1, nr do
		if h[r] > 0 then
			hrt = hrt + h[r]
		else
			hat = hat + -h[r]
		end
	end
	local hh = math.max(ah - hat, 0)
	for r = 1, nr do
		if h[r] > 0 then
			assert (hrt > 0)
			h[r] = (hh * h[r]) / hrt
		else
			h[r] = -h[r]
		end
	end

	return w, h
end
	]]>
	</text>
</object>
