<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{7947759C-88DB-794E-8D09-7F30A40B6669}
#using \{8AB41567-9AE8-D24F-BC6A-6805F6CB114B}
#using \{26FCC8EA-F349-5545-93B5-6ABDAE065E6F}

-- ScrollContainer

ScrollContainer = ScrollContainer or class("ScrollContainer", Container)

ScrollContainer.HORIZONTAL = 1
ScrollContainer.VERTICAL = 2
ScrollContainer.BOTH = ScrollContainer.HORIZONTAL | ScrollContainer.VERTICAL
ScrollContainer.AUTO = 4
ScrollContainer.SCROLLBARS = 8

function ScrollContainer:new(parent, layout, mode)
	local mc = Widget._createResource(parent, "MC_ScrollContainer")
	self:_initialize(parent, mc, layout, mode)
end

function ScrollContainer:place(x, y, width, height)
	Widget.place(self, x, y, width, height)

	local p = self:getPlacement()

	self._scrollSize.width = p.width
	self._scrollSize.height = p.height

	if self._scrollBarHorizontal ~= nil then
		local ps = self._scrollBarHorizontal:getPreferredSize()
		self._scrollSize.height = self._scrollSize.height - ps.height
	end
	if self._scrollBarVertical ~= nil then
		local ps = self._scrollBarVertical:getPreferredSize()
		self._scrollSize.width = self._scrollSize.width - ps.width
	end

	if self._scrollSize.width > 0 then
		self._mask_mc.width = self._scrollSize.width
	end
	if self._scrollSize.height > 0 then
		self._mask_mc.height = self._scrollSize.height
	end

	if self._layout ~= nil then
		self._innerSize = self:_getInnerSize()
		self._layout:update(self, self._innerSize.width, self._innerSize.height)
	end

	self:_clampScrollOffsets()
	self._inner_mc.X = -self._scroll.x
	self._inner_mc.Y = -self._scroll.y

	if self._scrollBarHorizontal ~= nil then
		local range = self._innerSize.width - self._scrollSize.width
		self._scrollBarHorizontal:place(0, self._scrollSize.height, self._scrollSize.width, p.height - self._scrollSize.height)
		self._scrollBarHorizontal:setRange(range, math.min(range / 2, 100))
		self._scrollBarHorizontal:setVisible(range > 0)
	end
	if self._scrollBarVertical ~= nil then
		local range = self._innerSize.height - self._scrollSize.height
		self._scrollBarVertical:place(self._scrollSize.width, 0, p.width - self._scrollSize.width, self._scrollSize.height)
		self._scrollBarVertical:setRange(range, math.min(range / 2, 100))
		self._scrollBarVertical:setVisible(range > 0)
	end
end

function ScrollContainer:layout()
	if self:isVisible() and self._layout ~= nil then
		local p = self:getPlacement()
		self:place(p.x, p.y, p.width, p.height)
		self._innerSize = self:_getInnerSize()
		self._layout:update(self, p.width, p.height)
	end
end

function ScrollContainer:setOffset(x, y)
	self._scroll.x = x
	self._scroll.y = y
	self:_clampScrollOffsets()
	self._inner_mc.X = -self._scroll.x
	self._inner_mc.Y = -self._scroll.y
	return self
end

function ScrollContainer:getOffset()
	return self._scroll
end

function ScrollContainer:getRange()
	return
		self._innerSize.width - self._scrollSize.width,
		self._innerSize.height - self._scrollSize.height
end

function ScrollContainer:setMotion(x, y)
	self._motion.x = x
	self._motion.y = y
	self._motion.k = 1
	return self
end

function ScrollContainer:getMotion()
	return self._motion
end

function ScrollContainer:getScrollBar(orientation)
	if orientation == ScrollContainer.HORIZONTAL then
		return self._scrollBarHorizontal
	elseif orientation == ScrollContainer.VERTICAL then
		return self._scrollBarVertical
	else
		return nil
	end
end

function ScrollContainer:resetScroll()
	self._scroll.y = 0
	self._scroll.x = 0
	self._inner_mc.X = -self._scroll.x
	self._inner_mc.Y = -self._scroll.y
	if self._scrollBarHorizontal ~= nil then
		self._scrollBarHorizontal:setPosition(0)	
	end
	if self._scrollBarVertical ~= nil then
		self._scrollBarVertical:setPosition(0)	
	end
end

function ScrollContainer:setOnScroll(scrollFn)
	self._scrollFn = scrollFn
	return self
end

-- Private

function ScrollContainer:_initialize(parent, mc, layout, mode)
	Container._initialize(self, parent, mc, layout)

	self._inner_mc = mc:getMember("innerContainer_mc")
	self._mask_mc = mc:getMember("mask_mc")

	self._mode = mode
	self._scrollSize = { width = 0, height = 0 }
	self._scrollFrom = nil
	self._scroll = { x = 0, y = 0 }
	self._motion = { x = 0, y = 0, k = 0.95 }
	self._timer = Timer()
	self._timer:start()

	-- Create scrollbars.
	if (mode & ScrollContainer.SCROLLBARS) ~= 0 then
		if (mode & ScrollContainer.HORIZONTAL) ~= 0 then
			self._scrollBarHorizontal = ScrollBar(self, ScrollBar.HORIZONTAL)
			self._scrollBarHorizontal.__private = true
			self._scrollBarHorizontal.__layout = ILayout.FLOAT
			self._scrollBarHorizontal:setOnScroll(function()
				local v = self._scrollBarHorizontal:getPosition()
				local o = self:getOffset()
				self:setOffset(v, o.y)
			end)
		end
		if (mode & ScrollContainer.VERTICAL) ~= 0 then
			self._scrollBarVertical = ScrollBar(self, ScrollBar.VERTICAL)
			self._scrollBarVertical.__private = true
			self._scrollBarVertical.__layout = ILayout.FLOAT
			self._scrollBarVertical:setOnScroll(function()
				local v = self._scrollBarVertical:getPosition()
				local o = self:getOffset()
				self:setOffset(o.x, v)
			end)
			self:addEventListener(MouseWheelEvent, self, self._onMouseWheel)
		end
	end

	-- Setup event listeners for auto scrolling.
	if (mode & ScrollContainer.AUTO) ~= 0 then
		self:addEventListener(MouseDownEvent, self, self._onMouseDown)
		self:addEventListener(MouseUpEvent, self, self._onMouseUp)
		self:addEventListener(MouseMoveEvent, self, self._onMouseMove)
	end
	self:addEventListener(FrameEvent, self, self._onFrame)

	-- Override inner clip access to ensure following child widgets
	-- are created into innerContainer_mc
	self._getInnerClip = function() return self._inner_mc end
end

function ScrollContainer:_getInnerSize()
	local w = 0
	local h = 0

	if self._layout ~= nil then
		w, h = self._layout:estimate(self)
		assert (w ~= nil)
		assert (h ~= nil)
	end

	-- Restrict scroll axises.
	if w > 0 and h > 0 then
		if (self._mode & ScrollContainer.HORIZONTAL) == 0 then	-- No horizontal scroll
			w = self._scrollSize.width
		end
		if (self._mode & ScrollContainer.VERTICAL) == 0 then	-- No vertical scroll
			h = self._scrollSize.height
		end
	end

	if self._scrollBarHorizontal ~= nil then
		local ps = self._scrollBarHorizontal:getPreferredSize()
		h = h - ps.height
	end
	if self._scrollBarVertical ~= nil then
		local ps = self._scrollBarVertical:getPreferredSize()
		w = w - ps.width
	end

	return { width = w, height = h }
end

function ScrollContainer:_clampScrollOffsets()
	if self._scroll.x > self._innerSize.width - self._scrollSize.width then
		self._scroll.x = self._innerSize.width - self._scrollSize.width
	end
	if self._scroll.x < 0 then
		self._scroll.x = 0
	end
	if self._scroll.y > self._innerSize.height - self._scrollSize.height then
		self._scroll.y = self._innerSize.height - self._scrollSize.height
	end
	if self._scroll.y < 0 then
		self._scroll.y = 0
	end
end

function ScrollContainer:_onMouseDown(event)
	if self:isVisible() then
		local x = self._mc.mouseX
		local y = self._mc.mouseY
		if x >= 0 and y >= 0 and x < self._scrollSize.width and y < self._scrollSize.height then
			if self:setExclusive() then
				self._scrollFrom =
				{
					mouseX = x,
					mouseY = y,
					scrollX = self._scroll.x,
					scrollY = self._scroll.y,
					time = self._timer:getElapsedTime()
				}
			end
			return true
		end
	end
	return false
end

function ScrollContainer:_onMouseUp(event)
	if self._scrollFrom == nil then
		return false
	end
	self._scrollFrom = nil
	self:releaseExclusive()
	return true
end

function ScrollContainer:_onMouseMove(event)
	if self._scrollFrom == nil then
		return false
	end

	local time = self._timer:getElapsedTime()

	local dx = self._mc.mouseX - self._scrollFrom.mouseX
	local dy = self._mc.mouseY - self._scrollFrom.mouseY

	self._scroll.x = self._scrollFrom.scrollX - dx
	self._scroll.y = self._scrollFrom.scrollY - dy
	self:_clampScrollOffsets()

	self._inner_mc.X = -self._scroll.x
	self._inner_mc.Y = -self._scroll.y

	if time > self._scrollFrom.time then
		local dt = time - self._scrollFrom.time
		self._motion.x = dx / dt
		self._motion.y = dy / dt
		self._motion.k = 0.95
	end

	if self._scrollBarHorizontal ~= nil then
		local v = self:getOffset()
		self._scrollBarHorizontal:setPosition(v.x)
	end
	if self._scrollBarVertical ~= nil then
		local v = self:getOffset()
		self._scrollBarVertical:setPosition(v.y)
	end

	if self._scrollFn ~= nil then
		self._scrollFn()
	end

	return true
end

function ScrollContainer:_onMouseWheel(event)
	local range = self._innerSize.width - self._scrollSize.width
	local offset = self:getOffset()
	self:setOffset(offset.x, offset.y - event.delta * range / 4)
	return true
end

function ScrollContainer:_onFrame(event)
	if self._scrollFrom == nil and (math.abs(self._motion.x) > 1 or math.abs(self._motion.y) > 1) then
		self._scroll.x = self._scroll.x - self._motion.x * 1/60
		self._scroll.y = self._scroll.y - self._motion.y * 1/60
		self:_clampScrollOffsets()

		self._inner_mc.X = -self._scroll.x
		self._inner_mc.Y = -self._scroll.y

		self._motion.x = self._motion.x * self._motion.k
		self._motion.y = self._motion.y * self._motion.k

		if self._scrollBarHorizontal ~= nil then
			local v = self:getOffset()
			self._scrollBarHorizontal:setPosition(v.x)
		end
		if self._scrollBarVertical ~= nil then
			local v = self:getOffset()
			self._scrollBarVertical:setPosition(v.y)
		end

		if self._scrollFn ~= nil then
			self._scrollFn()
		end

		return true
	end
	return false
end

	]]>
	</text>
</object>
