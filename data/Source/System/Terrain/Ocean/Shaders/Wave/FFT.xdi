<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.render.ShaderModule">
	<text>
	<![CDATA[
// FFT ocean functions
// https://github.com/GarrettGunnell/Water
// https://github.com/gasgiant/FFT-Ocean

#using \{921BBC45-4C75-624A-AA78-9B5FEC80645B}

#define SIZE 1024
#define LOG_SIZE 10

#define PI 3.14159265358979323846f
#define TWO_PI (PI * 2.0f)


const vec2 _Lambda = vec2(1.0f, 1.0f);
const float _FoamThreshold = 0.5f;
const float _FoamAdd = 0.01f;
const float _FoamBias = 0.5f;
const float _FoamDecayRate = 0.05f;

struct Configuration
{
	int seed;
	float depth;
	float gravity;
	float lowCutoff;
	float highCutoff;
	vec4 lengthScales;
};

struct SpectrumParameters
{
	float scale;
	float angle;
	float spreadBlend;
	float swell;
	float alpha;
	float peakOmega;
	float gamma;
	float shortWavesFade;
};

Configuration getDefaultConfiguration()
{
	Configuration configuration;
	configuration.seed = 0;
	configuration.depth = 1000.0f;
	configuration.gravity = 9.81f;
	configuration.lowCutoff = 0.0001f;
	configuration.highCutoff = 100.0f;
	configuration.lengthScales = vec4(64.0f, 1.0f, 1.0f, 1.0f);
	return configuration;
}

SpectrumParameters getDefaultSpectrum()
{
	SpectrumParameters spectrum;
	spectrum.scale = 0.075f;
	spectrum.angle = -PI / 2;
	spectrum.spreadBlend = 0.8f;
	spectrum.swell = 0.35f;
	spectrum.alpha = 0.2f;
	spectrum.peakOmega = 1.0f;
	spectrum.gamma = 0.5f;
	spectrum.shortWavesFade = 0.08f;
	return spectrum;
}

// JONSWAP

float TMACorrection(Configuration configuration, float omega)
{
	const float omegaH = omega * sqrt(configuration.depth / configuration.gravity);
	if (omegaH <= 1.0f)
		return 0.5f * omegaH * omegaH;
	else if (omegaH < 2.0f)
		return 1.0f - 0.5f * (2.0f - omegaH) * (2.0f - omegaH);
	else
		return 1.0f;
}

float JONSWAP(Configuration configuration, SpectrumParameters spectrum, float omega)
{
	const float sigma = (omega <= spectrum.peakOmega) ? 0.07f : 0.09f;
	const float r = exp(-(omega - spectrum.peakOmega) * (omega - spectrum.peakOmega) / 2.0f / sigma / sigma / spectrum.peakOmega / spectrum.peakOmega);
	const float oneOverOmega = 1.0f / omega;
	const float peakOmegaOverOmega = spectrum.peakOmega / omega;
	return
		spectrum.scale * TMACorrection(configuration, omega) * spectrum.alpha * configuration.gravity * configuration.gravity *
		oneOverOmega * oneOverOmega * oneOverOmega * oneOverOmega * oneOverOmega *
		exp(-1.25f * peakOmegaOverOmega * peakOmegaOverOmega * peakOmegaOverOmega * peakOmegaOverOmega) *
		pow(abs(spectrum.gamma), r);
}

// Spectrum (compute)

vec2 UniformToGaussian(float u1, float u2)
{
	const float R = sqrt(-2.0f * log(u1));
	const float theta = 2.0f * PI * u2;
    return vec2(R * cos(theta), R * sin(theta));
}

float Dispersion(Configuration configuration, float kMag)
{
	return sqrt(configuration.gravity * kMag * tanh(min(kMag * configuration.depth, 20)));
}

float DispersionDerivative(Configuration configuration, float kMag)
{
	const float th = tanh(min(kMag * configuration.depth, 20));
	const float ch = cosh(kMag * configuration.depth);
	return configuration.gravity * (configuration.depth * kMag / ch / ch + th) / Dispersion(configuration, kMag) / 2.0f;
}

float SpreadPower(float omega, float peakOmega)
{
	if (omega > peakOmega)
		return 9.77f * pow(abs(omega / peakOmega), -2.5f);
	else
		return 6.97f * pow(abs(omega / peakOmega), 5.0f);
}

float NormalizationFactor(float s)
{
	const float s2 = s * s;
	const float s3 = s2 * s;
	const float s4 = s3 * s;
	if (s < 5)
		return -0.000564f * s4 + 0.00776f * s3 - 0.044f * s2 + 0.192f * s + 0.163f;
	else
		return -4.80e-08f * s4 + 1.07e-05f * s3 - 9.53e-04f * s2 + 5.90e-02f * s + 3.93e-01f;
}

float Cosine2s(float theta, float s)
{
	return NormalizationFactor(s) * pow(abs(cos(0.5f * theta)), 2.0f * s);
}

float DirectionSpectrum(SpectrumParameters spectrum, float theta, float omega)
{
	const float s = SpreadPower(omega, spectrum.peakOmega) + 16 * tanh(min(omega / spectrum.peakOmega, 20)) * spectrum.swell * spectrum.swell;
	return mix(2.0f / 3.1415f * cos(theta) * cos(theta), Cosine2s(theta - spectrum.angle, s), spectrum.spreadBlend);
}

float ShortWavesFade(SpectrumParameters spectrum, float kLength)
{
	return exp(-spectrum.shortWavesFade * spectrum.shortWavesFade * kLength * kLength);
}

vec4 CalculateSpectrum(Configuration configuration, SpectrumParameters spectrum, ivec3 id, uint tile)
{
	uint seed = id.x + SIZE * id.y + SIZE;
	seed += configuration.seed;
	seed += tile + uint(hash(seed)) * 10;
	
	const float lengthScale = configuration.lengthScales[tile];
	
	const float halfN = SIZE / 2.0f;

	const float deltaK = 2.0f * PI / lengthScale;
	const vec2 K = (id.xy - halfN) * deltaK;
	const float kLength = length(K);

	const vec4 uniformRandSamples = vec4(hash(seed), hash(seed * 2), hash(seed * 3), hash(seed * 4));
	const vec2 gauss1 = UniformToGaussian(uniformRandSamples.x, uniformRandSamples.y);
	const vec2 gauss2 = UniformToGaussian(uniformRandSamples.z, uniformRandSamples.w);

	if (configuration.lowCutoff <= kLength && kLength <= configuration.highCutoff)
	{
		const float kAngle = atan(K.y, K.x);
		const float omega = Dispersion(configuration, kLength);
		const float dOmegadk = DispersionDerivative(configuration, kLength);

		const float fSpectrum = JONSWAP(configuration, spectrum, omega) * DirectionSpectrum(spectrum, kAngle, omega) * ShortWavesFade(spectrum, kLength);
            
		//if (_Spectrums[i * 2 + 1].scale > 0)
		//	fSpectrum += JONSWAP(omega, _Spectrums[i * 2 + 1]) * DirectionSpectrum(kAngle, omega, _Spectrums[i * 2 + 1]) * ShortWavesFade(kLength, _Spectrums[i * 2 + 1]);
            
		return vec4(vec2(gauss2.x, gauss1.y) * sqrt(2 * fSpectrum * abs(dOmegadk) / kLength * deltaK * deltaK), 0.0f, 0.0f);
	}
	else
	{
		return vec4(0.0f);
	}
}

// Evolve spectrum

vec2 EulerFormula(float x)
{
	return vec2(cos(x), sin(x));
}

vec2 ComplexMult(vec2 a, vec2 b)
{
	return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

void EvolveSpectrum(
	Configuration configuration,
	ivec3 id,
	uint tile,
	vec4 initialSignal,
	float time,
	float repeatTime,
	out vec4 outDisplacement,
	out vec4 outSlope
)
{
    const float lengthScale = configuration.lengthScales[tile];

	vec2 h0 = initialSignal.xy;
	vec2 h0conj = initialSignal.zw;

	float halfN = SIZE / 2.0f;
	vec2 K = (id.xy - halfN) * 2.0f * PI / lengthScale;
	float kMag = length(K);
	float kMagRcp = 1.0f / kMag;

	if (kMag < 0.0001f)
		kMagRcp = 1.0f;

	float w_0 = 2.0f * PI / repeatTime;
	float dispersion = floor(sqrt(configuration.gravity * kMag) / w_0) * w_0 * time;

	vec2 exponent = EulerFormula(dispersion);
	
	vec2 htilde = ComplexMult(h0, exponent) + ComplexMult(h0conj, vec2(exponent.x, -exponent.y));
	vec2 ih = vec2(-htilde.y, htilde.x);
	
	vec2 displacementX = ih * K.x * kMagRcp;
	vec2 displacementY = htilde;
	vec2 displacementZ = ih * K.y * kMagRcp;
	
	vec2 displacementX_dx = -htilde * K.x * K.x * kMagRcp;
	vec2 displacementY_dx = ih * K.x;
	vec2 displacementZ_dx = -htilde * K.x * K.y * kMagRcp;

	vec2 displacementY_dz = ih * K.y;
	vec2 displacementZ_dz = -htilde * K.y * K.y * kMagRcp;

	vec2 htildeDisplacementX = vec2(displacementX.x - displacementZ.y, displacementX.y + displacementZ.x);
	vec2 htildeDisplacementZ = vec2(displacementY.x - displacementZ_dx.y, displacementY.y + displacementZ_dx.x);
        
	vec2 htildeSlopeX = vec2(displacementY_dx.x - displacementY_dz.y, displacementY_dx.y + displacementY_dz.x);
	vec2 htildeSlopeZ = vec2(displacementX_dx.x - displacementZ_dz.y, displacementX_dx.y + displacementZ_dz.x);

	outDisplacement = vec4(htildeDisplacementX, htildeDisplacementZ);
	outSlope = vec4(htildeSlopeX, htildeSlopeZ);
}

// FFT

vec2 ComplexExp(vec2 a)
{
    return vec2(cos(a.y), sin(a.y) * exp(a.x));
}

vec4 ComputeTwiddleFactorAndInputIndices(Configuration configuration, uvec2 id)
{
    uint b = SIZE >> (id.x + 1);
    vec2 mult = 2 * PI * vec2(0.0f, 1.0f) / SIZE;
    uint i = (2 * b * (id.y / b) + id.y % b) % SIZE;
    vec2 twiddle = ComplexExp(-mult * ((id.y / b) * b));
    return vec4(twiddle, i, i + b);
}

shared vec4 fftGroupBuffer[2][SIZE];

void ButterflyValues(uint step, uint index, out uvec2 indices, out vec2 twiddle)
{
    const float twoPi = 6.28318530718;
    uint b = SIZE >> (step + 1);
    uint w = b * (index / b);
    uint i = (w + index) % SIZE;

	twiddle.y = sin(-twoPi / SIZE * w);
	twiddle.x = cos(-twoPi / SIZE * w);

    // This is what makes it the inverse FFT
    twiddle.y = -twiddle.y;
    indices = uvec2(i, i + b);
}

vec4 FFT(uint threadIndex, vec4 inputData)
{
    fftGroupBuffer[0][threadIndex] = inputData;
    
	groupMemoryBarrier();
	barrier();

    int flag = 0;

    [[unroll]]
    for (uint step = 0; step < LOG_SIZE; ++step)
	{
        uvec2 inputsIndices;
        vec2 twiddle;
        ButterflyValues(step, threadIndex, inputsIndices, twiddle);

        vec4 v = fftGroupBuffer[flag][inputsIndices.y];
        fftGroupBuffer[1 - flag][threadIndex] = fftGroupBuffer[flag][inputsIndices.x] + vec4(ComplexMult(twiddle, v.xy), ComplexMult(twiddle, v.zw));

        flag = 1 - flag;

		groupMemoryBarrier();
		barrier();
    }

    return fftGroupBuffer[flag][threadIndex];
}

// Displacement

vec4 Permutate(vec4 data, ivec3 id)
{
	return data * (1.0f - 2.0f * ((id.x + id.y) % 2));
}

void GenerateDisplacement(Configuration configuration, ivec3 id, uint tile, vec4 htildeDisplacement, vec4 htildeSlope, out vec4 outDisplacement, out vec4 outSlope, inout float inoutFoam)
{
	htildeDisplacement = Permutate(htildeDisplacement, id);
	htildeSlope = Permutate(htildeSlope, id);

	vec2 dxdz = htildeDisplacement.rg;
	vec2 dydxz = htildeDisplacement.ba;
	vec2 dyxdyz = htildeSlope.rg;
	vec2 dxxdzz = htildeSlope.ba;
        
	vec3 displacement = vec3(_Lambda.x * dxdz.x, dydxz.x, _Lambda.y * dxdz.y);
	vec2 slopes = dyxdyz.xy / (1.0f + abs(dxxdzz * _Lambda));

	float jacobian = (1.0f + _Lambda.x * dxxdzz.x) * (1.0f + _Lambda.y * dxxdzz.y) - _Lambda.x * _Lambda.y * dydxz.y * dydxz.y;
	float biasedJacobian = max(0.0f, -(jacobian - _FoamBias));

	if (biasedJacobian > _FoamThreshold)
		inoutFoam += _FoamAdd * biasedJacobian;
	inoutFoam *= exp(-_FoamDecayRate);
	inoutFoam = clamp(inoutFoam, 0.0f, 1.0f);

	outDisplacement = vec4(displacement, 0.0f);
	outSlope = vec4(slopes, 0.0f, 0.0f);

//        float covariance = slopes.x * slopes.y;

//        float foam = _DisplacementTextures[uint3(id.xy, i)].a;
//        foam *= exp(-_FoamDecayRate);
//        foam = saturate(foam);


//        _DisplacementTextures[uint3(id.xy, i)] = float4(displacement, foam);
//        _SlopeTextures[uint3(id.xy, i)] = float2(slopes);
//    }
}

	]]>
	</text>
</object>
