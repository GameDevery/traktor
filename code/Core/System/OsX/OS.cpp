#include <unistd.h>#include <sys/param.h>#include <pwd.h>#include "Core/System/OS.h"#include "Core/System/OsX/SharedMemoryOsX.h"#include "Core/Singleton/SingletonManager.h"#include "Core/Misc/TString.h"namespace traktor{OS& OS::getInstance(){	static OS* s_instance = 0;	if (!s_instance)	{		s_instance = new OS();		SingletonManager::getInstance().add(s_instance);	}	return *s_instance;}uint32_t OS::getCPUCoreCount() const{	return 2;}std::wstring OS::getComputerName() const{	char name[MAXHOSTNAMELEN];	if (gethostname(name, sizeof_array(name)) != -1)		return mbstows(name);	return L"Unavailable";}std::wstring OS::getCurrentUser() const{	passwd* pwd = getpwuid(geteuid());	if (!pwd)		return L"Unavailable";	const char* who = pwd->pw_name;	if (!who)		return L"Unavailable";	return mbstows(who);}std::wstring OS::getUserHomePath() const{	return L"~";}std::wstring OS::getUserApplicationDataPath() const{	return L"~";}std::wstring OS::getWritableFolderPath() const{	return L"~";}bool OS::editFile(const Path& file) const{	return false;}bool OS::exploreFile(const Path& file) const{	return false;}Ref< IProcess > OS::execute(	const Path& file,	const std::wstring& commandLine,	const Path& workingDirectory,	const envmap_t* envmap,	bool redirect,	bool mute) const{	return 0;}Ref< ISharedMemory > OS::createSharedMemory(const std::wstring& name, uint32_t size) const{	return new SharedMemoryOsX(size);}OS::OS(){}OS::~OS(){}void OS::destroy(){	delete this;}}