module traktor
{

	/*! \brief */
	interface UInt64
	{
		string format();
	}

	/*! \brief */
	interface Guid
	{
		Guid constructor();

		Guid constructor(string guid);

		static Guid create();

		void set(string guid);

		string format();

		bool isValid();

		bool isNull();

		bool isNotNull();
	}

	/*! \brief */
	interface Vector2
	{
		Vector2 constructor();

		Vector2 constructor(float x, float y);

		void set(float x, float y);

		float x();

		float y();

		Vector2 add(Vector2 right);

		Vector2 sub(Vector2 right);

		Vector2 mul(Vector2 right);

		Vector2 div(Vector2 right);

		Vector2 addf(float right);

		Vector2 subf(float right);

		Vector2 mulf(float right);

		Vector2 divf(float right);

		float dot(Vector2 right);

		float length();

		Vector2 normalized();

		Vector2 neg();

		Vector2 perpendicular();

		static Vector2 zero();

		static Vector2 lerp(Vector2 a, Vector2 b, float c);

		Vector2 operator + (Vector2 right);

		Vector2 operator + (float right);

		Vector2 operator - (Vector2 right);

		Vector2 operator - (float right);

		Vector2 operator * (Vector2 right);

		Vector2 operator * (float right);

		Vector2 operator / (Vector2 right);

		Vector2 operator / (float right);
	}

	/*! \brief 4-dimensional vector. */
	interface Vector4
	{
		/*! \brief 3-dimensional dot-product. */
		static float dot3(Vector4 a, Vector4 b);
	}

	/*! \brief */
	interface Quaternion
	{

	}

	/*! \brief */
	interface Plane
	{

	}

	/*! \brief */
	interface Transform
	{

	}

	/*! \brief */
	interface Aabb3
	{

	}

	/*! \brief */
	interface Frustum
	{

	}

	/*! \brief */
	interface Matrix44
	{

	}

	/*! \brief */
	interface Color4f
	{

	}

	/*! \brief */
	interface Color4ub
	{

	}

	/*! \brief */
	interface Range
	{

	}

	/*! \brief */
	interface RefArray
	{

	}

	/*! \brief */
	interface StdVector
	{

	}

	// ----

	/*! \brief */
	interface Path
	{

	}

	/*! \brief */
	interface IStream
	{

	}

	/*! \brief */
	interface FileSystem
	{

	}

	/*! \brief */
	interface IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyBoolean : IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyColor : IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyFloat : IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyGroup : IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyInteger : IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyObject : IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyString : IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyStringArray : IPropertyValue
	{

	}

	/*! \brief */
	interface PropertyStringSet : IPropertyValue
	{

	}
}

module traktor.db
{
	interface Database
	{

	}

	interface Group
	{

	}

	interface Instance
	{

	}
}

module traktor.drawing
{
	interface IImageFilter
	{

	}

	interface Image
	{

	}
}

module traktor.flash
{
	interface FlashMoviePlayer
	{

	}

	interface FlashLayer
	{

	} 
}

module traktor.i18n
{
	interface Dictionary
	{

	}

	interface I18N
	{

	}
}

module traktor.amalgam
{
	interface IEnvironment
	{
		Database getDatabase();

		IAudioServer getAudio();

		IInputServer getInput();

		IOnlineServer getOnline();

		IPhysicsServer getPhysics();

		IRenderServer getRender();

		IResourceServer getResource();

		IScriptServer getScript();

		IWorldServer getWorld();

		PropertyGroup getSettings();

		bool reconfigure();
	}

	interface IAudioServer
	{
		SoundSystem getSoundSystem();

		ISoundPlayer getSoundPlayer();

		SurroundEnvironment getSurroundEnvironment();
	}

	interface IInputServer
	{
		bool isFabricating();

		bool abortedFabricating();

		bool resetInputSource(string sourceId);

		bool isIdle();

		InputSystem getInputSystem();

		InputMapping getInputMapping();

		RumbleEffectPlayer getRumbleEffectPlayer();
	}

	interface IOnlineServer
	{
		ISessionManager getSessionManager();
	}

	interface IPhysicsServer
	{
		IPhysicsManager getPhysicsManager();
	}

	interface IRenderServer
	{
		IRenderSystem getRenderSystem();

		IRenderView getRenderView();

		float getScreenAspectRatio();

		float getViewAspectRatio();

		float getAspectRatio();

		bool getStereoscopic();

		int getMultiSample();

		int getFrameRate();
	}

	interface IResourceServer
	{
		IResourceManager getResourceManager();
	}

	interface IWorldServer
	{
		void addEntityFactory(IEntityFactory entityFactory);

		void removeEntityFactory(IEntityFactory entityFactory);

		void addEntityRenderer(IEntityRenderer entityRenderer);

		void removeEntityRenderer(IEntityRenderer entityRenderer);

		IEntityBuilder getEntityBuilder();

		WorldEntityRenderers getEntityRenderers();

		IEntityEventManager getEntityEventManager();

		int getFrameCount();
	}
}

module traktor.world
{
	interface Entity
	{

	}
}

module traktor.ai
{
	
	/*! \brief Continuous path-finding query. */
	interface MoveQuery
	{
		/*! \brief Update query. */
		Vector4 update(Vector4 currentPosition);
	};

	/*! \brief Navigation mesh. */
	interface NavMesh
	{
		MoveQuery createMoveQuery(Vector4 startPosition, Vector4 endPosition);

		Vector4 findClosestPoint(Vector4 searchFrom);

		Vector4 findRandomPoint();

		Vector4 findRandomPoint(Vector4 center, float radius);
	};

	/*! \brief Scene navigation mesh entity. */
	interface NavMeshEntity : public Entity
	{
		NavMesh get();
	};

};
