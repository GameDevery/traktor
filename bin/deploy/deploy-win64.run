import(traktor)


function string:split(sep)
	local sep, fields = sep or ":", {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end


function string:endswith(send)
	return #self >= #send and self:find(send, #self - #send + 1, true) and true or false
end


function string:trim()
	return self:find'^%s*$' and '' or self:match'^%s*(.*%S)'
end


function string:starts(start)
   return string.sub(self, 1, string.len(start)) == start
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Pipeline.App -p -s=Pipeline"
	for i = 1, args:size() - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function getSystemPaths()
	if os.getRegistry == nil then
		stderr:printLn("Unforntunally statically link win64 product is currently only available from a Windows host.")
		return nil
	end

	-- Get Windows SDK installation path.
	local sdkPath = os:getRegistry("HKEY_LOCAL_MACHINE", "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.1A", "InstallationFolder")
	if sdkPath == nil then
		sdkPath = os:getRegistry("HKEY_CURRENT_USER", "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.1A", "InstallationFolder")
	end
	if sdkPath == nil then
		sdkPath = os:getRegistry("HKEY_LOCAL_MACHINE", "SOFTWARE\\Wow6432Node\\Microsoft SDKs\\Windows\\v7.1A", "InstallationFolder")
	end
	if sdkPath == nil then
		sdkPath = os:getRegistry("HKEY_CURRENT_USER", "SOFTWARE\\Wow6432Node\\Microsoft SDKs\\Windows\\v7.1A", "InstallationFolder")
	end
	if sdkPath == nil then
		stderr:printLn("Unable to determine Windows SDK install path; please ensure Windows SDK 7.1A is properly installed")
		return nil
	end

	-- Get Visual Studio 2012 installation path.
	local vsPath = os:getRegistry("HKEY_LOCAL_MACHINE", "SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VS7", "11.0")
	if vsPath == nil then
		vsPath = os:getRegistry("HKEY_CURRENT_USER", "SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VS7", "InstallationFolder")
	end
	if vsPath == nil then
		vsPath = os:getRegistry("HKEY_LOCAL_MACHINE", "SOFTWARE\\Wow6432Node\\VisualStudio\\SxS\\VS7", "InstallationFolder")
	end
	if vsPath == nil then
		vsPath = os:getRegistry("HKEY_CURRENT_USER", "SOFTWARE\\Wow6432Node\\VisualStudio\\SxS\\VS7", "InstallationFolder")
	end	
	if vsPath == nil then
		stderr:printLn("Unable to determine Visual Studio 2012 install path; please ensure Visual Studio 2012 is properly installed.")
		return nil
	end

	local p = {}
	p.vcBinPath = vsPath .. "VC\\bin\\amd64"
	p.vcLibPath = vsPath .. "VC\\lib\\amd64"
	p.sdkBinPath = sdkPath .. "Bin"
	p.sdkLibPath = sdkPath .. "Lib\\x64"
	p.dxLibPath = "$(TRAKTOR_HOME)\\3rdp\\DirectX SDK (June 2010)\\Lib\\x64"

	return p
end


function deployStatic(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	local p = getSystemPaths()
	if p == nil then return 1 end

	local link = p.vcBinPath .. "\\link.exe"
	if not fileSystem:exist(Path(link)) then
		stderr:printLn("Unable to find Visual Studio 2012 C++ linker; please ensure Visual Studio 2012 is properly installed.")
		return 1
	end

	local mt = p.sdkBinPath .. "\\mt.exe"
	if not fileSystem:exist(Path(mt)) then
		stderr:printLn("Unable to find Windows SDK manifest tool; please ensure Windows SDK 7.1A is properly installed.")
		return 1
	end

	local rc = p.sdkBinPath .. "\\rc.exe"
	if not fileSystem:exist(Path(mt)) then
		stderr:printLn("Unable to find Windows SDK resource tool; please ensure Windows SDK 7.1A is properly installed.")
		return 1
	end

	-- Determine path to module libraries.
	local prepend
	if not debug then
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/releasestatic/"
	else
		stdout:printLn("Using *DEBUG* binaries")
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/debugstatic/"
	end

	-- Append system path to files.
	local wholeLinkFiles = ""
	local externalLinkFiles = ""
	local externalCopyFiles = ""
	local linkerIncludes = ""

	local files = os:getEnvironment("DEPLOY_EXTERN_FILES_STATIC"):split(" ")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			if debug then
				local debugFile = f
				if f:endswith(".lib") then
					debugFile = f:sub(1, string.len(f) - 4) .. "_d.lib"
				elseif f:endswith(".dll") then
					debugFile = f:sub(1, string.len(f) - 4) .. "_d.dll"
				end
				if fileSystem:exist(Path(prepend .. debugFile)) then
					f = debugFile
				end
			end
			if f:endswith(".lib") then
				externalLinkFiles = externalLinkFiles .. prepend .. f .. " "
			else
				externalCopyFiles = externalCopyFiles .. f .. " "
			end
		end
	end

	local files = os:getEnvironment("DEPLOY_FILES_STATIC"):split(" ")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			linkerIncludes = linkerIncludes .. "/INCLUDE:__module__" .. f:sub(1, string.len(f) - 4):gsub("%.", "_") .. " "
			if debug then
				local debugFile = f
				if f:endswith(".lib") then
					debugFile = f:sub(1, string.len(f) - 4) .. "_d.lib"
				elseif f:endswith(".dll") then
					debugFile = f:sub(1, string.len(f) - 4) .. "_d.dll"
				end
				if fileSystem:exist(Path(prepend .. debugFile)) then
					f = debugFile
				end
			end				
			wholeLinkFiles = wholeLinkFiles .. prepend .. f .. " "
		end
	end

	-- Compile resources.
	local cmd = "\"" .. rc .. "\" /fo\"$(DEPLOY_EXECUTABLE).res\" $(TRAKTOR_HOME)/res/Traktor.Amalgam.rc"
	local result = run:execute(cmd, "(null)")
	if result ~= 0 then
		stderr:printLn("Unable to build product resources.")
		stderr:printLn(cmd)
		return 1
	end

	-- Link files into an executable product.
	local cmd = "\"" .. link .. "\" " .. externalLinkFiles .. " " .. wholeLinkFiles .. " " .. linkerIncludes
	cmd = cmd .. " msvcrt.lib winmm.lib iphlpapi.lib ws2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib"
	cmd = cmd .. " comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"
	cmd = cmd .. " comctl32.lib d2d1.lib dwrite.lib gdiplus.lib msimg32.lib d3d11.lib dxgi.lib dinput8.lib dxguid.lib xinput.lib"
	cmd = cmd .. " $(DEPLOY_EXECUTABLE).res"
	cmd = cmd .. " /OUT:$(DEPLOY_EXECUTABLE).exe"
	cmd = cmd .. " /LIBPATH:\"" .. p.dxLibPath .. "\""
	cmd = cmd .. " /LIBPATH:\"" .. p.sdkLibPath .. "\""
	cmd = cmd .. " /LIBPATH:\"" .. p.vcLibPath .. "\""
	cmd = cmd .. " /MACHINE:X64"
	cmd = cmd .. " /SUBSYSTEM:WINDOWS"
	if not debug then
		cmd = cmd .. " /LTCG /OPT:REF"
	else
		cmd = cmd .. " /DEBUG"
	end
	local result = run:execute(cmd, "(null)")
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		return 1
	end

	-- Embed manifest in executable product.
	local cmd = "\"" .. mt .. "\" -manifest $(TRAKTOR_HOME)/res/manifest-win64.xml -outputresource:$(DEPLOY_EXECUTABLE).exe;1"
	local result = run:execute(cmd, "(null)")
	if result ~= 0 then
		stderr:printLn("Unable to embed manifest into executable product.")
		stderr:printLn(cmd)
		return 1
	end

	-- Deploy executable into remote folder.
	run:execute("$(TRAKTOR_HOME)/bin/win32/RemoteDeploy $(DEPLOY_TARGET_HOST) $(DEPLOY_EXECUTABLE).exe", "(null)")
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Deploy external files into remote folder.
	if externalCopyFiles ~= "" then
		if not debug then
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/releasestatic")
		else
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/debugstatic")
		end
		run:execute("$(TRAKTOR_HOME)/bin/win32/RemoteDeploy $(DEPLOY_TARGET_HOST) " .. externalCopyFiles, "(null)")
		run:popd()
		if run:exitCode() ~= 0 then return run:exitCode() end
	end

	-- Clean some unwanted files.
	run:rm("*.exp")
	run:rm("*.lib")
	run:rm("*.res")

	return 0
end


function deployShared(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Deploy binaries to target.
	if not debug then
		stdout:printLn("Deploying binaries to target host...")
		run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/releaseshared")
	else
		stdout:printLn("Deploying *DEBUG* binaries to target host...")
		run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/debugshared")
	end

	local files = os:getEnvironment("DEPLOY_FILES_SHARED"):split(" ")
	local deployFiles = ""

	for _, f in ipairs(files) do
		if debug then
			local debugFile = f
			if f:endswith(".dll") then
				debugFile = f:sub(1, string.len(f) - 4) .. "_d.dll"
			elseif f:endswith(".exe") then
				debugFile = f:sub(1, string.len(f) - 4) .. "_d.exe"
			end
			if fileSystem:exist(Path(run:cwd() .. "/" .. debugFile)) then
				f = debugFile
			end
		end
		deployFiles = deployFiles .. " " .. f	
	end

	run:execute("$(TRAKTOR_HOME)/bin/win32/RemoteDeploy $(DEPLOY_TARGET_HOST) " .. deployFiles, "(null)")
	if run:exitCode() ~= 0 then return run:exitCode() end
	run:popd()

	return 0
end


function deploy(args)
	-- Deploy application configuration to target.
	stdout:printLn("Deploying resources to target host...")
	run:execute("$(TRAKTOR_HOME)/bin/win32/RemoteDeploy $(DEPLOY_TARGET_HOST) Application.config", "(null)")
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Continue with either statically linked product or as a bunch of dynamic libraries.
	local staticLink = (os:getEnvironment("DEPLOY_STATIC_LINK") ~= "")
	if staticLink then
		return deployStatic(args)
	else
		return deployShared(args)
	end
end


function launch(args)
	stdout:printLn("Launching Win64...")

	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")

	if debug then
		if string.endswith(executable, ".exe") then
			executable = executable:sub(1, string.len(f) - 4) .. "_d.exe"
		else
			executable = executable .. "_d"
		end
	end

	return run:execute("$(TRAKTOR_HOME)/bin/win32/RemoteLaunch $(DEPLOY_TARGET_HOST) " .. executable .. " \\-s Application.config", "(null)")
end


function migrateStatic(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	local p = getSystemPaths()
	if p == nil then return 1 end

	local link = p.vcBinPath .. "\\link.exe"
	if not fileSystem:exist(Path(link)) then
		stderr:printLn("Unable to find Visual Studio 2012 C++ linker; please ensure Visual Studio 2012 is properly installed.")
		return 1
	end

	local mt = p.sdkBinPath .. "\\mt.exe"
	if not fileSystem:exist(Path(mt)) then
		stderr:printLn("Unable to find Windows SDK manifest tool; please ensure Windows SDK 7.1A is properly installed.")
		return 1
	end

	local rc = p.sdkBinPath .. "\\rc.exe"
	if not fileSystem:exist(Path(mt)) then
		stderr:printLn("Unable to find Windows SDK resource tool; please ensure Windows SDK 7.1A is properly installed.")
		return 1
	end

	-- Determine path to module libraries.
	local prepend
	if not debug then
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/releasestatic/"
	else
		stdout:printLn("Using *DEBUG* binaries")
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/debugstatic/"
	end

	-- Append system path to files.
	local wholeLinkFiles = ""
	local externalLinkFiles = ""
	local externalCopyFiles = ""
	local linkerIncludes = ""

	local files = os:getEnvironment("DEPLOY_EXTERN_FILES_STATIC"):split(" ")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			if debug then
				local debugFile = f
				if f:endswith(".lib") then
					debugFile = f:sub(1, string.len(f) - 4) .. "_d.lib"
				elseif f:endswith(".dll") then
					debugFile = f:sub(1, string.len(f) - 4) .. "_d.dll"
				end
				if fileSystem:exist(Path(prepend .. debugFile)) then
					f = debugFile
				end
			end
			if f:endswith(".lib") then
				externalLinkFiles = externalLinkFiles .. prepend .. f .. " "
			else
				externalCopyFiles = externalCopyFiles .. f .. " "
			end
		end
	end

	local files = os:getEnvironment("DEPLOY_FILES_STATIC"):split(" ")
	for i = #files, 1, -1 do -- We must link in reverse order to ensure global initializers are executed correctly.
		local f = files[i]
		if f ~= "" then
			linkerIncludes = linkerIncludes .. "/INCLUDE:__module__" .. f:sub(1, string.len(f) - 4):gsub("%.", "_") .. " "
			if debug then
				local debugFile = f
				if f:endswith(".lib") then
					debugFile = f:sub(1, string.len(f) - 4) .. "_d.lib"
				elseif f:endswith(".dll") then
					debugFile = f:sub(1, string.len(f) - 4) .. "_d.dll"
				end
				if fileSystem:exist(Path(prepend .. debugFile)) then
					f = debugFile
				end
			end				
			wholeLinkFiles = wholeLinkFiles .. prepend .. f .. " "
		end
	end

	-- Compile resources.
	local cmd = "\"" .. rc .. "\" /fo\"$(DEPLOY_EXECUTABLE).res\" $(TRAKTOR_HOME)/res/Traktor.Amalgam.rc"
	local result = run:execute(cmd, "(null)")
	if result ~= 0 then
		stderr:printLn("Unable to build product resources.")
		stderr:printLn(cmd)
		return 1
	end

	-- Link files into an executable product.
	local cmd = "\"" .. link .. "\" " .. externalLinkFiles .. " " .. wholeLinkFiles .. " " .. linkerIncludes
	cmd = cmd .. " msvcrt.lib winmm.lib iphlpapi.lib ws2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib"
	cmd = cmd .. " comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib"
	cmd = cmd .. " comctl32.lib d2d1.lib dwrite.lib gdiplus.lib msimg32.lib d3d11.lib dxgi.lib dinput8.lib dxguid.lib xinput.lib"
	cmd = cmd .. " $(DEPLOY_EXECUTABLE).res"
	cmd = cmd .. " /OUT:$(DEPLOY_EXECUTABLE).exe"
	cmd = cmd .. " /LIBPATH:\"" .. p.dxLibPath .. "\""
	cmd = cmd .. " /LIBPATH:\"" .. p.sdkLibPath .. "\""
	cmd = cmd .. " /LIBPATH:\"" .. p.vcLibPath .. "\""
	cmd = cmd .. " /MACHINE:X64"
	cmd = cmd .. " /SUBSYSTEM:WINDOWS"
	if not debug then
		cmd = cmd .. " /LTCG /OPT:REF"
	else
		cmd = cmd .. " /DEBUG"
	end
	local result = run:execute(cmd, "(null)")
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		return 1
	end

	-- Embed manifest in executable product.
	local cmd = "\"" .. mt .. "\" -manifest $(TRAKTOR_HOME)/res/manifest-win64.xml -outputresource:$(DEPLOY_EXECUTABLE).exe;1"
	local result = run:execute(cmd, "(null)")
	if result ~= 0 then
		stderr:printLn("Unable to embed manifest into executable product.")
		stderr:printLn(cmd)
		return 1
	end

	-- Clean some unwanted files.
	run:rm("*.exp")
	run:rm("*.lib")
	run:rm("*.res")

	-- Copy binaries into "bin".
	run:mkdir("bin64")
	run:replace("$(DEPLOY_EXECUTABLE).exe", "bin64/$(DEPLOY_EXECUTABLE).exe")

	-- Copy external files into "bin".
	if externalCopyFiles ~= "" then
		for _, f in ipairs(externalCopyFiles:split(" ")) do
			run:replace(prepend .. f, "bin64/" .. f)
		end
	end

	return 0
end


function migrateShared(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Determine source binary path.
	local sourcePath
	if not debug then
		stdout:printLn("Deploying binaries to target host...")
		sourcePath = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/releaseshared/"
	else
		stdout:printLn("Deploying *DEBUG* binaries to target host...")
		sourcePath = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/win64/debugshared/"
	end

	-- Copy binaries into "bin".
	run:mkdir("bin64")
	local files = os:getEnvironment("DEPLOY_FILES_SHARED"):split(" ")
	for _, f in ipairs(files) do
		if debug then
			local debugFile = f
			if string.endswith(f, ".dll") then
				debugFile = f:sub(1, string.len(f) - 4) .. "_d.dll"
			elseif string.endswith(f, ".exe") then
				debugFile = f:sub(1, string.len(f) - 4) .. "_d.exe"
			end
			if fileSystem:exist(Path(sourcePath .. debugFile)) then
				f = debugFile
			end
		end
		if not run:replace(sourcePath .. f, "bin64/" .. f) then
			stderr:printLn("Unable to copy file \"" .. f .. "\" to binary folder")
			return 1
		end
	end	
end


function migrate(args)
	stdout:printLn("Migrating Win64...")

	-- Build content database.
	run:execute("$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Database.Migrate.App -p -s=Migrate")
	if run:exitCode() ~= 0 then return run:exitCode() end

	-- Continue with either statically linked product or as a bunch of dynamic libraries.
	local staticLink = (os:getEnvironment("DEPLOY_STATIC_LINK") ~= "")
	if staticLink then
		return migrateStatic(args)
	else
		return migrateShared(args)
	end
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	end
	return 1
end
