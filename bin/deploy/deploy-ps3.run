import(traktor)
import(traktor.run)


function string:split(sep)
	local sep, fields = sep or ":", {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end


function string:endswith(send)
	return #self >= #send and self:find(send, #self - #send + 1, true) and true or false
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Pipeline.App -p -s=Pipeline"
	for i = 1, args:size() - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function deploy(args)
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Collect libraries to link.
	local linkerLibraries = {}
	local linkerIncludes = {}

	local files = os:getEnvironment("DEPLOY_FILES"):split(" ")
	for _, f in ipairs(files) do
		if f:endswith(".lib") then
			if debug then
				f = f:sub(1, f:len() - 4) .. "_d.lib"
			end
			if string.sub(f, 1, 6) ~= "Extern" then
				table.insert(linkerLibraries, f)
				table.insert(linkerIncludes, "__module__" .. f:sub(1, string.len(f) - 4):gsub("%.", "_"))
			else
				table.insert(linkerLibraries, f)
			end
		elseif f:endswith(".a") or f:endswith(".o") then
			table.insert(linkerLibraries, f)
		else
			stderr:printLn("Unknown deploy file \"" .. f .. "\"")
		end
	end

	-- Determine path to module libraries.
	local libraryPathPPU
	local libraryPathSPU
	if not debug then
	 	libraryPathPPU = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/ps3/ppu/releasestatic"
	 	libraryPathSPU = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/ps3/spu/releasestatic"
	else
		stdout:printLn("Using *DEBUG* binaries")
	 	libraryPathPPU = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/ps3/ppu/debugstatic"
	 	libraryPathSPU = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/ps3/spu/releasestatic"	-- Using release SPU binaries until link issues fixed.
	end	

	-- Create a linker "keep" symbol file.
	local f = fileSystem:open(Path("keep.sym"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	for _, sym in ipairs(linkerIncludes) do
		s:printLn(sym)
	end	
	f:close()
	
	-- Build link command line.
	local ld = "$(SCE_PS3_ROOT)/host-win32/sn/bin/ps3ppuld --library-path=" .. libraryPathPPU .. " --library-path=" .. libraryPathSPU
	for _, m in ipairs(linkerLibraries) do
		ld = ld .. " " .. m
	end
	ld = ld .. " --keep=keep.sym"
	if not debug then ld = ld .. " -s --s-lib --strip-unused-data --strip-duplicates" end
	ld = ld .. " -o " .. executable .. ".elf"

	-- Link executable product.
	local result = run:execute(ld)
	if result ~= 0 then
		stderr:printLn("Failed to link PS3 executable.")
		stderr:printLn(ld)
		return 1
	end

	-- Sign executable product.
	local result = run:execute("$(SCE_PS3_ROOT)/host-win32/bin/make_fself " .. executable .. ".elf " .. executable .. ".self")
	if result ~= 0 then
		stderr:printLn("Failed to sign PS3 executable.")
		return 1
	end

	stdout:printLn("PS3 deployed successfully.")
	return 0
end


function launch(args)
	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")

	stdout:printLn("Launching PS3...")
	local result = run:execute("\"$(SN_PS3_PATH)/bin/ps3run.exe\" -k -r2 -f . " .. executable .. ".self", "(null)")
	if result ~= 0 then
		stderr:printLn("Failed to launch PS3 executable (" .. result .. ").")
		return 1
	end

	return 0
end


function migrate(args)
	stdout:printLn("Migrating PS3...")

	run:execute("$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Database.Migrate.App -p -s=Migrate")
	if run:exitCode() ~= 0 then return run:exitCode() end

	local executable = os:getEnvironment("DEPLOY_EXECUTABLE")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	-- Collect libraries to link.
	local linkerLibraries = {}
	local linkerIncludes = {}

	local files = os:getEnvironment("DEPLOY_FILES"):split(" ")
	for _, f in ipairs(files) do
		if f:endswith(".lib") then
			if debug then
				f = f:sub(1, f:len() - 4) .. "_d.lib"
			end
			if string.sub(f, 1, 6) ~= "Extern" then
				table.insert(linkerLibraries, f)
				table.insert(linkerIncludes, "__module__" .. f:sub(1, string.len(f) - 4):gsub("%.", "_"))
			else
				table.insert(linkerLibraries, f)
			end
		elseif f:endswith(".a") or f:endswith(".o") then
			table.insert(linkerLibraries, f)
		else
			stderr:printLn("Unknown deploy file \"" .. f .. "\"")
		end
	end

	-- Determine path to module libraries.
	local libraryPathPPU
	local libraryPathSPU
	if not debug then
	 	libraryPathPPU = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/ps3/ppu/releasestatic"
	 	libraryPathSPU = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/ps3/spu/releasestatic"
	else
		stdout:printLn("Using *DEBUG* binaries")
	 	libraryPathPPU = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/ps3/ppu/debugstatic"
	 	libraryPathSPU = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/ps3/spu/releasestatic"	-- Using release SPU binaries until link issues fixed.
	end	

	-- Create a linker "keep" symbol file.
	local f = fileSystem:open(Path("keep.sym"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	for _, sym in ipairs(linkerIncludes) do
		s:printLn(sym)
	end	
	f:close()

	-- Build link command line.
	local ld = "$(SCE_PS3_ROOT)/host-win32/sn/bin/ps3ppuld --library-path=" .. libraryPathPPU .. " --library-path=" .. libraryPathSPU
	for _, m in ipairs(linkerLibraries) do
		ld = ld .. " " .. m
	end
	ld = ld .. " --keep=keep.sym"
	if not debug then ld = ld .. " -s --s-lib --strip-unused-data --strip-duplicates" end
	ld = ld .. " -o " .. executable .. ".elf"

	-- Link executable product.
	local result = run:execute(ld)
	if result ~= 0 then
		stderr:printLn("Failed to link PS3 executable.")
		stderr:printLn(ld)
		return 1
	end

	-- Sign executable product.
	local result = run:execute("$(SCE_PS3_ROOT)/host-win32/bin/make_fself " .. executable .. ".elf " .. executable .. ".self")
	if result ~= 0 then
		stderr:printLn("Failed to sign PS3 executable.")
		return 1
	end

	return 0
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	end
	return 1
end
