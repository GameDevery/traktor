

-- Application icon definitions.
local iconDefinitions =
{
	{ image = "Icon.png", idiom = "iphone", width = 29, height = 29, scale = 2 },
	{ image = "Icon.png", idiom = "iphone", width = 29, height = 29, scale = 3 },
	{ image = "Icon.png", idiom = "iphone", width = 40, height = 40, scale = 2 },
	{ image = "Icon.png", idiom = "iphone", width = 40, height = 40, scale = 3 },
	{ image = "Icon.png", idiom = "iphone", width = 60, height = 60, scale = 2 },
	{ image = "Icon.png", idiom = "iphone", width = 60, height = 60, scale = 3 },
	{ image = "Icon.png", idiom = "ipad",   width = 29, height = 29, scale = 1 },
	{ image = "Icon.png", idiom = "ipad",   width = 29, height = 29, scale = 2 },
	{ image = "Icon.png", idiom = "ipad",   width = 40, height = 40, scale = 1 },
	{ image = "Icon.png", idiom = "ipad",   width = 40, height = 40, scale = 2 },
	{ image = "Icon.png", idiom = "ipad",   width = 76, height = 76, scale = 1 },
	{ image = "Icon.png", idiom = "ipad",   width = 76, height = 76, scale = 2 },
}


-- Launch image definitions (pre-iOS 7.0).
local imageDefinitions =
{
	{ image = "Default-iPad-Portrait.png",  extent = "full-screen",   idiom = "ipad",   subtype = nil,       width = 1536/2, height = 2048/2, minversion = "7.0", orientation = "portrait",  scale = 2 },
	{ image = "Default-iPad-Landscape.png", extent = "full-screen",   idiom = "ipad",   subtype = nil,       width = 1024/1, height = 768/1,  minversion = "7.0", orientation = "landscape", scale = 1 },
	{ image = "Default-iPad-Landscape.png", extent = "full-screen",   idiom = "ipad",   subtype = nil,       width = 2048/2, height = 1536/2, minversion = "7.0", orientation = "landscape", scale = 2 },
	{ image = "Default-iPhone.png",         extent = nil,             idiom = "iphone", subtype = nil,       width = 640/2,  height = 960/2,  minversion = "7.0", orientation = "portrait",  scale = 2 },
	{ image = "Default-iPhone.png",         extent = nil,             idiom = "iphone", subtype = "retina4", width = 640/2,  height = 1136/2, minversion = "7.0", orientation = "portrait",  scale = 2 },
	{ image = "Default-iPad-Portrait.png",  extent = "full-screen",   idiom = "ipad",   subtype = nil,       width = 768/1,  height = 1024/1, minversion = "7.0", orientation = "portrait",  scale = 1 },
}


-- Launch screen image definitions (iOS 8.0+).
local launchScreenDefinitions =
{
	{ image = "Default-iPhone.png",         idiom = "iphone", subtype = nil, width = 1242/3, height = 2208/3, scale = 1 },
	{ image = "Default-iPhone.png",         idiom = "iphone", subtype = nil, width = 1242/3, height = 2208/3, scale = 2 },
	{ image = "Default-iPhone.png",         idiom = "iphone", subtype = nil, width = 1242/3, height = 2208/3, scale = 3 },
	{ image = "Default-iPad-Portrait.png",  idiom = "ipad",   subtype = nil, width = 1536/2, height = 2048/2, scale = 1 },
	{ image = "Default-iPad-Portrait.png",  idiom = "ipad",   subtype = nil, width = 1536/2, height = 2048/2, scale = 2 },
}


function string:split(sep)
	local sep, fields = sep or ":", {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end


function string:endswith(send)
	return #self >= #send and self:find(send, #self - #send + 1, true) and true or false
end


function generateImage(fileName, image, width, height)
	local outputAspect = width / height

	local sourceWidth = image:getWidth()
	local sourceHeight = image:getHeight()

	local cropWidth = sourceWidth
	local cropHeight = math.floor(sourceWidth / outputAspect)

	local output = image:clone(true)
	output:apply(CropFilter(0, 0, cropWidth, cropHeight))
	output:apply(ScaleFilter(width, height))
	output:save(fileName)
end


function createXCAssets()

	-- Icons
	run:mkdir("Images.xcassets/Icon.appiconset")
	local f = fileSystem:open(Path("Images.xcassets/Icon.appiconset/Contents.json"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("{")
	s:printLn("  \"images\" : [")

	for i, id in ipairs(iconDefinitions) do
		local image = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/" .. id.image)
		if image == nil then
			return false
		end

		generateImage(
			"Images.xcassets/Icon.appiconset/Icon-" .. i .. ".png",
			image,
			id.width * id.scale,
			id.height * id.scale
		)

		s:printLn("    {")
		s:printLn("      \"size\" : \"" .. id.width .. "x" .. id.height .. "\",")
		s:printLn("      \"idiom\" : \"" .. id.idiom .. "\",")
		s:printLn("      \"filename\" : \"Icon-" .. i .. ".png\",")
		s:printLn("      \"scale\" : \"" .. id.scale .. "x\"")
		s:printLn("    },")
	end

	s:printLn("  ],")
	s:printLn("  \"info\" : {")
	s:printLn("    \"version\" : 1,")
	s:printLn("    \"author\" : \"xcode\"")
	s:printLn("  }")
	s:printLn("}")

	f:close()

	-- Legacy launch images.
	run:mkdir("Images.xcassets/Default.launchimage")
	local f = fileSystem:open(Path("Images.xcassets/Default.launchimage/Contents.json"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("{")
	s:printLn("  \"images\" : [")

	for i, id in ipairs(imageDefinitions) do
		local image = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/" .. id.image)
		if image == nil then
			return false
		end

		generateImage(
			"Images.xcassets/Default.launchimage/Default-" .. i .. ".png",
		 	image,
		 	id.width * id.scale,
		 	id.height * id.scale
		)

		s:printLn("    {")
		
		if id.extent ~= nil then
			s:printLn("      \"extent\" : \"" .. id.extent .. "\",")
		end

		s:printLn("      \"idiom\" : \"" .. id.idiom .. "\",")

		if id.subtype ~= nil then
			s:printLn("      \"subtype\" : \"" .. id.subtype .. "\",")
		end

		s:printLn("      \"filename\" : \"Default-" .. i .. ".png\",")

		if id.minversion ~= nil then
			s:printLn("      \"minimum-system-version\" : \"" .. id.minversion .. "\",")
		end

		s:printLn("      \"orientation\" : \"" .. id.orientation .. "\",")
		s:printLn("      \"scale\" : \"" .. id.scale .. "x\"")
		s:printLn("    },")
	end

	s:printLn("  ],")
	s:printLn("  \"info\" : {")
	s:printLn("    \"version\" : 1,")
	s:printLn("    \"author\" : \"xcode\"")
	s:printLn("  }")
	s:printLn("}")

	f:close()

	-- LaunchScreen images.
	run:mkdir("Images.xcassets/Launch.imageset")

	local f = fileSystem:open(Path("Images.xcassets/Launch.imageset/Contents.json"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("{")
	s:printLn("  \"images\" : [")

	for i, id in ipairs(launchScreenDefinitions) do
		local image = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/" .. id.image)
		if image == nil then
			stderr:printLn("Failed to generate iOS launch images; unable to read source image")
			return 1
		end

		generateImage(
			"Images.xcassets/Launch.imageset/Launch-" .. i .. ".png",
		 	image,
		 	id.width * id.scale,
		 	id.height * id.scale
		)

		s:printLn("    {")
		s:printLn("      \"idiom\" : \"" .. id.idiom .. "\",")

		if id.subtype ~= nil then
			s:printLn("      \"subtype\" : \"" .. id.subtype .. "\",")
		end

		s:printLn("      \"filename\" : \"Launch-" .. i .. ".png\",")
		s:printLn("      \"scale\" : \"" .. id.scale .. "x\"")
		s:printLn("    },")
	end

	s:printLn("  ],")
	s:printLn("  \"info\" : {")
	s:printLn("    \"version\" : 1,")
	s:printLn("    \"author\" : \"xcode\"")
	s:printLn("  }")
	s:printLn("}")

	f:close()
	return true
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Pipeline.App -p -s=Pipeline"
	for i = 1, args:size() - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function deploy(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	stdout:printLn("Generating Info.plist...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Info.plist.template", "Info.plist") ~= 0 then
		stderr:printLn("Failed to generate Info.plist")
		return 1
	end

	stdout:printLn("Generating Main.mm...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Main.mm.template", "Main.mm") ~= 0 then
		stderr:printLn("Failed to generate Main.mm")
		return 1
	end

	stdout:printLn("Generating LaunchScreen.xib...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/LaunchScreen.xib.template", "LaunchScreen.xib") ~= 0 then
		stderr:printLn("Failed to generate LaunchScreen.xib")
		return 1
	end

	stdout:printLn("Generating Images.xcassets...")
	if not createXCAssets() then
		stderr:printLn("Failed to generate Images.xcassets")
		return 1
	end

	stdout:printLn("Generating Xcode project...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/project.pbxproj.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj") ~= 0 then
		stderr:printLn("Failed to generate Xcode project")
		return 1
	end

	stdout:printLn("Generating Xcode scheme...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/scheme.xcscheme.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes/$(DEPLOY_PROJECT_NAME).xcscheme") ~= 0 then
		stderr:printLn("Failed to generate Xcode scheme")
		return 1
	end

	stdout:printLn("Generating Xcode launcher script...")
	local f = fileSystem:open(Path("launch.sh"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("open \"${*:1}\".xcodeproj")
	f:close()	

	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		stdout:printLn("Deploying resources to target host...")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) launch.sh *.plist *.mm *.xib *.png Application.config", "(null)")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) -recursive Images.xcassets/*.*", "(null)")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) \"$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj\"", "(null)")

		if not debug then
			stdout:printLn("Deploying binaries to target host...")
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/ios/releasestatic")
		else
			stdout:printLn("Deploying *DEBUG* binaries to target host...")
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/ios/debugstatic")
		end

		local files = os:getEnvironment("DEPLOY_FILES"):split(" ")
		
		local deployFiles = ""
		local deployBundles = {}

		for _, f in ipairs(files) do
			if string.endswith(f, ".a") then
				if debug then
					f = f:sub(1, string.len(f) - 2) .. "_d.a"
				end
				deployFiles = deployFiles .. " " .. f
			elseif string.endswith(f, ".plist") then
				deployFiles = deployFiles .. " " .. f
			elseif string.endswith(f, ".framework") or string.endswith(f, ".bundle") then
				table.insert(deployBundles, f)
			end
		end

		if #deployFiles > 0 then
			run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST)" .. deployFiles, "(null)")
		end

		for _, bundle in ipairs(deployBundles) do
			run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy -recursive $(DEPLOY_TARGET_HOST) " .. bundle .. "/*.*", "(null)")
		end

		run:popd()
	end

	stdout:printLn("Deploy finished")
	return 0
end


function launch(args)
	stdout:printLn("Launching Xcode on target host...")
	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		local result = run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteLaunch $(DEPLOY_TARGET_HOST) launch.sh \"$(DEPLOY_PROJECT_NAME)\"", "(null)")
		if result ~= 0 then
			stderr:printLn("Failed to launch iOS application")
			return 1
		end
	end
	return 0
end


function migrate(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	stdout:printLn("Migrating iOS...")
	if run:execute("$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Database.Migrate.App -p -s=Migrate") ~= 0 then
		stderr:printLn("Failed to migrate iOS database")
		return 1
	end

	stdout:printLn("Generating Info.plist...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Info.plist.template", "Info.plist") ~= 0 then
		stderr:printLn("Failed to generate Info.plist")
		return 1
	end

	stdout:printLn("Generating Main.mm...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Main.mm.template", "Main.mm") ~= 0 then
		stderr:printLn("Failed to generate Main.mm")
		return 1
	end

	stdout:printLn("Generating LaunchScreen.xib...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/LaunchScreen.xib.template", "LaunchScreen.xib") ~= 0 then
		stderr:printLn("Failed to generate LaunchScreen.xib")
		return 1
	end

	stdout:printLn("Generating Images.xcassets...")
	if not createXCAssets() then
		stderr:printLn("Failed to generate Images.xcassets")
		return 1
	end

	stdout:printLn("Generating Xcode project...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/project.pbxproj.template Content.compact", "$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj") ~= 0 then
		stderr:printLn("Failed to generate Xcode project")
		return 1
	end

	stdout:printLn("Generating Xcode scheme...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/scheme.xcscheme.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes/$(DEPLOY_PROJECT_NAME).xcscheme") ~= 0 then
		stderr:printLn("Failed to generate Xcode scheme")
		return 1
	end

	stdout:printLn("Generating Xcode launcher script...")
	local f = fileSystem:open(Path("launch.sh"), 2)
	local s = StreamOutput(f, Utf8Encoding(), "unix")
	s:printLn("open \"${*:1}\".xcodeproj")
	f:close()	

	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		stdout:printLn("Deploying resources to target host...")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) launch.sh *.plist *.mm *.xib *.png Content.compact Application.config", "(null)")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) -recursive Images.xcassets/*.*", "(null)")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) \"$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj\"", "(null)")

		if not debug then
			stdout:printLn("Deploying binaries to target host...")
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/ios/releasestatic")
		else
			stdout:printLn("Deploying *DEBUG* binaries to target host...")
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/ios/debugstatic")
		end

		local files = os:getEnvironment("DEPLOY_FILES"):split(" ")
		
		local deployFiles = ""
		local deployBundles = {}

		for _, f in ipairs(files) do
			if string.endswith(f, ".a") then
				if debug then
					f = f:sub(1, string.len(f) - 2) .. "_d.a"
				end
				deployFiles = deployFiles .. " " .. f
			elseif string.endswith(f, ".plist") then
				deployFiles = deployFiles .. " " .. f
			elseif string.endswith(f, ".framework") or string.endswith(f, ".bundle") then
				table.insert(deployBundles, f)
			end
		end

		if #deployFiles > 0 then
			run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST)" .. deployFiles, "(null)")
		end

		for _, bundle in ipairs(deployBundles) do
			run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy -recursive $(DEPLOY_TARGET_HOST) " .. bundle .. "/*.*", "(null)")
		end

		stdout:printLn("Launching Xcode on target host...")
		if run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteLaunch $(DEPLOY_TARGET_HOST) launch.sh \"$(DEPLOY_PROJECT_NAME)\"", "(null)") ~= 0 then
			stderr:printLn("Failed to launch Xcode")
			return 1
		end
	end

	stdout:printLn("Migrate finished")
	return 0	
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	end
	return 1
end
