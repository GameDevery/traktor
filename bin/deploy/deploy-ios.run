

function string:split(sep)
	local sep, fields = sep or ":", {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end


function string:endswith(send)
	return #self >= #send and self:find(send, #self - #send + 1, true) and true or false
end


function generateImage(fileName, image, width, height)
	local outputAspect = width / height

	local sourceWidth = image:getWidth()
	local sourceHeight = image:getHeight()

	local cropWidth = sourceWidth
	local cropHeight = math.floor(sourceWidth / outputAspect)

	local output = image:clone(true)
	output:apply(CropFilter(0, 0, cropWidth, cropHeight))
	output:apply(ScaleFilter(width, height))
	output:save(fileName)
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Pipeline.App -p -s=Pipeline"
	for i = 1, args:size() - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function deploy(args)
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	stdout:printLn("Generating iOS default images...")
	local defaultImage = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Default.png")
	if defaultImage ~= nil then
		generateImage("Default.png", defaultImage, 320, 480)
		generateImage("Default@2x.png", defaultImage, 640, 960)
		generateImage("Default-568h@2x.png", defaultImage, 640, 1136)
		generateImage("Default-ipad.png", defaultImage, 768, 1024)
		generateImage("Default@2x-ipad.png", defaultImage, 1536, 2048)
	else
		stderr:printLn("Failed to generate iOS default images; unable to read source image")
		return 1
	end

	stdout:printLn("Generating iOS icon images...")
	local iconImage = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Icon.png")
	if iconImage ~= nil then
		generateImage("Icon.png", iconImage, 60, 60)
		generateImage("Icon@2x.png", iconImage, 120, 120)
		generateImage("Icon-76.png", iconImage, 76, 76)
		generateImage("Icon-76@2x.png", iconImage, 152, 152)
		generateImage("Icon-Small.png", iconImage, 29, 29)
		generateImage("Icon-Small@2x.png", iconImage, 58, 58)
		generateImage("Icon-Small-50.png", iconImage, 50, 50)
	else
		stderr:printLn("Failed to generate iOS icon images; unable to read source image")
		return 1
	end

	stdout:printLn("Generating Info.plist...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Info.plist.template", "Info.plist") ~= 0 then
		stderr:printLn("Failed to generate Info.plist")
		return 1
	end

	stdout:printLn("Generating Main.cpp...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Main.cpp.template", "Main.cpp") ~= 0 then
		stderr:printLn("Failed to generate Main.cpp")
		return 1
	end

	stdout:printLn("Generating Xcode project...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/project.pbxproj.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj") ~= 0 then
		stderr:printLn("Failed to generate Xcode project")
		return 1
	end

	stdout:printLn("Generating Xcode scheme...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/scheme.xcscheme.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes/$(DEPLOY_PROJECT_NAME).xcscheme") ~= 0 then
		stderr:printLn("Failed to generate Xcode scheme")
		return 1
	end

	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		stdout:printLn("Deploying resources to target host...")
		run:pushd("$(TRAKTOR_HOME)/bin/osx")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) kick-open.sh", "(null)")
		run:popd()
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) *.plist *.png *.cpp Application.config", "(null)")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) \"$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj\"", "(null)")

		if not debug then
			stdout:printLn("Deploying binaries to target host...")
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/ios/releasestatic")
		else
			stdout:printLn("Deploying *DEBUG* binaries to target host...")
			run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/ios/debugstatic")
		end

		local files = os:getEnvironment("DEPLOY_FILES"):split(" ")
		
		local deployFiles = ""
		local deployBundles = {}

		for _, f in ipairs(files) do

			if string.endswith(f, ".a") then
				if debug then
					f = f:sub(1, string.len(f) - 2) .. "_d.a"
				end
				deployFiles = deployFiles .. " " .. f
			elseif string.endswith(f, ".framework") or string.endswith(f, ".bundle") then
				table.insert(deployBundles, f)
			end
		end

		if #deployFiles > 0 then
			run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST)" .. deployFiles, "(null)")
		end

		for _, bundle in ipairs(deployBundles) do
			run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy -recursive $(DEPLOY_TARGET_HOST) " .. bundle .. "/*.*", "(null)")
		end

		run:popd()
	end

	stdout:printLn("Deploy finished")
	return 0
end


function launch(args)
	stdout:printLn("Launching iOS...")
	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		local result = run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteLaunch $(DEPLOY_TARGET_HOST) kick-open.sh \"$(DEPLOY_PROJECT_NAME)\"", "(null)")
		if result ~= 0 then
			stderr:printLn("Failed to launch iOS application")
			return 1
		end
	end
	return 0
end


function migrate(args)
	stdout:printLn("Migrating iOS...")
	if run:execute("$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Database.Migrate.App -p -s=Migrate") ~= 0 then
		stderr:printLn("Failed to migrate iOS database")
		return 1
	end

	stdout:printLn("Generating iOS default images...")
	local defaultImage = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Default.png")
	if defaultImage ~= nil then
		generateImage("Default.png", defaultImage, 320, 480)
		generateImage("Default@2x.png", defaultImage, 640, 960)
		generateImage("Default-568h@2x.png", defaultImage, 640, 1136)
		generateImage("Default-ipad.png", defaultImage, 768, 1024)
		generateImage("Default@2x-ipad.png", defaultImage, 1536, 2048)
	else
		stderr:printLn("Failed to generate iOS default images; unable to read source image")
		return 1
	end

	stdout:printLn("Generating iOS icon images...")
	local iconImage = Image.loadFromFile("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Icon.png")
	if iconImage ~= nil then
		generateImage("Icon.png", iconImage, 60, 60)
		generateImage("Icon@2x.png", iconImage, 120, 120)
		generateImage("Icon-76.png", iconImage, 76, 76)
		generateImage("Icon-76@2x.png", iconImage, 152, 152)
		generateImage("Icon-Small.png", iconImage, 29, 29)
		generateImage("Icon-Small@2x.png", iconImage, 58, 58)
		generateImage("Icon-Small-50.png", iconImage, 50, 50)
	else
		stderr:printLn("Failed to generate iOS icon images; unable to read source image")
		return 1
	end

	stdout:printLn("Generating Info.plist...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Info.plist.template", "Info.plist") ~= 0 then
		stderr:printLn("Failed to generate Info.plist")
		return 1
	end

	stdout:printLn("Generating Main.cpp...")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/Main.cpp.template", "Main.cpp") ~= 0 then
		stderr:printLn("Failed to generate Main.cpp")
		return 1
	end

	stdout:printLn("Generating Xcode project...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/project.pbxproj.template Content.compact", "$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj") ~= 0 then
		stderr:printLn("Failed to generate Xcode project")
		return 1
	end

	stdout:printLn("Generating Xcode scheme...")
	run:mkdir("$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes")
	if run:run("$(DEPLOY_SYSTEM_ROOT)/res/deploy/ios/scheme.xcscheme.template", "$(DEPLOY_PROJECT_NAME).xcodeproj/xcshareddata/xcschemes/$(DEPLOY_PROJECT_NAME).xcscheme") ~= 0 then
		stderr:printLn("Failed to generate Xcode scheme")
		return 1
	end

	if environment:get("DEPLOY_TARGET_HOST") ~= "localhost" then
		stdout:printLn("Deploying resources to target host...")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) *.plist *.png *.cpp Content.compact Application.config", "(null)")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) \"$(DEPLOY_PROJECT_NAME).xcodeproj/project.pbxproj\"", "(null)")

		stdout:printLn("Deploying binaries to target host...")
		run:pushd("$(DEPLOY_SYSTEM_ROOT)/bin/latest/ios/releasestatic")
		run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteDeploy $(DEPLOY_TARGET_HOST) *.a", "(null)")
		run:popd()

		stdout:printLn("Launching Xcode on target host...")
		if run:execute("$(TRAKTOR_HOME)/bin/$(DEPLOY_HOST_OS)/RemoteLaunch $(DEPLOY_TARGET_HOST) kick-open.sh \"$(DEPLOY_PROJECT_NAME)\"", "(null)") ~= 0 then
			stderr:printLn("Failed to launch Xcode")
			return 1
		end
	end

	stdout:printLn("Migrate finished")
	return 0	
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	end
	return 1
end
