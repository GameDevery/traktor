

function string:trim()
	return self:find'^%s*$' and '' or self:match'^%s*(.*%S)'
end


function string:starts(start)
   return string.sub(self, 1, string.len(start)) == start
end


function string:split(sep)
	local sep, fields = sep or ":", {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end


function build(args)
	stdout:printLn("Building asset(s)...")
	local cmdline = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Pipeline.App -p -s=Pipeline"
	for i = 1, args:size() - 1 do
		cmdline = cmdline .. " " .. args:get(i)
	end
	return run:execute(cmdline)
end


function deploy(args)
	stdout:printLn("Deploying Emscripten...")

	local host = os:getEnvironment("DEPLOY_HOST_OS")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	local emscripten = os:getEnvironment("EMSCRIPTEN")
	if #emscripten <= 0 then
		stderr:printLn("EMSCRIPTEN not set; ensure Emscripten SDK is properly installed and try again.")
		return 1
	end

	-- Get toolchain binaries.
	local emcc = emscripten .. "/emcc" 
	if #emcc <= 0 then
		stderr:printLn("Unable to determine toolchain binaries; ensure Emscripten SDK is properly installed and try again.")
		return 1
	end

	-- As toolchain binaries on Windows are actually bat-file wrappers we need to append suffix.
	if host == "win32" or host == "win64" then
		emcc = emcc .. ".bat"
	end

	-- Ensure debug symbols are kept when linking.
	if debug then
		emcc = emcc .. " -g"
	end

	-- Determine path to module libraries.
	local prepend
	if not debug then
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/emscripten/releasestatic/"
	else
		stdout:printLn("Using *DEBUG* binaries")
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/emscripten/debugstatic/"
	end

	-- Append system path to files.
	local files = os:getEnvironment("DEPLOY_FILES"):split(" ")
	local wholeLinkFiles = ""
	local externalLinkFiles = ""
	for _, f in ipairs(files) do

		-- Append "_d" to each file; indicating a debug build.
		if debug then
			f = f:sub(1, string.len(f) - 3) .. "_d.bc"
		end

		if f:starts("libExtern") then
			externalLinkFiles = externalLinkFiles .. prepend .. f .. " "
		else
			wholeLinkFiles = wholeLinkFiles .. prepend .. f .. " "
		end
	end

	-- Link files into an executable product.
	local cmd = "\"" .. emcc .. "\" -Wl,--whole-archive " .. wholeLinkFiles .. "-Wl,--no-whole-archive " .. externalLinkFiles  .. " -o $(DEPLOY_EXECUTABLE).html --embed-file Application.config"
	local result = run:execute(cmd)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		return 1
	end

	return 0
end


function launch(args)
	return 0
end


function migrate(args)
	stdout:printLn("Migrating Emscripten...")
	
	local result = run:execute("$(DEPLOY_SYSTEM_ROOT)/bin/latest/$(DEPLOY_HOST_OS)/releaseshared/Traktor.Database.Migrate.App -p -s=Migrate")
	if result ~= 0 then
		stderr:printLn("Unable to migrate content.")
		return 1
	end

	stdout:printLn("Deploying Emscripten...")

	local host = os:getEnvironment("DEPLOY_HOST_OS")
	local debug = (os:getEnvironment("DEPLOY_DEBUG") ~= "")

	local emscripten = os:getEnvironment("EMSCRIPTEN")
	if #emscripten <= 0 then
		stderr:printLn("EMSCRIPTEN not set; ensure Emscripten SDK is properly installed and try again.")
		return 1
	end

	-- Get toolchain binaries.
	local emcc = emscripten .. "/emcc" 
	if #emcc <= 0 then
		stderr:printLn("Unable to determine toolchain binaries; ensure Emscripten SDK is properly installed and try again.")
		return 1
	end

	-- As toolchain binaries on Windows are actually bat-file wrappers we need to append suffix.
	if host == "win32" or host == "win64" then
		emcc = emcc .. ".bat"
	end

	-- Ensure debug symbols are kept when linking.
	if debug then
		emcc = emcc .. " -g"
	end

	-- Determine path to module libraries.
	local prepend
	if not debug then
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/emscripten/releasestatic/"
	else
		stdout:printLn("Using *DEBUG* binaries")
	 	prepend = "$(DEPLOY_SYSTEM_ROOT)/bin/latest/emscripten/debugstatic/"
	end

	-- Append system path to files.
	local files = os:getEnvironment("DEPLOY_FILES"):split(" ")
	local wholeLinkFiles = ""
	local externalLinkFiles = ""
	for _, f in ipairs(files) do

		-- Append "_d" to each file; indicating a debug build.
		if debug then
			f = f:sub(1, string.len(f) - 2) .. "_d.a"
		end

		if f:starts("libExtern") then
			externalLinkFiles = externalLinkFiles .. prepend .. f .. " "
		else
			wholeLinkFiles = wholeLinkFiles .. prepend .. f .. " "
		end
	end

	-- Link files into an executable product.
	local totalMemory = 32 * 1024 * 1024
	local cmd = "\"" .. emcc .. "\" -s TOTAL_MEMORY=" .. totalMemory .. " -Wl,--whole-archive " .. wholeLinkFiles .. "-Wl,--no-whole-archive " .. externalLinkFiles  .. " -o $(DEPLOY_EXECUTABLE).html --embed-file Application.config --embed-file Content.compact"
	local result = run:execute(cmd)
	if result ~= 0 then
		stderr:printLn("Unable to build executable product.")
		stderr:printLn(cmd)
		return 1
	end

	return 0
end


function main(args)
	local action = args:get(0)
	if action == "build" then
		return build(args)
	elseif action == "deploy" then
		return deploy(args)
	elseif action == "launch" then
		return launch(args)
	elseif action == "migrate" then
		return migrate(args)
	end
	return 1
end
